<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!-- A set of on-line citation libraries are maintained on the xml2rfc web site.
     The next line defines an entity named RFC2629, which contains the necessary XML
     for the reference element, and is used much later in the file.  This XML contains an
     anchor (also RFC2629) which can be used to cross-reference this item in the text.
     You can also use local file names instead of a URI.  The environment variable
     XML_LIBRARY provides a search path of directories to look at to locate a 
     relative path name for the file. There has to be one entity for each item to be
     referenced. -->
<!ENTITY RFC0791 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.0791.xml">
<!ENTITY RFC0793 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.0793.xml">
<!ENTITY RFC0896 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.0896.xml">
<!ENTITY RFC1122 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1122.xml">
<!ENTITY RFC1191 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1191.xml">
<!ENTITY RFC1349 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1349.xml">
<!ENTITY RFC1644 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.1644.xml">
<!ENTITY RFC2018 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2018.xml">
<!ENTITY RFC2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC2474 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2474.xml">
<!ENTITY RFC2525 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2525.xml">
<!ENTITY RFC2675 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2675.xml">
<!ENTITY RFC2873 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2873.xml">
<!ENTITY RFC2883 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2883.xml">
<!ENTITY RFC2914 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2914.xml">
<!ENTITY RFC2923 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2923.xml">
<!ENTITY RFC3168 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3168.xml">
<!ENTITY RFC3449 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3449.xml">
<!ENTITY RFC3465 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.3465.xml">
<!ENTITY RFC4727 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4727.xml">
<!ENTITY RFC4821 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4821.xml">
<!ENTITY RFC4953 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4953.xml">
<!ENTITY RFC4987 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4987.xml">
<!ENTITY RFC5033 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5033.xml">
<!ENTITY RFC5044 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5044.xml">
<!ENTITY RFC5461 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5461.xml">
<!ENTITY RFC5570 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5570.xml">
<!ENTITY RFC5681 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5681.xml">
<!ENTITY RFC5795 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5795.xml">
<!ENTITY RFC5925 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5925.xml">
<!ENTITY RFC5961 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5961.xml">
<!ENTITY RFC6093 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6093.xml">
<!ENTITY RFC6191 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6191.xml">
<!ENTITY RFC6298 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6298.xml">
<!ENTITY RFC6429 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6429.xml">
<!ENTITY RFC6528 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6528.xml">
<!ENTITY RFC6633 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6633.xml">
<!ENTITY RFC6691 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6691.xml">
<!ENTITY RFC6864 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6864.xml">
<!ENTITY RFC6994 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6994.xml">
<!ENTITY RFC7094 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7094.xml">
<!ENTITY RFC7323 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7323.xml">
<!ENTITY RFC7413 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7413.xml">
<!ENTITY RFC7414 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7414.xml">
<!ENTITY RFC7657 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.7657.xml">
<!ENTITY RFC8087 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8087.xml">
<!ENTITY RFC8095 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8095.xml">
<!ENTITY RFC8174 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8174.xml">
<!ENTITY RFC8200 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8200.xml">
<!ENTITY RFC8201 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8201.xml">
<!ENTITY RFC8303 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8303.xml">
<!ENTITY RFC8504 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8504.xml">
<!ENTITY RFC8546 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8546.xml">
<!ENTITY RFC8548 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8548.xml">
<!ENTITY RFC8558 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8558.xml">
<!ENTITY RFC8684 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8684.xml">
<!ENTITY RFC8961 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.8961.xml">
<!ENTITY RFC9000 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.9000.xml">
<!ENTITY RFC9065 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.9065.xml">

<!-- There is also a library of current Internet Draft citations.  It isn't a good idea to
     actually use one for the template because it might have disappeared when you come to test 
     this template.  This is the form of the entity definition
     &lt;!ENTITY I-D.mrose-writing-rfcs SYSTEM 
     "http://xml.resource.org/public/rfc/bibxml3/reference.I-D.mrose-writing-rfcs.xml">
     corresponding to a draft filename draft-mrose-writing-rfcs-nn.txt. The citation will be
     to the most recent draft in the sequence, and is updated roughly hourly on the web site.
     For working group drafts, the same principle applies: file name starts draft-ietf-wgname-..
     and entity file is reference.I-D.ietf-wgname-...  The corresponding entity name is 
     I-D.ietf-wgname-... (I-D.mrose-writing-rfcs for the other example).  Of course this doesn't
     change when the draft version changes.
     -->

<!ENTITY I-D.gont-tcpm-tcp-seccomp-prec SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-gont-tcpm-tcp-seccomp-prec-00.xml">
<!ENTITY I-D.gont-tcpm-tcp-seq-validation SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-gont-tcpm-tcp-seq-validation-04.xml">
<!ENTITY I-D.ietf-tcpm-tcp-edo SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-ietf-tcpm-tcp-edo-10.xml">
<!ENTITY I-D.mcquistin-augmented-ascii-diagrams SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-mcquistin-augmented-ascii-diagrams-08.xml">
<!ENTITY I-D.iab-use-it-or-lose-it SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml3/reference.I-D.draft-iab-use-it-or-lose-it-02.xml">

<!-- Fudge for XMLmind which doesn't have this built in -->
<!ENTITY nbsp    "&#160;">
]>

<!-- Extra statement used by XSLT processors to control the output style. -->
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>


<!-- Processing Instructions can be placed here but if you are editing 
     with XMLmind (and maybe other XML editors) they are better placed
     after the rfc element start tag as shown below. -->
     
<!-- Information about the document.
     category values: std, bcp, info, exp, and historic
     For Internet-Drafts, specify attribute "ipr".
     (ipr values are: full3667, noModification3667, noDerivatives3667),
     Also for Internet-Drafts, can specify values for
     attributes "docName" and, if relevant, "iprExtract".  Note
     that the value for iprExtract is the anchor attribute
     value of a section (such as a MIB specification) that can be 
     extracted for separate publication, and is only
     useful whenhe value of "ipr" is not "full3667". -->
<rfc
    category="std"
    obsoletes="793, 879, 2873, 6093, 6429, 6528, 6691"
    updates="5961, 1122"
    ipr="pre5378Trust200902"
    docName="draft-ietf-tcpm-rfc793bis-25" >
    <!-- Processing Instructions- PIs (for a complete list and description,
          see file http://xml.resource.org/authoring/README.html and below... -->

    <!-- Some of the more generally applicable PIs that most I-Ds might want to use -->
    
    <!-- Try to enforce the ID-nits conventions and DTD validity -->
    <?rfc strict="yes" ?>

    <!-- Items used when reviewing the document -->
    <?rfc comments="no" ?>  <!-- Controls display of <cref> elements -->
    <?rfc inline="no" ?>    <!-- When no, put comments at end in comments section,
                                 otherwise, put inline -->
    <?rfc editing="no" ?>   <!-- When yes, insert editing marks: editing marks consist of a 
                                 string such as <29> printed in the blank line at the 
                                 beginning of each paragraph of text. -->

    <!-- Create Table of Contents (ToC) and set some options for it.  
         Note the ToC may be omitted for very short documents,but idnits insists on a ToC 
         if the document has more than 15 pages. --> 
   <?rfc toc="yes"?>
   <?rfc tocompact="yes"?> <!-- If "yes" eliminates blank lines before main section entries. -->
   <?rfc tocdepth="3"?>    <!-- Sets the number of levels of sections/subsections... in ToC --> 

    <!-- Choose the options for the references. 
         Some like symbolic tags in the references (and citations) and others prefer 
         numbers. The RFC Editor always uses symbolic tags.
         The tags used are the anchor attributes of the references. --> 
    <?rfc symrefs="no"?>
    <?rfc sortrefs="yes" ?> <!-- If "yes", causes the references to be sorted in order of tags.
                                 This doesn't have any effect unless symrefs is "yes" also. -->

    <!-- These two save paper: Just setting compact to "yes" makes savings by not starting each 
         main section on a new page but does not omit the blank lines between list items. 
         If subcompact is also "yes" the blank lines between list items are also omitted. -->
    <?rfc compact="yes" ?>
    <?rfc subcompact="no" ?>
    <!-- end of list of popular I-D processing instructions -->

    <!-- ***** FRONT MATTER ***** -->
<front>
    <!-- The abbreviated title is used in the page header - it is only necessary if the 
         full title is longer than 42 characters -->
    <title abbrev="TCP Specification">Transmission Control Protocol (TCP) Specification</title>

    <!-- add 'role="editor"' below for the editors if appropriate -->
    <author
        fullname="Wesley M. Eddy" 
        initials="W." 
        surname="Eddy"
        role="editor">

        <!-- abbrev not needed but can be used for the header
             if the full organization name is too long -->
        <organization abbrev="MTI Systems">MTI Systems</organization>
        <address>
            <postal>
                <!-- I've omitted my street address here -->
                <street/>
                <city/>
                <!--
                    The IETF seems to meet once a year in Minneapolis,
                    so that's practically my US address. If so, I would
                    add the following elements:
                <region>MN</region>
                <code>55403</code>
                However, if I lived in France, the <code> comes before the city.  xml2rfc
                preserves the order of <city>, <region>, <code> and <country> elements in 
                output so that they can reflect any possible the national scheme
                -->
                <!-- The country element is supposed to contain an ISO3166 two letter country
                     code. -->
                <country>US</country>
            </postal>
        <email>wes@mti-systems.com</email>
        <!--
            If I had a phone, fax machine, and a URI, I could add the following:
                <phone>+1-408-555-1234</phone>
                <facsimile>+1-555-911-9111</facsimile>
                <uri>http://www.example.com/</uri>
            -->
        </address>
    </author>
<!--
    <author
        fullname="Andre Oppermann"
        initials="A."
        surname="Oppermann">
        <organization>FreeBSD</organization>
        <address>
            <email>andre@freebsd.org</email>
        </address>
    </author>
-->

    <date year="2021"/> <!-- month="March" is no longer necessary
                                           note also, day="30" is optional -->
    <!-- WARNING: If the month and year are the current ones, xml2rfc will fill in the day for 
         you. If only the year is specified, xml2rfc will fill in the current day and month 
         irrespective of the day.  This silliness should be fixed in v1.31. -->
         
    <!-- Meta-data Declarations -->
    
    <!-- Notice the use of &amp; as an escape for & which would otherwise
         start an entity declaration, whereas we want a literal &. -->
    <area>Transport</area>

    <!-- WG name at the upperleft corner of the doc,
         IETF fine for individual submissions.  You can also
         omit this element in which case in defaults to "Network Working Group" -
         a hangover from the ancient history of the IETF! -->
    <workgroup>Internet Engineering Task Force</workgroup>
    
    <!-- The DTD allows multiple area and workgroup elements but only the first one has any
         effect on output.  -->
    <!-- You can add <keyword/> elements here.  They will be incorporated into HTML output
         files in a meta tag but they have no effect on text or nroff output. -->
    
    
    <abstract>
        <t>This document specifies the Transmission Control Protocol (TCP).  TCP is an important transport layer protocol in the Internet protocol stack, and has continuously evolved over decades of use and growth of the Internet.  Over this time, a number of changes have been made to TCP as it was specified in RFC 793, though these have only been documented in a piecemeal fashion.  This document collects and brings those changes together with the protocol specification from RFC 793.  This document obsoletes RFC 793, as well as RFCs 879, 2873, 6093, 6429, 6528, and 6691 that updated parts of RFC 793.  It updates RFC 1122, and should be considered as a replacement for the portions of that document dealing with TCP requirements.  It also updates RFC 5961 by adding a small clarification in reset handling while in the SYN-RECEIVED state.  The TCP header control bits from RFC 793 have also been updated based on RFC 3168.</t>

        <t>RFC EDITOR NOTE: If approved for publication as an RFC, this should be marked additionally as "STD: 7" and replace RFC 793 in that role.</t>
    </abstract>

</front>

<middle>
    <section title="Purpose and Scope">
        <t>
        In 1981, <xref target="RFC0793">RFC 793</xref> was released, documenting the Transmission Control Protocol (TCP), and replacing earlier specifications for TCP that had been published in the past.
        </t>
        <t>
        Since then, TCP has been widely implemented, and has been used as a transport protocol for numerous applications on the Internet.
        </t>
        <t>
        For several decades, RFC 793 plus a number of other documents have combined to serve as the core specification for TCP <xref target="RFC7414"></xref>.  Over time, a number of errata have been filed against RFC 793, as well as deficiencies in security, performance, and many other aspects.  The number of enhancements has grown over time across many separate documents.  These were never accumulated together into a comprehensive update to the base specification.
        </t>
        <t>
        The purpose of this document is to bring together all of the IETF Standards Track changes that have been made to the base TCP functional specification and unify them into an update of RFC 793.
	</t>
	<t>
	Some companion documents are referenced for important algorithms that are used by TCP (e.g. for congestion control), but have not been completely included in this document.  This is a conscious choice, as this base specification can be used with multiple additional algorithms that are developed and incorporated separately. This document focuses on the common basis all TCP implementations must support in order to interoperate.  Since some additional TCP features have become quite complicated themselves (e.g. advanced loss recovery and congestion control), future companion documents may attempt to similarly bring these together.
        </t>
        <t>
        In addition to the protocol specification that describes the TCP segment format, generation, and processing rules that are to be implemented in code, RFC 793 and other updates also contain informative and descriptive text for readers to understand aspects of the protocol design and operation.  This document does not attempt to alter or update this informative text, and is focused only on updating the normative protocol specification.  This document preserves references to the documentation containing the important explanations and rationale, where appropriate.
        </t>
        <t>
        This document is intended to be useful both in checking existing TCP implementations for conformance purposes, as well as in writing new implementations.
        </t>
    </section>
    <section title="Introduction">
        <t>RFC 793 contains a discussion of the TCP design goals and provides examples of its operation, including examples of connection establishment, connection termination, packet retransmission to repair losses.
        </t>
        <t>
        This document describes the basic functionality expected in modern TCP implementations, and replaces the protocol specification in RFC 793.  It does not replicate or attempt to update the introduction and philosophy content in Sections 1 and 2 of RFC 793.  Other documents are referenced to provide explanation of the theory of operation, rationale, and detailed discussion of design decisions.  This document only focuses on the normative behavior of the protocol.
        </t>
	<t>
	The &quot;TCP Roadmap&quot; <xref target="RFC7414"/> provides a more extensive guide to the RFCs that define TCP and describe various important algorithms. The TCP Roadmap contains sections on strongly encouraged enhancements that improve performance and other aspects of TCP beyond the basic operation specified in this document.  As one example, implementing congestion control (e.g. <xref target="RFC5681"/>) is a TCP requirement, but is a complex topic on its own, and not described in detail in this document, as there are many options and possibilities that do not impact basic interoperability.  Similarly, most TCP implementations today include the high-performance extensions in <xref target="RFC7323"/>, but these are not strictly required or discussed in this document.  Multipath considerations for TCP are also specified separately in <xref target="RFC8684"/>.
	</t>
        <t>
        A list of changes from RFC 793 is contained in <xref target="changes"/>.
        </t>

	<section title="Requirements Language">
<t>

The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, &quot;REQUIRED&quot;,
&quot;SHALL&quot;, &quot;SHALL NOT&quot;, &quot;SHOULD&quot;, &quot;SHOULD
NOT&quot;, &quot;RECOMMENDED&quot;, &quot;NOT RECOMMENDED&quot;,
&quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document are to be
interpreted as described in BCP 14 <xref target="RFC2119"/><xref
target="RFC8174"/> when, and only when, they appear in all capitals, as shown
here.

</t>
<t>

Each use of RFC 2119 keywords in the document is individually labeled and
referenced in <xref target="reqs"/> that summarizes implementation
requirements.

</t>
<t>

Sentences using &quot;MUST&quot; are labeled as &quot;MUST-X&quot; with X being
a numeric identifier enabling the requirement to be located easily when
referenced from <xref target="reqs"/>.

</t>
<t>

Similarly, sentences using &quot;SHOULD&quot; are labeled with
&quot;SHLD-X&quot;, &quot;MAY&quot; with &quot;MAY-X&quot;, and
&quot;RECOMMENDED&quot; with &quot;REC-X&quot;.

</t>
<t>

For the purposes of this labeling, &quot;SHOULD NOT&quot; and &quot;MUST
NOT&quot; are labeled the same as &quot;SHOULD&quot; and &quot;MUST&quot;
instances.

</t>

	</section>

	<section title="Key TCP Concepts">

<t>TCP provides a reliable, in-order, byte-stream service to applications.</t>

<t>The application byte-stream is conveyed over the network via TCP segments,
with each TCP segment sent as an Internet Protocol (IP) datagram.</t>

<t>TCP reliability consists of detecting packet losses (via sequence numbers)
and errors (via per-segment checksums), as well as correction
via retransmission.</t>

<t>TCP supports unicast delivery of data.  Anycast applications exist that
successfully use TCP without modifications, though there is some risk of
instability due to changes of lower-layer forwarding behavior <xref target="RFC7094"/>.</t>

<t>TCP is connection-oriented, though does not inherently include a liveness
detection capability.</t>

<t>Data flow is supported bidirectionally over TCP connections, though
applications are free to send data only unidirectionally, if they so
choose.</t>

<t>TCP uses port numbers to identify application services and to multiplex
distinct flows between hosts.</t>

<t>A more detailed description of TCP features compared to other transport
protocols can be found in Section 3.1 of <xref target="RFC8095"/>.  Further
description of the motivations for developing TCP and its role in the Internet
protocol stack can be found in Section 2 of <xref target="RFC0793"/> and earlier versions
of the TCP specification.</t>

	</section>
    </section>

    <section title="Functional Specification">

<section title="Header Format">

<t>
  TCP segments are sent as internet datagrams.  The Internet Protocol (IP)
  header carries several information fields, including the source and
  destination host addresses <xref target="RFC0791"/> <xref target="RFC8200"/>.  A TCP header follows the IP
  headers, supplying information specific to the TCP protocol.  This
  division allows for the existence of host level protocols other than
  TCP.  In early development of the Internet suite of protocols, the IP header fields had been a part of TCP.
</t>
<t>
  This document describes the TCP protocol.  The TCP protocol uses TCP Headers.
</t>
<t>A TCP Header is formatted as follows, using the style from <xref target="I-D.mcquistin-augmented-ascii-diagrams"/>:</t>
<figure anchor="header_format" title="TCP Header Format">
 <artwork>                              
    0                   1                   2                   3   
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |          Source Port          |       Destination Port        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                        Sequence Number                        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                    Acknowledgment Number                      |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |  Data |       |C|E|U|A|P|R|S|F|                               |
   | Offset| Rsrvd |W|C|R|C|S|S|Y|I|            Window             |
   |       |       |R|E|G|K|H|T|N|N|                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |           Checksum            |         Urgent Pointer        |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                           [Options]                           | 
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |                                                               :
   :                             Data                              :
   :                                                               |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+

          Note that one tick mark represents one bit position.
</artwork>
</figure>
<t>
where:
<list style="hanging" hangIndent="2">
  <t hangText="Source Port: 16 bits.">
    <vspace />
    <vspace />
    The source port number.
  </t>
  <t hangText="Destination Port: 16 bits.">
    <vspace />
    <vspace />
    The destination port number.
  </t>
  <t hangText="Sequence Number: 32 bits.">
    <vspace />
    <vspace />
    The sequence number of the first data octet in this segment (except
    when the SYN flag is set). If SYN is set the sequence number is the
    initial sequence number (ISN) and the first data octet is ISN+1.
  </t>
  <t hangText="Acknowledgment Number: 32 bits.">
    <vspace />
    <vspace />
    If the ACK control bit is set, this field contains the value of the
    next sequence number the sender of the segment is expecting to
    receive.  Once a connection is established, this is always sent.
  </t>
  <t hangText="Data Offset (DOffset): 4 bits.">
    <vspace />
    <vspace />
    The number of 32 bit words in the TCP Header.  This indicates where
    the data begins.  The TCP header (even one including options) is an
    integer multiple of 32 bits long.
  </t>
  <t hangText="Reserved (Rsrvd): 4 bits.">
    <vspace />
    <vspace />
    A set of control bits reserved for future use.  Must be zero in generated segments and must be ignored in received segments, if corresponding future features are unimplemented by the sending or receiving host.
  </t>
  <t>
   The control bits are also know as &quot;flags&quot;.  Assignment is managed by IANA from the &quot;TCP Header Flags&quot; registry <xref target="header-flags-registry"/>.  The currently assigned control bits are CWR, ECE, URG, ACK, PSH, RST, SYN, and FIN.
  </t>
  <t hangText="CWR: 1 bit.">
    <vspace />
    <vspace />
    Congestion Window Reduced (see <xref target="RFC3168"/>).
  </t>
  <t hangText="ECE: 1 bit.">
    <vspace />
    <vspace />
    ECN-Echo (see <xref target="RFC3168"/>).
  </t>
  <t hangText="URG: 1 bit.">
    <vspace />
    <vspace />
    Urgent Pointer field is significant.
  </t>
  <t hangText="ACK: 1 bit.">
    <vspace />
    <vspace />
    Acknowledgment field is significant.
  </t>
  <t hangText="PSH: 1 bit.">
    <vspace />
    <vspace />
    Push Function (see the Send Call description in <xref target="user-api"/>).
  </t>
  <t hangText="RST: 1 bit.">
    <vspace />
    <vspace />
    Reset the connection.
  </t>
  <t hangText="SYN: 1 bit.">
    <vspace />
    <vspace />
    Synchronize sequence numbers.
  </t>
  <t hangText="FIN: 1 bit.">
    <vspace />
    <vspace />
    No more data from sender.
  </t>
  <t hangText="Window: 16 bits."> 
    <vspace />
    <vspace />
    The number of data octets beginning with the one indicated in the
    acknowledgment field that the sender of this segment is willing to
    accept.  The value is shifted when the Window Scaling extension is used
    <xref target="RFC7323"/>.
    <vspace />
    <vspace />
    The window size MUST be treated as an unsigned number, or else
    large window sizes will appear like negative windows and TCP will
    not work (MUST-1).  It is RECOMMENDED that implementations will reserve
    32-bit fields for the send and receive window sizes in the connection
    record and do all window computations with 32 bits (REC-1).
  </t>
  <t hangText="Checksum: 16 bits.">
    <vspace />
    <vspace />
    The checksum field is the 16 bit one's complement of the one's
    complement sum of all 16 bit words in the header and text.  The checksum computation needs to ensure the 16-bit alignment of the data being summed.  If a
    segment contains an odd number of header and text octets, alignment can be achieved by
    padding the last octet with zeros on its right to
    form a 16 bit word for checksum purposes.  The pad is not
    transmitted as part of the segment.  While computing the checksum,
    the checksum field itself is replaced with zeros.
  </t>
  <t>
    The checksum also covers a pseudo header (<xref target="v4pseudo"/>) conceptually prefixed to the TCP
    header.  The pseudo header is 96 bits for IPv4 and 320 bits for IPv6.
    Including the pseudo header in the checksum gives the TCP connection
    protection against misrouted segments.  This information is carried in IP headers
    and is transferred across the TCP/Network interface in the arguments or
    results of calls by the TCP implementation on the IP layer.
   <figure anchor="v4pseudo" title="IPv4 Pseudo Header"><artwork>
                +--------+--------+--------+--------+
                |           Source Address          |
                +--------+--------+--------+--------+
                |         Destination Address       |
                +--------+--------+--------+--------+
                |  zero  |  PTCL  |    TCP Length   |
                +--------+--------+--------+--------+
   </artwork></figure>
   <list style="hanging" hangIndent="2">
   <t hangText="Pseudo header components for IPv4:">
     <vspace />
     <vspace />
    <list>
     <t>Source Address: the IPv4 source address in network byte order</t>
     <t>Destination Address: the IPv4 destination address in network byte order</t>
     <t>zero: bits set to zero</t>
     <t>PTCL: the protocol number from the IP header</t>
     <t>TCP Length:
       the TCP header length plus the data length in
       octets (this is not an explicitly transmitted quantity, but is
       computed), and it does not count the 12 octets of the pseudo
       header.</t>
    </list>
   </t>
   <t>
       For IPv6, the pseudo header is defined in Section 8.1 of RFC 8200 <xref target="RFC8200"/>, and contains the IPv6 Source Address and Destination Address, an Upper Layer Packet Length (a 32-bit value otherwise equivalent to TCP Length in the IPv4 pseudo header), three bytes of zero-padding, and a Next Header value (differing from the IPv6 header value in the case of extension headers present in between IPv6 and TCP).
   </t>
   <t>
       The TCP checksum is never optional.  The sender MUST generate it (MUST-2)
       and the receiver MUST check it (MUST-3).
   </t>
  </list>
  </t>

  <t hangText="Urgent Pointer: 16 bits.">
    <vspace />
    <vspace />
    This field communicates the current value of the urgent pointer as a
    positive offset from the sequence number in this segment.  The
    urgent pointer points to the sequence number of the octet following the urgent data.  This field is only be interpreted in segments with
    the URG control bit set.  

  </t>
  <t hangText="Options: [TCP Option]; Options#Size == (DOffset-5)*32; present only when DOffset > 5.">
    <vspace />
    <vspace />
    Options may occupy space at the end of the TCP header and are a
    multiple of 8 bits in length.  All options are included in the
    checksum.  An option may begin on any octet boundary.  There are two
    cases for the format of an option:
    <list>
      <t>Case 1:  A single octet of option-kind.</t>

      <t>Case 2:  An octet of option-kind (Kind), an octet of option-length, and
               the actual option-data octets.</t>
    </list>
  </t>
  <t>
    The option-length counts the two octets of option-kind and
    option-length as well as the option-data octets.
  </t>
  <t>
    Note that the list of options may be shorter than the data offset
    field might imply.  The content of the header beyond the
    End-of-Option option must be header padding (i.e., zero).
  </t>
  <t>
    The list of all currently defined options is managed by IANA <xref target="TCP-parameters-registry"/>, and each option is defined in other RFCs, as indicated there.  That set includes experimental options that can be extended to support multiple concurrent usages <xref target="RFC6994"/>.</t>
  <t>
   A given TCP implementation can support any currently defined options, but the following options MUST be supported (MUST-4 - note Maximum Segment Size option support is also part of MUST-19 in <xref target="pmtud"/>):</t>
  <t>
    <figure><artwork>
      Kind     Length    Meaning
      ----     ------    -------
       0         -       End of option list.
       1         -       No-Operation.
       2         4       Maximum Segment Size.
    </artwork></figure></t>
  <t>
    These options are specified in detail in <xref target="Option-Definitions" />.<vspace/><vspace/>
    A TCP implementation MUST be able to receive a TCP option in any segment (MUST-5).<vspace /><vspace />
    A TCP implementation MUST (MUST-6) ignore without error any TCP option it does not
    implement, assuming that the option has a length field. All
    TCP options except End of option list and No-Operation MUST have length fields, including all future options (MUST-68).
    TCP implementations MUST be prepared to handle an illegal option length
    (e.g., zero); a suggested procedure is to
    reset the connection and log the error cause (MUST-7).
  </t>

  <t>Note: There is ongoing work to extend the space available for TCP options, such as <xref target="I-D.ietf-tcpm-tcp-edo"/>.</t>

   <t hangText="Data: variable length.">
    <vspace />
    <vspace />
    User data carried by the TCP segment.
   </t>
</list>
</t>
</section>
<section title="Specific Option Definitions" anchor="Option-Definitions">
  <t>
        A TCP Option is one of: an End of Option List Option, a No-Operation Option, or a Maximum Segment Size Option.
  </t>
  <t>An End of Option List Option is formatted as follows:</t>
  <figure><artwork>
    0
    0 1 2 3 4 5 6 7
   +-+-+-+-+-+-+-+-+
   |       0       |
   +-+-+-+-+-+-+-+-+
  </artwork></figure>
  <t>
where:
  <list style="hanging" hangIndent="2">
    <t hangText="Kind: 1 byte; Kind == 0.">
       <vspace />
       <vspace />
       This option code indicates the end of the option list.  This
       might not coincide with the end of the TCP header according to
       the Data Offset field.  This is used at the end of all options,
       not the end of each option, and need only be used if the end of
       the options would not otherwise coincide with the end of the TCP
       header.
     </t>
  </list>
  </t>

  <t>A No-Operation Option is formatted as follows:</t>
    <figure><artwork>
    0
    0 1 2 3 4 5 6 7
   +-+-+-+-+-+-+-+-+
   |       1       |
   +-+-+-+-+-+-+-+-+
   </artwork></figure>
  <t>where:
    <list style="hanging" hangIndent="2">
      <t hangText="Kind: 1 byte; Kind == 1.">
        <vspace />
        <vspace />
        This option code can be used between options, for example, to
        align the beginning of a subsequent option on a word boundary.
        There is no guarantee that senders will use this option, so
        receivers MUST be prepared to process options even if they do
        not begin on a word boundary (MUST-64).
      </t>
    </list>
  </t>

  <t>A Maximum Segment Size Option is formatted as follows:</t>
  <figure><artwork>
    0                   1                   2                   3
    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
   |       2       |     Length    |   Maximum Segment Size (MSS)  |
   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+
  </artwork></figure>
  <t>where:
    <list style="hanging" hangIndent="2">
      <t hangText="Kind: 1 byte; Kind == 2.">
        <vspace />
        <vspace />
        If this option is present, then it communicates the maximum
        receive segment size at the TCP endpoint that sends this segment.
        This value is limited by the IP reassembly limit.  This field may be sent in the initial connection request
        (i.e., in segments with the SYN control bit set) and MUST NOT
        be sent in other segments (MUST-65).  If this
        option is not used, any segment size is allowed.
        A more complete description of this option is provided in <xref target="mss"/>.
      </t>
      <t hangText="Length: 1 byte; Length == 4.">
        <vspace />
        <vspace />
        Length of the option in bytes.
      </t>
      <t hangText="Maximum Segment Size (MSS): 2 bytes.">
        <vspace />
        <vspace />
        The maximum receive segment size at the TCP endpoint that sends this segment.
      </t>
    </list>
  </t>

  <section title="Other Common Options">
  <t>
Additional RFCs define some other commonly used options that are recommended to implement for high performance, but not necessary for basic TCP interoperability.  These are the TCP Selective Acknowledgement (SACK) option <xref target="RFC2018"/><xref target="RFC2883"/>, TCP Timestamp (TS) option <xref target="RFC7323"/>, and TCP Window Scaling (WS) option <xref target="RFC7323"/>.
  </t>
  </section>

  <section title="Experimental TCP Options">
  <t>
Experimental TCP option values are defined in <xref target="RFC4727"/>, and <xref target="RFC6994"/> describes the current recommended usage for these experimental values.
  </t>
  </section>
</section>
<section title="TCP Terminology Overview">
<t>
This section includes an overview of key terms needed to understand the detailed protocol operation in the rest of the document.  There is a traditional glossary of terms in <xref target="glossary"/>.
</t>
<section title="Key Connection State Variables">
<t>
  Before we can discuss very much about the operation of the TCP implementation we need
  to introduce some detailed terminology.  The maintenance of a TCP
  connection requires the remembering of several variables.  We conceive
  of these variables being stored in a connection record called a
  Transmission Control Block or TCB.  Among the variables stored in the
  TCB are the local and remote IP addresses and port numbers, the IP security level and compartment 
  of the connection (see <xref target="seccomp"/>), pointers to the user's send and receive
  buffers, pointers to the retransmit queue and to the current segment.
  In addition several variables relating to the send and receive
  sequence numbers are stored in the TCB.
</t>
<t><figure><artwork>
    Send Sequence Variables:

      SND.UNA - send unacknowledged
      SND.NXT - send next
      SND.WND - send window
      SND.UP  - send urgent pointer
      SND.WL1 - segment sequence number used for last window update
      SND.WL2 - segment acknowledgment number used for last window
                update
      ISS     - initial send sequence number

    Receive Sequence Variables:

      RCV.NXT - receive next
      RCV.WND - receive window
      RCV.UP  - receive urgent pointer
      IRS     - initial receive sequence number
</artwork></figure></t>
<t>
  The following diagrams may help to relate some of these variables to
  the sequence space.
</t>
<figure anchor="send_seq_space" title="Send Sequence Space">
<artwork>
                   1         2          3          4      
              ----------|----------|----------|---------- 
                     SND.UNA    SND.NXT    SND.UNA        
                                          +SND.WND        

        1 - old sequence numbers that have been acknowledged  
        2 - sequence numbers of unacknowledged data            
        3 - sequence numbers allowed for new data transmission 
        4 - future sequence numbers that are not yet allowed  
 </artwork>   
</figure>
<t>
  The send window is the portion of the sequence space labeled 3 in
  <xref target="send_seq_space" />.
</t>
<figure anchor="recv_seq_space" title="Receive Sequence Space">
<artwork>

                       1          2          3      
                   ----------|----------|---------- 
                          RCV.NXT    RCV.NXT        
                                    +RCV.WND        

        1 - old sequence numbers that have been acknowledged  
        2 - sequence numbers allowed for new reception         
        3 - future sequence numbers that are not yet allowed  
</artwork>
</figure> 
<t>
  The receive window is the portion of the sequence space labeled 2 in
  <xref target="recv_seq_space" />.
</t>
<t>
  There are also some variables used frequently in the discussion that
  take their values from the fields of the current segment.
</t>
<t>Current Segment Variables:
    <figure><artwork>
    SEG.SEQ - segment sequence number
    SEG.ACK - segment acknowledgment number
    SEG.LEN - segment length
    SEG.WND - segment window
    SEG.UP  - segment urgent pointer
    </artwork></figure>
</t>
</section>

<section title="State Machine Overview">
<t>
  A connection progresses through a series of states during its
  lifetime.  The states are:  LISTEN, SYN-SENT, SYN-RECEIVED,
  ESTABLISHED, FIN-WAIT-1, FIN-WAIT-2, CLOSE-WAIT, CLOSING, LAST-ACK,
  TIME-WAIT, and the fictional state CLOSED.  CLOSED is fictional
  because it represents the state when there is no TCB, and therefore,
  no connection.  Briefly the meanings of the states are:
</t>
<t><list>
    <t>LISTEN - represents waiting for a connection request from any remote
    TCP peer and port.</t>

    <t>SYN-SENT - represents waiting for a matching connection request
    after having sent a connection request.</t>

    <t>SYN-RECEIVED - represents waiting for a confirming connection
    request acknowledgment after having both received and sent a
    connection request.</t>

    <t>ESTABLISHED - represents an open connection, data received can be
    delivered to the user.  The normal state for the data transfer phase
    of the connection.</t>

    <t>FIN-WAIT-1 - represents waiting for a connection termination request
    from the remote TCP peer, or an acknowledgment of the connection
    termination request previously sent.</t>

    <t>FIN-WAIT-2 - represents waiting for a connection termination request
    from the remote TCP peer.</t>

    <t>CLOSE-WAIT - represents waiting for a connection termination request
    from the local user.</t>

    <t>CLOSING - represents waiting for a connection termination request
    acknowledgment from the remote TCP peer.</t>

    <t>LAST-ACK - represents waiting for an acknowledgment of the
    connection termination request previously sent to the remote TCP peer
    (this termination request sent to the remote TCP peer already included an acknowledgment of the termination request sent from the remote TCP peer).</t>

    <t>TIME-WAIT - represents waiting for enough time to pass to be sure
    the remote TCP peer received the acknowledgment of its connection
    termination request, and to avoid new connections being impacted by delayed
    segments from previous connections.</t>

    <t>CLOSED - represents no connection state at all.</t>
</list></t>
<t>
  A TCP connection progresses from one state to another in response to
  events.  The events are the user calls, OPEN, SEND, RECEIVE, CLOSE,
  ABORT, and STATUS; the incoming segments, particularly those
  containing the SYN, ACK, RST and FIN flags; and timeouts.
</t>
<t>
  The state diagram in <xref target="conn_states" /> illustrates only state changes, together
  with the causing events and resulting actions, but addresses neither
  error conditions nor actions that are not connected with state
  changes.  In a later section, more detail is offered with respect to
  the reaction of the TCP implementation to events.  Some state names are abbreviated or hyphenated differently in the diagram from how they appear elsewhere in the document. 
</t>
<t>
  NOTA BENE:  This diagram is only a summary and must not be taken as
  the total specification.  Many details are not included.
</t>
<figure anchor="conn_states" title="TCP Connection State Diagram">
<artwork>
                            +---------+ ---------\      active OPEN  
                            |  CLOSED |            \    -----------  
                            +---------+&lt;---------\   \   create TCB  
                              |     ^              \   \  snd SYN    
                 passive OPEN |     |   CLOSE        \   \           
                 ------------ |     | ----------       \   \         
                  create TCB  |     | delete TCB         \   \       
                              V     |                      \   \     
          rcv RST (note 1)  +---------+            CLOSE    |    \   
       -------------------->|  LISTEN |          ---------- |     |  
      /                     +---------+          delete TCB |     |  
     /           rcv SYN      |     |     SEND              |     |  
    /           -----------   |     |    -------            |     V  
+--------+      snd SYN,ACK  /       \   snd SYN          +--------+
|        |&lt;-----------------           ------------------>|        |
|  SYN   |                    rcv SYN                     |  SYN   |
|  RCVD  |&lt;-----------------------------------------------|  SENT  |
|        |                  snd SYN,ACK                   |        |
|        |------------------           -------------------|        |
+--------+   rcv ACK of SYN  \       /  rcv SYN,ACK       +--------+
   |         --------------   |     |   -----------                  
   |                x         |     |     snd ACK                    
   |                          V     V                                
   |  CLOSE                 +---------+                              
   | -------                |  ESTAB  |                              
   | snd FIN                +---------+                              
   |                 CLOSE    |     |    rcv FIN                     
   V                -------   |     |    -------                     
+---------+         snd FIN  /       \   snd ACK         +---------+
|  FIN    |&lt;----------------          ------------------>|  CLOSE  |
| WAIT-1  |------------------                            |   WAIT  |
+---------+          rcv FIN  \                          +---------+
  | rcv ACK of FIN   -------   |                          CLOSE  |  
  | --------------   snd ACK   |                         ------- |  
  V        x                   V                         snd FIN V  
+---------+               +---------+                    +---------+
|FINWAIT-2|               | CLOSING |                    | LAST-ACK|
+---------+               +---------+                    +---------+
  |              rcv ACK of FIN |                 rcv ACK of FIN |  
  |  rcv FIN     -------------- |    Timeout=2MSL -------------- |  
  |  -------            x       V    ------------        x       V  
   \ snd ACK              +---------+delete TCB          +---------+
     -------------------->|TIME-WAIT|------------------->| CLOSED  |
                          +---------+                    +---------+
</artwork>
</figure>
<t>The following notes apply to <xref target="conn_states"/>:
<list>
<t>
Note 1: The transition from SYN-RECEIVED to LISTEN on receiving a RST is
conditional on having reached SYN-RECEIVED after a passive open.
</t>
<t>
Note 2: An unshown transition exists from FIN-WAIT-1 to TIME-WAIT if
a FIN is received and the local FIN is also acknowledged.
</t>
<t>
Note 3: A RST can be sent from any state with a corresponding transition to TIME-WAIT (see <xref target="FTY99"/> for rationale).  These transitions are not not explicitly shown, otherwise the diagram would become very difficult to read.  Similarly, receipt of a RST from any state results in a transition to LISTEN or CLOSED, though this is also omitted from the diagram for legibility.
</t>
</list></t>
</section>
</section>
<section title="Sequence Numbers">
<t>
  A fundamental notion in the design is that every octet of data sent
  over a TCP connection has a sequence number.  Since every octet is
  sequenced, each of them can be acknowledged.  The acknowledgment
  mechanism employed is cumulative so that an acknowledgment of sequence
  number X indicates that all octets up to but not including X have been
  received.  This mechanism allows for straight-forward duplicate
  detection in the presence of retransmission.  Numbering of octets
  within a segment is that the first data octet immediately following
  the header is the lowest numbered, and the following octets are
  numbered consecutively.
</t>
<t>
  It is essential to remember that the actual sequence number space is
  finite, though very large.  This space ranges from 0 to 2**32 - 1.
  Since the space is finite, all arithmetic dealing with sequence
  numbers must be performed modulo 2**32.  This unsigned arithmetic
  preserves the relationship of sequence numbers as they cycle from
  2**32 - 1 to 0 again.  There are some subtleties to computer modulo
  arithmetic, so great care should be taken in programming the
  comparison of such values.  The symbol "=&lt;" means "less than or equal"
  (modulo 2**32).
</t>
<t>
  The typical kinds of sequence number comparisons that the TCP implementation must
  perform include:
</t>
<t><list>
    <t>(a)  Determining that an acknowledgment refers to some sequence
         number sent but not yet acknowledged.</t>

    <t>(b)  Determining that all sequence numbers occupied by a segment
         have been acknowledged (e.g., to remove the segment from a
         retransmission queue).</t>

    <t>(c)  Determining that an incoming segment contains sequence numbers
         that are expected (i.e., that the segment "overlaps" the
         receive window).</t>
</list></t>
<t>
  In response to sending data the TCP endpoint will receive acknowledgments.  The
  following comparisons are needed to process the acknowledgments.
</t>
<t><list>
    <t>SND.UNA = oldest unacknowledged sequence number</t>

    <t>SND.NXT = next sequence number to be sent</t>

    <t>SEG.ACK = acknowledgment from the receiving TCP peer (next sequence
              number expected by the receiving TCP peer)</t>

    <t>SEG.SEQ = first sequence number of a segment</t>

    <t>SEG.LEN = the number of octets occupied by the data in the segment
              (counting SYN and FIN)</t>

    <t>SEG.SEQ+SEG.LEN-1 = last sequence number of a segment</t>
</list></t>
<t>
  A new acknowledgment (called an "acceptable ack"), is one for which
  the inequality below holds:
</t>
<t><list>
    <t>SND.UNA &lt; SEG.ACK =&lt; SND.NXT</t>
</list></t>
<t>
  A segment on the retransmission queue is fully acknowledged if the sum
  of its sequence number and length is less or equal than the
  acknowledgment value in the incoming segment.
</t>
<t>
  When data is received the following comparisons are needed:
</t>
<t><list>
    <t>RCV.NXT = next sequence number expected on an incoming segments, and
        is the left or lower edge of the receive window</t>

    <t>RCV.NXT+RCV.WND-1 = last sequence number expected on an incoming
        segment, and is the right or upper edge of the receive window</t>

    <t>SEG.SEQ = first sequence number occupied by the incoming segment</t>

    <t>SEG.SEQ+SEG.LEN-1 = last sequence number occupied by the incoming
        segment</t>
</list></t>
<t>
  A segment is judged to occupy a portion of valid receive sequence
  space if
</t>
<t><list>
    <t>RCV.NXT =&lt; SEG.SEQ &lt; RCV.NXT+RCV.WND</t>
</list></t>
<t>
  or
</t>
<t><list>
    <t>RCV.NXT =&lt; SEG.SEQ+SEG.LEN-1 &lt; RCV.NXT+RCV.WND</t>
</list></t>
<t>
  The first part of this test checks to see if the beginning of the
  segment falls in the window, the second part of the test checks to see
  if the end of the segment falls in the window; if the segment passes
  either part of the test it contains data in the window.
</t>
<t>
  Actually, it is a little more complicated than this.  Due to zero
  windows and zero length segments, we have four cases for the
  acceptability of an incoming segment:
</t>
<t><figure><artwork>
    Segment Receive  Test
    Length  Window
    ------- -------  -------------------------------------------

       0       0     SEG.SEQ = RCV.NXT

       0      >0     RCV.NXT =&lt; SEG.SEQ &lt; RCV.NXT+RCV.WND

      >0       0     not acceptable

      >0      >0     RCV.NXT =&lt; SEG.SEQ &lt; RCV.NXT+RCV.WND
                  or RCV.NXT =&lt; SEG.SEQ+SEG.LEN-1 &lt; RCV.NXT+RCV.WND
</artwork></figure></t>
<t>
  Note that when the receive window is zero no segments should be
  acceptable except ACK segments.  Thus, it is possible for a TCP implementation to
  maintain a zero receive window while transmitting data and receiving
  ACKs. A TCP receiver MUST 
  process the RST and URG fields of all incoming segments, even when the receive window is zero (MUST-66).
</t>
<t>
  We have taken advantage of the numbering scheme to protect certain
  control information as well.  This is achieved by implicitly including
  some control flags in the sequence space so they can be retransmitted
  and acknowledged without confusion (i.e., one and only one copy of the
  control will be acted upon).  Control information is not physically
  carried in the segment data space.  Consequently, we must adopt rules
  for implicitly assigning sequence numbers to control.  The SYN and FIN
  are the only controls requiring this protection, and these controls
  are used only at connection opening and closing.  For sequence number
  purposes, the SYN is considered to occur before the first actual data
  octet of the segment in which it occurs, while the FIN is considered
  to occur after the last actual data octet in a segment in which it
  occurs.  The segment length (SEG.LEN) includes both data and sequence
  space occupying controls.  When a SYN is present then SEG.SEQ is the
  sequence number of the SYN.
</t>
<t>
  Initial Sequence Number Selection
</t>
<t>
  A connection is defined by a pair of
  sockets.  Connections can be reused.  New instances of a connection will be referred to as
  incarnations of the connection.  The problem that arises from this is
  -- &quot;how does the TCP implementation identify duplicate segments from previous
  incarnations of the connection?&quot;  This problem becomes apparent if the
  connection is being opened and closed in quick succession, or if the
  connection breaks with loss of memory and is then reestablished.
  To support this, the TIME-WAIT state limits the rate of connection reuse,
  while the initial sequence number selection described below further protects
  against ambiguity about what incarnation of a connection an incoming packet
  corresponds to.

</t>
<t>
  To avoid confusion we must prevent segments from one incarnation of a
  connection from being used while the same sequence numbers may still
  be present in the network from an earlier incarnation.  We want to
  assure this, even if a TCP endpoint loses all knowledge of the
  sequence numbers it has been using.  When new connections are created,
  an initial sequence number (ISN) generator is employed that selects a
  new 32 bit ISN.  There are security issues that result if an off-path
  attacker is able to predict or guess ISN values.
</t>
<t>

TCP Initial Sequence Numbers are generated from a number sequence that
monotonically increases until it wraps, known loosely as a &quot;clock&quot;.
This clock is a 32-bit counter that typically increments at least once every
roughly 4 microseconds, although it is neither assumed to be realtime nor
precise, and need not persist across reboots.  The clock component is intended
to insure that with a Maximum Segment Lifetime (MSL), generated ISNs will be
unique, since it cycles approximately every 4.55 hours, which is much longer
than the MSL.

</t>
<t>
  A TCP implementation MUST use the above type of &quot;clock&quot; for clock-driven selection of initial sequence numbers (MUST-8), and
  SHOULD generate its Initial Sequence Numbers with the expression:
</t>
<t>
      ISN = M + F(localip, localport, remoteip, remoteport, secretkey)
</t>
<t>
   where M is the 4 microsecond timer, and F() is a pseudorandom
   function (PRF) of the connection's identifying parameters ("localip, localport, remoteip, remoteport") and a secret key ("secretkey") (SHLD-1).  F() MUST NOT be computable from the outside (MUST-9), or an attacker could still guess at sequence numbers from the ISN used for some other connection.  The PRF could be implemented as a cryptographic hash of the concatenation of the TCP connection parameters and some secret data.  For discussion of the selection of a specific hash algorithm and management of the secret key data, please see Section 3 of <xref target="RFC6528"/>.
</t>

<t>
  For each connection there is a send sequence number and a receive
  sequence number.  The initial send sequence number (ISS) is chosen by
  the data sending TCP peer, and the initial receive sequence number (IRS) is
  learned during the connection establishing procedure.
</t>
<t>
  For a connection to be established or initialized, the two TCP peers must
  synchronize on each other's initial sequence numbers.  This is done in
  an exchange of connection establishing segments carrying a control bit
  called "SYN" (for synchronize) and the initial sequence numbers.  As a
  shorthand, segments carrying the SYN bit are also called "SYNs".
  Hence, the solution requires a suitable mechanism for picking an
  initial sequence number and a slightly involved handshake to exchange
  the ISNs.
</t>
<t>
  The synchronization requires each side to send its own initial
  sequence number and to receive a confirmation of it in acknowledgment
  from the remote TCP peer.  Each side must also receive the remote peer's
  initial sequence number and send a confirming acknowledgment.
</t>
<t><figure><artwork>
    1) A --&gt; B  SYN my sequence number is X
    2) A &lt;-- B  ACK your sequence number is X
    3) A &lt;-- B  SYN my sequence number is Y
    4) A --&gt; B  ACK your sequence number is Y
</artwork></figure></t>
<t>
  Because steps 2 and 3 can be combined in a single message this is
  called the three-way (or three message) handshake (3WHS).
</t>
<t>
  A 3WHS is necessary because sequence numbers are not
  tied to a global clock in the network, and TCP implementations may have different
  mechanisms for picking the ISNs.  The receiver of the first SYN has
  no way of knowing whether the segment was an old delayed one or not,
  unless it remembers the last sequence number used on the connection
  (which is not always possible), and so it must ask the sender to
  verify this SYN.  The three way handshake and the advantages of a
  clock-driven scheme are discussed in <xref target="DS78"/>.
</t>
<t>
  Knowing When to Keep Quiet
</t>
<t>
  A theoretical problem exists where data could be corrupted due to confusion
  between old segments in the network and new ones after a host reboots, if the
  same port numbers and sequence space are reused.  The &quot;Quiet Time&quot;
  concept discussed below addresses this and the discussion of it is included
  for situations where it might be relevant, although it is not felt to be
  necessary in most current implementations.  The problem was more relevant
  earlier in the history of TCP.  In practical use on the Internet today, the
  error-prone conditions are sufficiently unlikely that it is felt safe to
  ignore.  Reasons why it is now negligible include: (a) ISS and ephemeral port
  randomization have reduced likelihood of reuse of port numbers and sequence numbers
  after reboots, (b) the effective MSL of the Internet has declined as links
  have become faster, and (c) reboots often taking longer than an MSL anyways.
  </t>
<t>
  To be sure that a TCP implementation does not create a segment carrying a
  sequence number that may be duplicated by an old segment remaining in the
  network, the TCP endpoint must keep quiet for an MSL before assigning any
  sequence numbers upon starting up or recovering from a situation where memory
  of sequence numbers in use was lost.  For this specification the MSL is taken
  to be 2 minutes.  This is an engineering choice, and may be changed if
  experience indicates it is desirable to do so.  Note that if a TCP endpoint
  is reinitialized in some sense, yet retains its memory of sequence numbers in
  use, then it need not wait at all; it must only be sure to use sequence
  numbers larger than those recently used.
</t>
<t>
  The TCP Quiet Time Concept
</t>
<t>
    Hosts that for any reason lose
    knowledge of the last sequence numbers transmitted on
    each active (i.e., not closed) connection shall delay emitting any
    TCP segments for at least the agreed MSL
    in the internet system that the host is a part of.  In the
    paragraphs below, an explanation for this specification is given.
    TCP implementors may violate the "quiet time" restriction, but only
    at the risk of causing some old data to be accepted as new or new
    data rejected as old duplicated by some receivers in the internet
    system.
</t>
<t>
    TCP endpoints consume sequence number space each time a segment is formed and
    entered into the network output queue at a source host. The
    duplicate detection and sequencing algorithm in the TCP protocol
    relies on the unique binding of segment data to sequence space to
    the extent that sequence numbers will not cycle through all 2**32
    values before the segment data bound to those sequence numbers has
    been delivered and acknowledged by the receiver and all duplicate
    copies of the segments have "drained" from the internet.  Without
    such an assumption, two distinct TCP segments could conceivably be
    assigned the same or overlapping sequence numbers, causing confusion
    at the receiver as to which data is new and which is old.  Remember
    that each segment is bound to as many consecutive sequence numbers
    as there are octets of data and SYN or FIN flags in the segment.
</t>
<t>
    Under normal conditions, TCP implementations keep track of the next sequence number
    to emit and the oldest awaiting acknowledgment so as to avoid
    mistakenly using a sequence number over before its first use has
    been acknowledged.  This alone does not guarantee that old duplicate
    data is drained from the net, so the sequence space has been made
    very large to reduce the probability that a wandering duplicate will
    cause trouble upon arrival.  At 2 megabits/sec. it takes 4.5 hours
    to use up 2**32 octets of sequence space.  Since the maximum segment
    lifetime in the net is not likely to exceed a few tens of seconds,
    this is deemed ample protection for foreseeable nets, even if data
    rates escalate to 10's of megabits/sec.  At 100 megabits/sec, the
    cycle time is 5.4 minutes, which may be a little short, but still
    within reason.
</t>
<t>
    The basic duplicate detection and sequencing algorithm in TCP can be
    defeated, however, if a source TCP endpoint does not have any memory of the
    sequence numbers it last used on a given connection. For example, if
    the TCP implementation were to start all connections with sequence number 0, then
    upon the host rebooting, a TCP peer might re-form an earlier
    connection (possibly after half-open connection resolution) and emit
    packets with sequence numbers identical to or overlapping with
    packets still in the network, which were emitted on an earlier
    incarnation of the same connection.  In the absence of knowledge
    about the sequence numbers used on a particular connection, the TCP
    specification recommends that the source delay for MSL seconds
    before emitting segments on the connection, to allow time for
    segments from the earlier connection incarnation to drain from the
    system.
</t>
<t>
    Even hosts that can remember the time of day and used it to select
    initial sequence number values are not immune from this problem
    (i.e., even if time of day is used to select an initial sequence
    number for each new connection incarnation).
</t>
<t>
    Suppose, for example, that a connection is opened starting with
    sequence number S.  Suppose that this connection is not used much
    and that eventually the initial sequence number function (ISN(t))
    takes on a value equal to the sequence number, say S1, of the last
    segment sent by this TCP endpoint on a particular connection.  Now suppose,
    at this instant, the host reboots and establishes a new
    incarnation of the connection. The initial sequence number chosen is
    S1 = ISN(t) -- last used sequence number on old incarnation of
    connection!  If the recovery occurs quickly enough, any old
    duplicates in the net bearing sequence numbers in the neighborhood
    of S1 may arrive and be treated as new packets by the receiver of
    the new incarnation of the connection.
</t>
<t>
    The problem is that the recovering host may not know for how long it
    was down between rebooting nor does it know whether there are still old duplicates in
    the system from earlier connection incarnations.
</t>
<t>
    One way to deal with this problem is to deliberately delay emitting
    segments for one MSL after recovery from a reboot - this is the &quot;quiet
    time&quot; specification.  Hosts that prefer to avoid waiting are
    willing to risk possible confusion of old and new packets at a given
    destination may choose not to wait for the &quot;quiet time&quot;.
    Implementors may provide TCP users with the ability to select on a
    connection by connection basis whether to wait after a reboot, or may
    informally implement the &quot;quiet time&quot; for all connections.
    Obviously, even where a user selects to &quot;wait,&quot; this is not
    necessary after the host has been &quot;up&quot; for at least MSL seconds.
</t>
<t>
    To summarize: every segment emitted occupies one or more sequence
    numbers in the sequence space, the numbers occupied by a segment are
    &quot;busy&quot; or &quot;in use&quot; until MSL seconds have passed, upon rebooting a
    block of space-time is occupied by the octets and SYN or FIN flags of the last emitted
    segment, if a new connection is started too soon and uses any of the
    sequence numbers in the space-time footprint of the last segment of
    the previous connection incarnation, there is a potential sequence
    number overlap area that could cause confusion at the receiver.
</t>
</section>
<section title="Establishing a connection">
<t>
  The &quot;three-way handshake&quot; is the procedure used to establish a
  connection.  This procedure normally is initiated by one TCP peer and
  responded to by another TCP peer.  The procedure also works if two TCP peers
  simultaneously initiate the procedure.  When simultaneous open
  occurs, each TCP peer receives a "SYN" segment that carries no
  acknowledgment after it has sent a &quot;SYN&quot;.  Of course, the arrival of
  an old duplicate &quot;SYN&quot; segment can potentially make it appear, to the
  recipient, that a simultaneous connection initiation is in progress.
  Proper use of &quot;reset&quot; segments can disambiguate these cases.
</t>
<t>
  Several examples of connection initiation follow.  Although these
  examples do not show connection synchronization using data-carrying
  segments, this is perfectly legitimate, so long as the receiving TCP endpoint
  doesn't deliver the data to the user until it is clear the data is
  valid (e.g., the data is buffered at the receiver until the
  connection reaches the ESTABLISHED state, given that the three-way handshake
  reduces the possibility of false connections).  It is the
  implementation of a trade-off between memory and messages to provide
  information for this checking.
</t>
<t>
  The simplest 3WHS is shown in <xref target="handshake" />.  The
  figures should be interpreted in the following way.  Each line is
  numbered for reference purposes.  Right arrows (--&gt;) indicate
  departure of a TCP segment from TCP peer A to TCP peer B, or arrival of a
  segment at B from A.  Left arrows (&lt;--), indicate the reverse.
  Ellipsis (...) indicates a segment that is still in the network
  (delayed).
  Comments appear in parentheses.  TCP connection states represent the state AFTER
  the departure or arrival of the segment (whose contents are shown in
  the center of each line).  Segment contents are shown in abbreviated
  form, with sequence number, control flags, and ACK field.  Other
  fields such as window, addresses, lengths, and text have been left out
  in the interest of clarity.
</t>
<figure anchor="handshake" title="Basic 3-Way Handshake for Connection Synchronization">
<artwork>
    TCP Peer A                                           TCP Peer B

1.  CLOSED                                               LISTEN

2.  SYN-SENT    --&gt; &lt;SEQ=100>&lt;CTL=SYN&gt;               --&gt; SYN-RECEIVED

3.  ESTABLISHED &lt;-- &lt;SEQ=300&gt;&lt;ACK=101&gt;&lt;CTL=SYN,ACK&gt;  &lt;-- SYN-RECEIVED

4.  ESTABLISHED --&gt; &lt;SEQ=101&gt;&lt;ACK=301&gt;&lt;CTL=ACK&gt;       --&gt; ESTABLISHED

5.  ESTABLISHED --&gt; &lt;SEQ=101&gt;&lt;ACK=301&gt;&lt;CTL=ACK&gt;&lt;DATA&gt; --&gt; ESTABLISHED
</artwork>
</figure>
<t>
  In line 2 of <xref target="handshake" />, TCP Peer A begins by sending a SYN segment
  indicating that it will use sequence numbers starting with sequence
  number 100.  In line 3, TCP Peer B sends a SYN and acknowledges the SYN it
  received from TCP Peer A.  Note that the acknowledgment field indicates TCP Peer
  B is now expecting to hear sequence 101, acknowledging the SYN that
  occupied sequence 100.
</t>
<t>
  At line 4, TCP Peer A responds with an empty segment containing an ACK for
  TCP Peer B's SYN; and in line 5, TCP Peer A sends some data.  Note that the
  sequence number of the segment in line 5 is the same as in line 4
  because the ACK does not occupy sequence number space (if it did, we
  would wind up ACKing ACKs!).
</t>
<t>
  Simultaneous initiation is only slightly more complex, as is shown in
  <xref target="simul_connect" />.  Each TCP peer's connection state cycles from CLOSED to SYN-SENT to SYN-RECEIVED to ESTABLISHED.
</t>
<figure anchor="simul_connect" title="Simultaneous Connection Synchronization">
<artwork>
    TCP Peer A                                       TCP Peer B

1.  CLOSED                                           CLOSED

2.  SYN-SENT     --&gt; &lt;SEQ=100&gt;&lt;CTL=SYN&gt;              ...

3.  SYN-RECEIVED &lt;-- &lt;SEQ=300&gt;&lt;CTL=SYN&gt;              &lt;-- SYN-SENT

4.               ... &lt;SEQ=100>&lt;CTL=SYN&gt;              --&gt; SYN-RECEIVED

5.  SYN-RECEIVED --> &lt;SEQ=100>&lt;ACK=301>&lt;CTL=SYN,ACK&gt; ...

6.  ESTABLISHED  &lt;-- &lt;SEQ=300&gt;&lt;ACK=101&gt;&lt;CTL=SYN,ACK&gt; &lt;-- SYN-RECEIVED

7.               ... &lt;SEQ=100&gt;&lt;ACK=301&gt;&lt;CTL=SYN,ACK&gt; --&gt; ESTABLISHED
</artwork>
</figure>
<t>
A TCP implementation MUST support simultaneous open attempts (MUST-10).
</t>
<t>
Note that a TCP implementation MUST keep track of whether a
connection has reached SYN-RECEIVED state as the result of a
passive OPEN or an active OPEN (MUST-11).
</t>
<t>
  The principal reason for the three-way handshake is to prevent old
  duplicate connection initiations from causing confusion.  To deal with
  this, a special control message, reset, is specified.  If the
  receiving TCP peer is in a  non-synchronized state (i.e., SYN-SENT,
  SYN-RECEIVED), it returns to LISTEN on receiving an acceptable reset.
  If the TCP peer is in one of the synchronized states (ESTABLISHED,
  FIN-WAIT-1, FIN-WAIT-2, CLOSE-WAIT, CLOSING, LAST-ACK, TIME-WAIT), it
  aborts the connection and informs its user.  We discuss this latter
  case under "half-open" connections below.
</t>
<figure anchor="dup_syn" title="Recovery from Old Duplicate SYN">
<artwork>

    TCP Peer A                                           TCP Peer B

1.  CLOSED                                               LISTEN

2.  SYN-SENT    --> &lt;SEQ=100>&lt;CTL=SYN>               ...

3.  (duplicate) ... &lt;SEQ=90>&lt;CTL=SYN>               --> SYN-RECEIVED

4.  SYN-SENT    &lt;-- &lt;SEQ=300>&lt;ACK=91>&lt;CTL=SYN,ACK>  &lt;-- SYN-RECEIVED

5.  SYN-SENT    --> &lt;SEQ=91>&lt;CTL=RST>               --> LISTEN
  
6.              ... &lt;SEQ=100>&lt;CTL=SYN>               --> SYN-RECEIVED

7.  ESTABLISHED &lt;-- &lt;SEQ=400>&lt;ACK=101>&lt;CTL=SYN,ACK>  &lt;-- SYN-RECEIVED

8.  ESTABLISHED --> &lt;SEQ=101>&lt;ACK=401>&lt;CTL=ACK>      --> ESTABLISHED
</artwork>
</figure>
<t>
  As a simple example of recovery from old duplicates, consider
  <xref target="dup_syn" />.  At line 3, an old duplicate SYN arrives at TCP Peer B.  TCP Peer B
  cannot tell that this is an old duplicate, so it responds normally
  (line 4).  TCP Peer A detects that the ACK field is incorrect and returns a
  RST (reset) with its SEQ field selected to make the segment
  believable.  TCP Peer B, on receiving the RST, returns to the LISTEN state.
  When the original SYN finally arrives at line 6, the
  synchronization proceeds normally.  If the SYN at line 6 had arrived
  before the RST, a more complex exchange might have occurred with RST's
  sent in both directions.
</t>
<t>
  Half-Open Connections and Other Anomalies
</t>
<t>
  An established connection is said to be  &quot;half-open&quot; if one of the
  TCP peers has closed or aborted the connection at its end without the
  knowledge of the other, or if the two ends of the connection have
  become desynchronized owing to a failure or reboot that resulted in loss of
  memory.  Such connections will automatically become reset if an
  attempt is made to send data in either direction.  However, half-open
  connections are expected to be unusual.
</t>
<t>
  If at site A the connection no longer exists, then an attempt by the
  user at site B to send any data on it will result in the site B TCP endpoint
  receiving a reset control message.  Such a message indicates to the
  site B TCP endpoint that something is wrong, and it is expected to abort the
  connection.
</t>
<t>
  Assume that two user processes A and B are communicating with one
  another when a failure or reboot occurs causing loss of memory to A's TCP implementation.
  Depending on the operating system supporting A's TCP implementation, it is likely
  that some error recovery mechanism exists.  When the TCP endpoint is up again,
  A is likely to start again from the beginning or from a recovery
  point.  As a result, A will probably try to OPEN the connection again
  or try to SEND on the connection it believes open.  In the latter
  case, it receives the error message &quot;connection not open&quot; from the
  local (A's) TCP implementation.  In an attempt to establish the connection, A's TCP implementation
  will send a segment containing SYN.  This scenario leads to the
  example shown in <xref target="half_open" />.  After TCP Peer A reboots, the user attempts to
  re-open the connection.  TCP Peer B, in the meantime, thinks the connection
  is open.
</t>
<figure anchor="half_open" title="Half-Open Connection Discovery">
<artwork>
      TCP Peer A                                      TCP Peer B

  1.  (REBOOT)                              (send 300,receive 100)

  2.  CLOSED                                           ESTABLISHED

  3.  SYN-SENT --> &lt;SEQ=400>&lt;CTL=SYN>              --> (??)

  4.  (!!)     &lt;-- &lt;SEQ=300>&lt;ACK=100>&lt;CTL=ACK>     &lt;-- ESTABLISHED

  5.  SYN-SENT --> &lt;SEQ=100>&lt;CTL=RST>              --> (Abort!!)

  6.  SYN-SENT                                         CLOSED

  7.  SYN-SENT --> &lt;SEQ=400>&lt;CTL=SYN>              -->
</artwork>
</figure>
<t>
  When the SYN arrives at line 3, TCP Peer B, being in a synchronized state,
  and the incoming segment outside the window, responds with an
  acknowledgment indicating what sequence it next expects to hear (ACK
  100).  TCP Peer A sees that this segment does not acknowledge anything it
  sent and, being unsynchronized, sends a reset (RST) because it has
  detected a half-open connection.  TCP Peer B aborts at line 5.  TCP Peer A will
  continue to try to establish the connection; the problem is now
  reduced to the basic 3-way handshake of <xref target="handshake" />.
</t>
<t>
  An interesting alternative case occurs when TCP Peer A reboots and TCP Peer B
  tries to send data on what it thinks is a synchronized connection.
  This is illustrated in <xref target="crash" />.  In this case, the data arriving at
  TCP Peer A from TCP Peer B (line 2) is unacceptable because no such connection
  exists, so TCP Peer A sends a RST.  The RST is acceptable so TCP Peer B
  processes it and aborts the connection.
</t>
  <figure anchor="crash" title="Active Side Causes Half-Open Connection Discovery">
  <artwork>
      TCP Peer A                                         TCP Peer B

1.  (REBOOT)                                  (send 300,receive 100)

2.  (??)    &lt;-- &lt;SEQ=300>&lt;ACK=100>&lt;DATA=10>&lt;CTL=ACK> &lt;-- ESTABLISHED

3.          --> &lt;SEQ=100>&lt;CTL=RST>                   --> (ABORT!!)
</artwork>
</figure>
<t>
  In <xref target="passive_reset" />, two TCP Peers A and B with passive connections
  waiting for SYN are depicted.  An old duplicate arriving at TCP Peer B (line 2) stirs B
  into action.  A SYN-ACK is returned (line 3) and causes TCP A to
  generate a RST (the ACK in line 3 is not acceptable).  TCP Peer B accepts
  the reset and returns to its passive LISTEN state.
</t>
<figure anchor="passive_reset" title="Old Duplicate SYN Initiates a Reset on two Passive Sockets">
<artwork>

    TCP Peer A                                    TCP Peer B

1.  LISTEN                                        LISTEN

2.       ... &lt;SEQ=Z>&lt;CTL=SYN>                -->  SYN-RECEIVED

3.  (??) &lt;-- &lt;SEQ=X>&lt;ACK=Z+1>&lt;CTL=SYN,ACK>   &lt;--  SYN-RECEIVED

4.       --> &lt;SEQ=Z+1>&lt;CTL=RST>              -->  (return to LISTEN!)

5.  LISTEN                                        LISTEN
</artwork>
</figure>
<t>
  A variety of other cases are possible, all of which are accounted for
  by the following rules for RST generation and processing.
</t>
<t>
  Reset Generation
</t>
<t>
  A TCP user or application can issue a reset on a connection at any time, though reset events are also generated by the protocol itself when various error conditions occur, as described below.  The side of a connection issuing a reset should enter the TIME-WAIT state, as this generally helps to reduce the load on busy servers for reasons described in <xref target="FTY99"/>.
</t>
<t>
  As a general rule, reset (RST) is sent whenever a segment arrives
  that apparently is not intended for the current connection.  A reset
  must not be sent if it is not clear that this is the case.
</t>
<t>
  There are three groups of states:
</t>
<t><list>
<t>
    1.  If the connection does not exist (CLOSED) then a reset is sent
    in response to any incoming segment except another reset.  A SYN
    segment that does not match an existing connection is rejected
    by this means.
</t>
<t>
    If the incoming segment has the ACK bit set, the reset takes its
    sequence number from the ACK field of the segment, otherwise the
    reset has sequence number zero and the ACK field is set to the sum
    of the sequence number and segment length of the incoming segment.
    The connection remains in the CLOSED state.
</t>
<t>
    2.  If the connection is in any non-synchronized state (LISTEN,
    SYN-SENT, SYN-RECEIVED), and the incoming segment acknowledges
    something not yet sent (the segment carries an unacceptable ACK), or
    if an incoming segment has a security level or compartment that
    does not exactly match the level and compartment requested for the
    connection, a reset is sent.
</t>
<t>
    If the incoming segment has an ACK field, the reset takes its
    sequence number from the ACK field of the segment, otherwise the
    reset has sequence number zero and the ACK field is set to the sum
    of the sequence number and segment length of the incoming segment.
    The connection remains in the same state.
</t>
<t>
    3.  If the connection is in a synchronized state (ESTABLISHED,
    FIN-WAIT-1, FIN-WAIT-2, CLOSE-WAIT, CLOSING, LAST-ACK, TIME-WAIT),
    any unacceptable segment (out of window sequence number or
    unacceptable acknowledgment number) must be responded to with an empty
    acknowledgment segment (without any user data) containing the current send-sequence number
    and an acknowledgment indicating the next sequence number expected
    to be received, and the connection remains in the same state.
</t>
<t>
    If an incoming segment has a security level, or compartment
    that does not exactly match the level and compartment
    requested for the connection, a reset is sent and
    the connection goes to the CLOSED state.  The reset takes its sequence
    number from the ACK field of the incoming segment.
</t>
</list></t>
<t>
  Reset Processing
</t>
<t>
  In all states except SYN-SENT, all reset (RST) segments are validated
  by checking their SEQ-fields.  A reset is valid if its sequence number
  is in the window.  In the SYN-SENT state (a RST received in response
  to an initial SYN), the RST is acceptable if the ACK field
  acknowledges the SYN.
</t>
<t>
  The receiver of a RST first validates it, then changes state.  If the
  receiver was in the LISTEN state, it ignores it.  If the receiver was
  in SYN-RECEIVED state and had previously been in the LISTEN state,
  then the receiver returns to the LISTEN state, otherwise the receiver
  aborts the connection and goes to the CLOSED state.  If the receiver
  was in any other state, it aborts the connection and advises the user
  and goes to the CLOSED state.
</t>
<t>
  TCP implementations SHOULD allow a received RST segment to include data (SHLD-2).
</t>

</section>
<section title="Closing a Connection">
<t>
  CLOSE is an operation meaning &quot;I have no more data to send.&quot;  The
  notion of closing a full-duplex connection is subject to ambiguous
  interpretation, of course, since it may not be obvious how to treat
  the receiving side of the connection.  We have chosen to treat CLOSE
  in a simplex fashion.  The user who CLOSEs may continue to RECEIVE
  until the TCP receiver is told that the remote peer has CLOSED also.  Thus, a program
  could initiate several SENDs followed by a CLOSE, and then continue to
  RECEIVE until signaled that a RECEIVE failed because the remote peer
  has CLOSED.  The TCP implementation will signal a user, even if no
  RECEIVEs are outstanding, that the remote peer has closed, so the user
  can terminate his side gracefully.  A TCP implementation will reliably deliver all
  buffers SENT before the connection was CLOSED so a user who expects no
  data in return need only wait to hear the connection was CLOSED
  successfully to know that all their data was received at the destination
  TCP endpoint.  Users must keep reading connections they close for sending until
  the TCP implementation indicates there is no more data.
</t>
<t>
  There are essentially three cases:
</t>
<t><list>
<t>
    1) The user initiates by telling the TCP implementation to CLOSE the connection (TCP Peer A in <xref target="normal_close"/>).
</t>
<t>
    2) The remote TCP endpoint initiates by sending a FIN control signal (TCP Peer B in <xref target="normal_close"/>).
</t>
<t>
    3) Both users CLOSE simultaneously (<xref target="simul_close"/>).
</t>
</list></t>
<t><list style="hanging">
<t hangText="Case 1:  Local user initiates the close"><vspace />
    <vspace />
    In this case, a FIN segment can be constructed and placed on the
    outgoing segment queue.  No further SENDs from the user will be
    accepted by the TCP implementation, and it enters the FIN-WAIT-1 state.  RECEIVEs
    are allowed in this state.  All segments preceding and including FIN
    will be retransmitted until acknowledged.  When the other TCP peer has
    both acknowledged the FIN and sent a FIN of its own, the first TCP peer
    can ACK this FIN.  Note that a TCP endpoint receiving a FIN will ACK but not
    send its own FIN until its user has CLOSED the connection also.
</t>
<t hangText="Case 2:  TCP endpoint receives a FIN from the network"><vspace />
    <vspace />
    If an unsolicited FIN arrives from the network, the receiving TCP endpoint
    can ACK it and tell the user that the connection is closing.  The
    user will respond with a CLOSE, upon which the TCP endpoint can send a FIN to
    the other TCP peer after sending any remaining data.  The TCP endpoint then waits
    until its own FIN is acknowledged whereupon it deletes the
    connection.  If an ACK is not forthcoming, after the user timeout
    the connection is aborted and the user is told.
</t>
<t hangText="Case 3:  Both users close simultaneously"><vspace />
    <vspace />
    A simultaneous CLOSE by users at both ends of a connection causes
    FIN segments to be exchanged (<xref target="simul_close"/>).  When all segments preceding the FINs
    have been processed and acknowledged, each TCP peer can ACK the FIN it
    has received.  Both will, upon receiving these ACKs, delete the
    connection.
</t>
</list></t>
<figure anchor="normal_close" title="Normal Close Sequence">
<artwork>
    TCP Peer A                                           TCP Peer B

1.  ESTABLISHED                                          ESTABLISHED

2.  (Close)
    FIN-WAIT-1  --&gt; &lt;SEQ=100&gt;&lt;ACK=300&gt;&lt;CTL=FIN,ACK&gt;  --&gt; CLOSE-WAIT

3.  FIN-WAIT-2  &lt;-- &lt;SEQ=300&gt;&lt;ACK=101&gt;&lt;CTL=ACK&gt;      &lt;-- CLOSE-WAIT

4.                                                       (Close)
    TIME-WAIT   &lt;-- &lt;SEQ=300&gt;&lt;ACK=101&gt;&lt;CTL=FIN,ACK&gt;  &lt;-- LAST-ACK

5.  TIME-WAIT   --&gt; &lt;SEQ=101&gt;&lt;ACK=301&gt;&lt;CTL=ACK&gt;      --&gt; CLOSED

6.  (2 MSL)
    CLOSED                                                      
</artwork>
</figure>
<figure anchor="simul_close" title="Simultaneous Close Sequence">
<artwork>

    TCP Peer A                                           TCP Peer B

1.  ESTABLISHED                                          ESTABLISHED

2.  (Close)                                              (Close)
    FIN-WAIT-1  --&gt; &lt;SEQ=100&gt;&lt;ACK=300&gt;&lt;CTL=FIN,ACK&gt;  ... FIN-WAIT-1
                &lt;-- &lt;SEQ=300&gt;&lt;ACK=100&gt;&lt;CTL=FIN,ACK&gt;  &lt;--
                ... &lt;SEQ=100&gt;&lt;ACK=300&gt;&lt;CTL=FIN,ACK&gt;  --&gt;

3.  CLOSING     --&gt; &lt;SEQ=101&gt;&lt;ACK=301&gt;&lt;CTL=ACK&gt;      ... CLOSING
                &lt;-- &lt;SEQ=301&gt;&lt;ACK=101&gt;&lt;CTL=ACK&gt;      &lt;--
                ... &lt;SEQ=101&gt;&lt;ACK=301&gt;&lt;CTL=ACK&gt;      --&gt;

4.  TIME-WAIT                                            TIME-WAIT
    (2 MSL)                                              (2 MSL)
    CLOSED                                               CLOSED
</artwork>
</figure>
<t>
            A TCP connection may terminate in two ways: (1) the normal
            TCP close sequence using a FIN handshake (<xref target="normal_close"/>), and (2) an &quot;abort&quot;
            in which one or more RST segments are sent and the
            connection state is immediately discarded.  If the local
            TCP connection is closed by the remote side due to a FIN or
	    RST received from the remote side, then the local
            application MUST be informed whether it closed normally or
            was aborted (MUST-12).
</t>
<t>

</t>
<section title="Half-Closed Connections">
<t>
            The normal TCP close sequence delivers buffered data
            reliably in both directions.  Since the two directions of a
            TCP connection are closed independently, it is possible for
            a connection to be &quot;half closed,&quot; i.e., closed in only one
            direction, and a host is permitted to continue sending data
            in the open direction on a half-closed connection.
</t>
<t>
            A host MAY implement a &quot;half-duplex&quot; TCP close sequence, so
            that an application that has called CLOSE cannot continue to
            read data from the connection (MAY-1).  If such a host issues a
            CLOSE call while received data is still pending in the TCP connection, or
            if new data is received after CLOSE is called, its TCP implementation
	    SHOULD send a RST to show that data was lost (SHLD-3).  See <xref
	    target="RFC2525"/> section 2.17 for discussion.

</t>
<t>
            When a connection is closed actively, it MUST linger in the
            TIME-WAIT state for a time 2xMSL (Maximum Segment Lifetime) (MUST-13).
            However, it MAY accept a new SYN from the remote TCP endpoint to
            reopen the connection directly from TIME-WAIT state (MAY-2), if it:
<list>
<t>
            (1)  assigns its initial sequence number for the new
                 connection to be larger than the largest sequence
                 number it used on the previous connection incarnation,
                 and
</t>
<t>
            (2)  returns to TIME-WAIT state if the SYN turns out to be
                 an old duplicate.
</t>
</list>
</t>
<t>

When the TCP Timestamp options are available, an improved algorithm is
described in <xref target="RFC6191"/> in order to support higher connection
establishment rates.  This algorithm for reducing TIME-WAIT is a Best Current
Practice that SHOULD be implemented, since timestamp options are commonly used,
and using them to reduce TIME-WAIT provides benefits for busy Internet servers (SHLD-4).

</t>
</section>
</section>

<section title="Segmentation">
    <t> The term &quot;segmentation&quot; refers to the activity TCP performs when ingesting a stream of bytes from a sending application and packetizing that stream of bytes into TCP segments.  Individual TCP segments often do not correspond one-for-one to individual send (or socket write) calls from the application.  Applications may perform writes at the granularity of messages in the upper layer protocol, but TCP guarantees no boundary coherence between the TCP segments sent and received versus user application data read or write buffer boundaries.  In some specific protocols, such as Remote Direct Memory Access (RDMA) using Direct Data Placement (DDP) and Marker PDU Aligned Framing (MPA) <xref target="RFC5044"/>, there are performance optimizations possible when the relation between TCP segments and application data units can be controlled, and MPA includes a specific mechanism for detecting and verifying this relationship between TCP segments and application message data structures, but this is specific to applications like RDMA.  In general, multiple goals influence the sizing of TCP segments created by a TCP implementation.</t>
    
    <t>Goals driving the sending of larger segments include:
    <list style="symbols">
      <t>Reducing the number of packets in flight within the network.</t>
      <t>Increasing processing efficiency and potential performance by enabling a smaller number of interrupts and inter-layer interactions.</t>
      <t>Limiting the overhead of TCP headers.</t>
    </list>
    </t>
    <t>Note that the performance benefits of sending larger segments may decrease as the size increases, and there may be boundaries where advantages are reversed.  For instance, on some implementation architectures, 1025 bytes within a segment could lead to worse performance than 1024 bytes, due purely to data alignment on copy operations.</t>
    <t>Goals driving the sending of smaller segments include:
    <list style="symbols">
    <t>Avoiding sending a TCP segment that would result in an IP datagram larger than the smallest MTU along an IP network path, because this  results in either packet loss or packet fragmentation.  Making matters worse, some firewalls or middleboxes may drop fragmented packets or ICMP messages related to fragmentation.</t>
    <t>Preventing delays to the application data stream, especially when TCP is waiting on the application to generate more data, or when the application is waiting on an event or input from its peer in order to generate more data.</t>
    <t>Enabling &quot;fate sharing&quot; between TCP segments and lower-layer data units (e.g. below IP, for links with cell or frame sizes smaller than the IP MTU).</t>
    </list>
    </t>

    <t>Towards meeting these competing sets of goals, TCP includes several mechanisms, including the Maximum Segment Size option, Path MTU Discovery, the Nagle algorithm, and support for IPv6 Jumbograms, as discussed in the following subsections.</t>

    <section title="Maximum Segment Size Option" anchor="mss">
    <t>
    TCP endpoints MUST implement both sending and receiving the MSS option (MUST-14).
    </t>
    <t>
    TCP implementations SHOULD send an MSS option in
    every SYN segment when its receive MSS differs from the
    default 536 for IPv4 or 1220 for IPv6 (SHLD-5), and MAY send it always (MAY-3).
    </t>
    <t>
    If an MSS option is not received at connection setup, TCP implementations
    MUST assume a default send MSS of 536 (576-40) for IPv4 or 1220 (1280 - 60) for IPv6 (MUST-15).
    </t>
    <t>
    The maximum size of a segment that TCP endpoint really sends, the
    &quot;effective send MSS,&quot; MUST be the smaller (MUST-16) of the send MSS
    (that reflects the available reassembly buffer size at the
    remote host, the EMTU_R <xref target="RFC1122"/>) and the largest transmission size permitted by the IP layer (EMTU_S <xref target="RFC1122"/>):
    <list style="hanging" hangIndent="4">
        <t>Eff.snd.MSS =
            <list style="hanging" hangIndent="4">
            <t>min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize</t>
            </list>
        </t>
    </list>
    where:
    <list style="symbols">
        <t>
        SendMSS is the MSS value received from the remote host,
        or the default 536 for IPv4 or 1220 for IPv6, if no MSS option is received.
        </t>
        <t>
        MMS_S is the maximum size for a transport-layer message
        that TCP may send.
        </t>
        <t>
        TCPhdrsize is the size of the fixed TCP header and any options.  This is 20 in the (rare) case that no options are present, but may be larger if TCP options are to be sent.  Note that some options might not be included on all segments, but that for each segment sent, the sender should adjust the data length accordingly, within the Eff.snd.MSS.
        </t>
        <t>
        IPoptionsize is the size of any IPv4 options or IPv6 extension headers associated with a TCP connection.  Note that some options or extension headers might not be included on all packets, but that for each segment sent, the sender should adjust the data length accordingly, within the Eff.snd.MSS.
        </t>
    </list>
    </t>
    <t>
   The MSS value to be sent in an MSS option should be equal to the
   effective MTU minus the fixed IP and TCP headers.  By ignoring both
   IP and TCP options when calculating the value for the MSS option, if
   there are any IP or TCP options to be sent in a packet, then the
   sender must decrease the size of the TCP data accordingly.  RFC 6691 <xref target="RFC6691"/>
   discusses this in greater detail.
   </t>
   <t>
    The MSS value to be sent in an MSS option must be less than
    or equal to:
    <list>
        <t>MMS_R - 20</t>
    </list>
    where MMS_R is the maximum size for a transport-layer
    message that can be received (and reassembled at the IP layer) (MUST-67).  TCP obtains
    MMS_R and MMS_S from the IP layer; see the generic call
    GET_MAXSIZES in Section 3.4 of RFC 1122.  These are defined in terms of their IP MTU equivalents, EMTU_R and EMTU_S <xref target="RFC1122"/>.
   </t>
    <t>
    When TCP is used in a situation where either the IP or TCP headers
    are not fixed, the sender must reduce the amount of TCP data in
    any given packet by the number of octets used by the IP and TCP
    options.  This has been a point of confusion historically, as explained in RFC 6691, Section 3.1.
    </t>
   </section>
   <section title="Path MTU Discovery" anchor="pmtud">

   <t>A TCP implementation may be aware of the MTU on directly connected links, but will rarely have insight about MTUs across an entire network path.  For IPv4, RFC 1122 recommends an IP-layer default effective MTU of less than or equal to 576 for destinations not directly connected, and for IPv6 this would be 1280.  Using these fixed values limits TCP connection performance and efficiency.  Instead, implementation of Path MTU Discovery (PMTUD) and Packetization Layer Path MTU Discovery (PLPMTUD) is strongly recommended in order for TCP to improve segmentation decisions.  Both PMTUD and PLPMTUD help TCP choose segment sizes that avoid both on-path (for IPv4) and source fragmentation (IPv4 and IPv6).</t>

   <t>PMTUD for IPv4 <xref target="RFC1191"/> or IPv6 <xref target="RFC8201"/> is implemented in conjunction between TCP, IP, and ICMP protocols.  It relies both on avoiding source fragmentation and setting the IPv4 DF (don't fragment) flag, the latter to inhibit on-path fragmentation.  It relies on ICMP errors from routers along the path, whenever a segment is too large to traverse a link.  Several adjustments to a TCP implementation with PMTUD are described in RFC 2923 in order to deal with problems experienced in practice <xref target="RFC2923"/>.  PLPMTUD <xref target="RFC4821"/> is a Standards Track improvement to PMTUD that relaxes the requirement for ICMP support across a path, and improves performance in cases where ICMP is not consistently conveyed, but still tries to avoid source fragmentation.  The mechanisms in all four of these RFCs are recommended to be included in TCP implementations.</t>

   <t>
   The TCP MSS option specifies an upper bound for the size of packets
   that can be received (see <xref target="RFC6691"/>).  Hence, setting the value in the MSS option too
   small can impact the ability for PMTUD or PLPMTUD to find a larger
   path MTU.  RFC 1191 discusses this implication of many older TCP implementations setting the TCP MSS to 536 (corresponding to the IPv4 576 byte default MTU) for non-local destinations, rather than deriving it from the MTUs of connected interfaces as recommended.
   </t>

   </section>
   <section title="Interfaces with Variable MTU Values">
   <t>
   The effective MTU can sometimes vary, as when used with variable
   compression, e.g., RObust Header Compression (ROHC) <xref target="RFC5795"/>.  It is
   tempting for a TCP implementation to advertise the largest possible MSS, to
   support the most efficient use of compressed payloads.
   Unfortunately, some compression schemes occasionally need to transmit
   full headers (and thus smaller payloads) to resynchronize state at
   their endpoint compressors/decompressors.  If the largest MTU is used
   to calculate the value to advertise in the MSS option, TCP
   retransmission may interfere with compressor resynchronization.
   </t>
   <t>
   As a result, when the effective MTU of an interface varies packet-to-packet, TCP implementations
   SHOULD use the smallest effective MTU of the interface to calculate
   the value to advertise in the MSS option (SHLD-6).
   </t>
   </section>
   <section title="Nagle Algorithm" anchor="nagle">
    <t>The &quot;Nagle algorithm&quot; was described in RFC 896 <xref target="RFC0896"/> and was recommended in RFC 1122 <xref target="RFC1122"/> for mitigation of an early problem of too many small packets being generated.  It has been implemented in most current TCP code bases, sometimes with minor variations (see <xref target="minshall"/>).</t>
    <t>If there is unacknowledged data (i.e., SND.NXT &gt; SND.UNA), then the sending TCP endpoint buffers all user data (regardless of the PSH bit), until the outstanding data has been acknowledged or until the TCP endpoint can send a full-sized segment (Eff.snd.MSS bytes).</t>
    <t>A TCP implementation SHOULD implement the Nagle Algorithm to coalesce short segments (SHLD-7).  However, there MUST be a way for an application to disable the Nagle algorithm on an individual connection (MUST-17).  In all cases, sending data is also subject to the limitation imposed by the Slow Start algorithm <xref target="RFC5681"/>.</t>
    <t>
    Since there can be problematic interactions between the Nagle Algorithm and delayed acknowledgements, some implementations use minor variations of the Nagle algorithm, such as the one described in <xref target="minshall"/>.
    </t>
   </section>
   <section title="IPv6 Jumbograms">
   <t>
   In order to support TCP over IPv6 Jumbograms, implementations need to
   be able to send TCP segments larger than the 64KB limit that the MSS option can convey.  RFC 2675 <xref target="RFC2675"/>
   defines that an MSS value of 65,535 bytes is to be treated as infinity, and Path
   MTU Discovery <xref target="RFC8201"/> is used to determine the actual MSS.
   </t>
   <t>
   The Jumbo Payload option need not be implemented or understood by IPv6 nodes that do not support attachment to links with a MTU greater than 65,575 <xref target="RFC2675"/>, and the present IPv6 Node Requirements does not include support for Jumbograms <xref target="RFC8504"/>.
   </t>
   </section>
</section>
<section title="Data Communication" anchor="datacomm">
<t>
  Once the connection is established data is communicated by the
  exchange of segments.  Because segments may be lost due to errors
  (checksum test failure), or network congestion, TCP uses
  retransmission to ensure delivery of every segment.
  Duplicate segments may arrive due to network or TCP retransmission.
  As discussed in the section on sequence numbers the TCP implementation performs
  certain tests on the sequence and acknowledgment numbers in the
  segments to verify their acceptability.
</t>
<t>
  The sender of data keeps track of the next sequence number to use in
  the variable SND.NXT.  The receiver of data keeps track of the next
  sequence number to expect in the variable RCV.NXT.  The sender of data
  keeps track of the oldest unacknowledged sequence number in the
  variable SND.UNA.  If the data flow is momentarily idle and all data
  sent has been acknowledged then the three variables will be equal.
</t>
<t>
  When the sender creates a segment and transmits it the sender advances
  SND.NXT.  When the receiver accepts a segment it advances RCV.NXT and
  sends an acknowledgment.  When the data sender receives an
  acknowledgment it advances SND.UNA.  The extent to which the values of
  these variables differ is a measure of the delay in the communication.
  The amount by which the variables are advanced is the length of the
  data and SYN or FIN flags in the segment.  Note that once in the ESTABLISHED state all
  segments must carry current acknowledgment information.
</t>
<t>
  The CLOSE user call implies a push function (see <xref target="user-api"/>), as does the FIN control
  flag in an incoming segment.
</t>
<section title="Retransmission Timeout" anchor="RTO">
<t>
  Because of the variability of the networks that compose an
  internetwork system and the wide range of uses of TCP connections the
  retransmission timeout (RTO) must be dynamically determined.
</t>
<t>
      The RTO MUST be computed according to the
      algorithm in <xref target="RFC6298"/>, including Karn's algorithm for taking RTT samples (MUST-18).
</t>
<t>
      RFC 793 contains an early example procedure for computing the RTO.  This was then replaced by the algorithm described in RFC 1122, and subsequently updated in RFC 2988, and then again in RFC 6298.
</t>
<t>
RFC 1122 allows that if a retransmitted packet is identical to the original
packet (which implies not only that the data boundaries have not changed, but
also that none of the headers have changed), then the same IPv4 Identification
field MAY be used (see Section 3.2.1.5 of RFC 1122) (MAY-4).  The same IP
identification field may be reused anyways, since it is only meaningful when a
datagram is fragmented <xref target="RFC6864"/>.  TCP implementations should not rely on or typically
interact with this IPv4 header field in any way.  It is not a reasonable way to
either indicate duplicate sent segments, nor to identify duplicate received
segments.
</t>
</section>
<section title="TCP Congestion Control">
<t>RFC 2914 <xref target="RFC2914"/> explains the importance of congestion control for the Internet.</t>

<t>RFC 1122 required implementation of Van Jacobson's congestion control algorithms slow start and congestion avoidance together with exponential back-off for successive RTO values for the same segment.  RFC 2581 provided IETF Standards Track description of slow start and congestion avoidance, along with fast retransmit and fast recovery.  RFC 5681 is the current description of these algorithms and is the current Standards Track specification providing guidelines for TCP congestion control. RFC 6298 describes exponential back-off of RTO values, including keeping the backed-off value until a subsequent segment with new data has been sent and acknowledged without retransmission.</t>

<t>A TCP endpoint MUST implement the basic congestion control algorithms slow start, congestion avoidance, and exponential back-off of RTO to avoid creating congestion collapse conditions (MUST-19).  RFC 5681 and RFC 6298 describe the basic algorithms on the IETF Standards Track that are broadly applicable.  Multiple other suitable algorithms exist and have been widely used.  Many TCP implementations support a set of alternative algorithms that can be configured for use on the endpoint.  An endpoint MAY implement such alternative algorithms provided that the algorithms are conformant with the TCP specifications from the IETF Standards Track as described in RFC 2914, RFC 5033 <xref target="RFC5033"/>, and RFC 8961 <xref target="RFC8961"/> (MAY-18).</t>

<t>Explicit Congestion Notification (ECN) was defined in RFC 3168 and is an IETF Standards Track enhancement that has many benefits <xref target="RFC8087"/>.</t>

<t>A TCP endpoint SHOULD implement ECN as described in RFC 3168 (SHLD-8).</t>

</section>
<section title="TCP Connection Failures" anchor="connfail">
<t>
            Excessive retransmission of the same segment by a TCP endpoint
            indicates some failure of the remote host or the Internet
            path.  This failure may be of short or long duration.  The
            following procedure MUST be used to handle excessive
            retransmissions of data segments (MUST-20):
</t>
<t>
<list>
<t>
            (a)  There are two thresholds R1 and R2 measuring the amount
                 of retransmission that has occurred for the same
                 segment.  R1 and R2 might be measured in time units or
                 as a count of retransmissions (with the current RTO and
		 corresponding backoffs as a conversion factor, if needed).
</t>
<t>
            (b)  When the number of transmissions of the same segment
                 reaches or exceeds threshold R1, pass negative advice
                 (see Section 3.3.1.4 of <xref target="RFC1122"/>) to the IP layer, to trigger
                 dead-gateway diagnosis.
</t>
<t>
            (c)  When the number of transmissions of the same segment
                 reaches a threshold R2 greater than R1, close the
                 connection.
</t>
<t>
            (d)  An application MUST (MUST-21) be able to set the value for R2 for
                 a particular connection.  For example, an interactive
                 application might set R2 to "infinity," giving the user
                 control over when to disconnect.
</t>
<t>
            (e)  TCP implementations SHOULD inform the application of the delivery
                 problem (unless such information has been disabled by
                 the application; see Asynchronous Reports section), when R1 is
                 reached and before R2 (SHLD-9).  This will allow a remote login
                 (User Telnet) application program to inform the user,
                 for example.
</t>
</list></t>
<t>
            The value of R1 SHOULD correspond to at least 3
            retransmissions, at the current RTO (SHLD-10).  The value of R2 SHOULD
            correspond to at least 100 seconds (SHLD-11).
</t>
<t>
            An attempt to open a TCP connection could fail with
            excessive retransmissions of the SYN segment or by receipt
            of a RST segment or an ICMP Port Unreachable.  SYN
            retransmissions MUST be handled in the general way just
            described for data retransmissions, including notification
            of the application layer.
</t>
<t>
            However, the values of R1 and R2 may be different for SYN
            and data segments.  In particular, R2 for a SYN segment MUST
            be set large enough to provide retransmission of the segment
            for at least 3 minutes (MUST-23).  The application can close the
            connection (i.e., give up on the open attempt) sooner, of
            course.
</t>
</section>
<section title="TCP Keep-Alives">
<t>

            A TCP connection is said to be &quot;idle&quot; if for some long
            amount of time there have been no incoming segments received and
            there is no new or unacknowledged data to be sent.

</t>
<t>
	    Implementors MAY include "keep-alives" in their TCP implementations
	    (MAY-5), although this practice is not universally accepted. Some
	    TCP implementations, however, have included a keep-alive mechanism.
	    To confirm that an idle connection is still active, these
	    implementations send a probe segment designed to elicit a response
	    from the TCP peer.  Such a segment generally contains SEG.SEQ =
	    SND.NXT-1 and may or may not contain one garbage octet of data.
	    If keep-alives are included, the application MUST be able to turn
	    them on or off for each TCP connection (MUST-24), and they MUST
	    default to off (MUST-25).
</t>
<t>
            Keep-alive packets MUST only be sent when no sent data is outstanding,
	    and no data or
            acknowledgement packets have been received for the
            connection within an interval (MUST-26).  This interval MUST be
            configurable (MUST-27) and MUST default to no less than two hours (MUST-28).
</t>
<t>
            It is extremely important to remember that ACK segments that
            contain no data are not reliably transmitted by TCP.
            Consequently, if a keep-alive mechanism is implemented it
            MUST NOT interpret failure to respond to any specific probe
            as a dead connection (MUST-29).
</t>
<t>
            An implementation SHOULD send a keep-alive segment with no
            data (SHLD-12); however, it MAY be configurable to send a keep-alive
            segment containing one garbage octet (MAY-6), for compatibility with
            erroneous TCP implementations.
</t>
</section>
<section title="The Communication of Urgent Information" anchor="urgent">
<t>
  As a result of implementation differences and middlebox interactions, new applications SHOULD NOT employ the TCP urgent mechanism (SHLD-13).  However, TCP implementations MUST still include support for the urgent mechanism (MUST-30).  Details can be found in RFC 6093 <xref target="RFC6093"/>.
</t>
<t>
  The objective of the TCP urgent mechanism is to allow the sending user
  to stimulate the receiving user to accept some urgent data and to
  permit the receiving TCP endpoint to indicate to the receiving user when all
  the currently known urgent data has been received by the user.
</t>
<t>
  This mechanism permits a point in the data stream to be designated as
  the end of urgent information.  Whenever this point is in advance of
  the receive sequence number (RCV.NXT) at the receiving TCP endpoint, that TCP
  must tell the user to go into &quot;urgent mode&quot;; when the receive sequence
  number catches up to the urgent pointer, the TCP implementation must tell user to go
  into &quot;normal mode&quot;.  If the urgent pointer is updated while the user
  is in &quot;urgent mode&quot;, the update will be invisible to the user.
</t>
<t>
  The method employs an urgent field that is carried in all segments
  transmitted.  The URG control flag indicates that the urgent field is
  meaningful and must be added to the segment sequence number to yield
  the urgent pointer.  The absence of this flag indicates that there is
  no urgent data outstanding.
</t>
<t>
  To send an urgent indication the user must also send at least one data
  octet.  If the sending user also indicates a push, timely delivery of
  the urgent information to the destination process is enhanced.  Note that because changes in the urgent pointer correspond to data being written by a sending application, the urgent pointer can not &quot;recede&quot; in the sequence space, but a TCP receiver should be robust to invalid urgent pointer values.
</t>
<t>
  A TCP implementation MUST support a sequence of urgent data of any length (MUST-31). <xref target="RFC1122"/>
</t>
<t>
The urgent pointer MUST point to the sequence number of the octet following the urgent data (MUST-62).
</t>
<t>
  A TCP implementation MUST (MUST-32) inform the application layer asynchronously whenever it receives an Urgent pointer and there was previously no pending urgent data, or whenever the Urgent pointer advances in the data stream.  The TCP implementation MUST (MUST-33) provide a way for the application to learn how much urgent data remains to be read from the connection, or at least to determine whether or not more urgent data remains to be read <xref target="RFC1122"/>.
</t>
</section>
<section title="Managing the Window">
<t>
  The window sent in each segment indicates the range of sequence
  numbers the sender of the window (the data receiver) is currently
  prepared to accept.  There is an assumption that this is related to
  the currently available data buffer space available for this
  connection.
</t>
<t>
  The sending TCP endpoint packages the data to be transmitted into segments
  that fit the current window, and may repackage segments on the
  retransmission queue.  Such repackaging is not required, but may be
  helpful.
</t>
<t>
  In a connection with a one-way data flow, the window information will
  be carried in acknowledgment segments that all have the same sequence
  number so there will be no way to reorder them if they arrive out of
  order.  This is not a serious problem, but it will allow the window
  information to be on occasion temporarily based on old reports from
  the data receiver.  A refinement to avoid this problem is to act on
  the window information from segments that carry the highest
  acknowledgment number (that is segments with acknowledgment number
  equal or greater than the highest previously received).
</t>
<t>
  Indicating a large window encourages transmissions.  If more data
  arrives than can be accepted, it will be discarded.  This will result
  in excessive retransmissions, adding unnecessarily to the load on the
  network and the TCP endpoints.  Indicating a small window may restrict the
  transmission of data to the point of introducing a round trip delay
  between each new segment transmitted.
</t>
<t>
  The mechanisms provided allow a TCP endpoint to advertise a large window and to
  subsequently advertise a much smaller window without having accepted
  that much data.  This, so called &quot;shrinking the window,&quot; is strongly
  discouraged.  The robustness principle <xref target="RFC1122"/> dictates that TCP peers will not
  shrink the window themselves, but will be prepared for such behavior
  on the part of other TCP peers.
</t>
<t>
  A TCP receiver SHOULD NOT shrink the window, i.e., move the
  right window edge to the left (SHLD-14).  However, a sending TCP peer MUST
  be robust against window shrinking, which may cause the
  &quot;usable window&quot; (see <xref target="SWSsender"/>) to become negative (MUST-34).
</t>
<t>
  If this happens, the sender SHOULD NOT send new data (SHLD-15), but
  SHOULD retransmit normally the old unacknowledged data
  between SND.UNA and SND.UNA+SND.WND (SHLD-16).  The sender MAY also
  retransmit old data beyond SND.UNA+SND.WND (MAY-7), but SHOULD NOT
  time out the connection if data beyond the right window edge
  is not acknowledged (SHLD-17).  If the window shrinks to zero, the TCP implementation
  MUST probe it in the standard way (described below) (MUST-35).
</t>
<section title="Zero Window Probing" anchor="zwp">
<t>

  The sending TCP peer must regularly transmit at least one octet of new data
  (if available) or retransmit to the receiving TCP peer even if the send
  window is zero, in order to &quot;probe&quot; the window.  This
  retransmission is essential to guarantee that when either TCP peer has a zero
  window the re-opening of the window will be reliably reported to the other.
  This is referred to as Zero-Window Probing (ZWP) in other documents.

</t>
<t>
  Probing of zero (offered) windows MUST be supported (MUST-36).
</t>
<t>
  A TCP implementation MAY keep its offered receive window closed
  indefinitely (MAY-8).  As long as the receiving TCP peer continues to
  send acknowledgments in response to the probe segments, the
  sending TCP peer MUST allow the connection to stay open (MUST-37).  This
  enables TCP to function in scenarios such as the &quot;printer
  ran out of paper&quot; situation described in Section 4.2.2.17
  of RFC1122.  The behavior is subject to the implementation's resource
  management concerns, as noted in <xref target="RFC6429"/>.

</t>
<t>
  When the receiving TCP peer has a zero window and a segment arrives it must
  still send an acknowledgment showing its next expected sequence number
  and current window (zero).
</t>
<t>

The transmitting host SHOULD send the first zero-window probe when a zero
window has existed for the retransmission timeout period (SHLD-29) (<xref
target="RTO"/>), and SHOULD increase exponentially the interval between
successive probes (SHLD-30).

</t>
</section>

<section title="Silly Window Syndrome Avoidance">
<t>The &quot;Silly Window Syndrome&quot; (SWS) is a stable pattern of small incremental window movements resulting in extremely poor TCP performance.  Algorithms to avoid SWS are described below for both the sending side and the receiving side.  RFC 1122 contains more detailed discussion of the SWS problem.  Note that the Nagle algorithm and the sender SWS avoidance algorithm play complementary roles in improving performance.  The Nagle algorithm discourages sending tiny segments when the data to be sent increases in small increments, while the SWS avoidance algorithm discourages small segments resulting from the right window edge advancing in small increments.</t>

<section title="Sender's Algorithm - When to Send Data" anchor="SWSsender">
<t>
            A TCP implementation MUST include a SWS avoidance algorithm in the sender (MUST-38).
</t>
<t>
The Nagle algorithm from <xref target="nagle"/> additionally describes how to coalesce short segments.
</t>
<t>
            The sender's SWS avoidance algorithm is more difficult
            than the receivers's, because the sender does not know
            (directly) the receiver's total buffer space RCV.BUFF.
            An approach that has been found to work well is for
            the sender to calculate Max(SND.WND), the maximum send
            window it has seen so far on the connection, and to use
            this value as an estimate of RCV.BUFF.  Unfortunately,
            this can only be an estimate; the receiver may at any
            time reduce the size of RCV.BUFF.  To avoid a resulting
            deadlock, it is necessary to have a timeout to force
            transmission of data, overriding the SWS avoidance
            algorithm.  In practice, this timeout should seldom
            occur.
</t>
<t>
            The &quot;usable window&quot; is:<list><t>

                      U = SND.UNA + SND.WND - SND.NXT</t></list>

            i.e., the offered window less the amount of data sent
            but not acknowledged.  If D is the amount of data
            queued in the sending TCP endpoint but not yet sent, then the
            following set of rules is recommended.
</t>
<t>
            Send data:<list style="hanging" hangIndent="5">

            <t hangText="(1)">
             if a maximum-sized segment can be sent, i.e., if:<list><t>

                  min(D,U) >= Eff.snd.MSS;</t></list>
            </t>
            <t hangText="(2)">
             or if the data is pushed and all queued data can
             be sent now, i.e., if:<list><t>

                 [SND.NXT = SND.UNA and] PUSHED and D &lt;= U</t></list>

             (the bracketed condition is imposed by the Nagle
             algorithm);
            </t>
            <t hangText="(3)">
             or if at least a fraction Fs of the maximum window
             can be sent, i.e., if:<list><t>

                 [SND.NXT = SND.UNA and]<list><t>

                         min(D,U) >= Fs * Max(SND.WND);</t></list></t></list>

            </t>
            <t hangText="(4)">
             or if the override timeout
             occurs.
            </t></list>
</t>
<t>
            Here Fs is a fraction whose recommended value is 1/2.
            The override timeout should be in the range 0.1 - 1.0
            seconds.  It may be convenient to combine this timer
            with the timer used to probe zero windows
            (<xref target="zwp"/>).
</t>

</section>
<section title="Receiver's Algorithm - When to Send a Window Update">
<t>
            A TCP implementation MUST include a SWS avoidance algorithm in the receiver (MUST-39).
</t>
<t>
            The receiver's SWS avoidance algorithm determines when
            the right window edge may be advanced; this is
            customarily known as &quot;updating the window&quot;.  This
            algorithm combines with the delayed ACK algorithm
            (<xref target="delACK"/>) to determine when an ACK segment
            containing the current window will really be sent to
            the receiver. 
</t>
<t>
            The solution to receiver SWS is to avoid advancing the
            right window edge RCV.NXT+RCV.WND in small increments,
            even if data is received from the network in small
            segments.
</t>
<t>
            Suppose the total receive buffer space is RCV.BUFF.  At
            any given moment, RCV.USER octets of this total may be
            tied up with data that has been received and
            acknowledged but that the user process has not yet
            consumed.  When the connection is quiescent, RCV.WND =
            RCV.BUFF and RCV.USER = 0.
</t>
<t>
            Keeping the right window edge fixed as data arrives and
            is acknowledged requires that the receiver offer less
            than its full buffer space, i.e., the receiver must
            specify a RCV.WND that keeps RCV.NXT+RCV.WND constant
            as RCV.NXT increases.  Thus, the total buffer space
            RCV.BUFF is generally divided into three parts:
</t>
<t><figure><artwork>

               |&lt;------- RCV.BUFF ----------------&gt;|
                    1             2            3
           ----|---------|------------------|------|----
                      RCV.NXT               ^
                                         (Fixed)

           1 - RCV.USER =  data received but not yet consumed;
           2 - RCV.WND =   space advertised to sender;
           3 - Reduction = space available but not yet
                           advertised.

</artwork></figure></t>
<t>
          The suggested SWS avoidance algorithm for the receiver
          is to keep RCV.NXT+RCV.WND fixed until the reduction
          satisfies:
</t>
<t><figure><artwork>
             RCV.BUFF - RCV.USER - RCV.WND  >=

                    min( Fr * RCV.BUFF, Eff.snd.MSS )
</artwork></figure></t>
<t>
            where Fr is a fraction whose recommended value is 1/2,
            and Eff.snd.MSS is the effective send MSS for the
            connection (see <xref target="mss"/>).  When the inequality
            is satisfied, RCV.WND is set to RCV.BUFF-RCV.USER.
</t>
<t>
            Note that the general effect of this algorithm is to
            advance RCV.WND in increments of Eff.snd.MSS (for
            realistic receive buffers:  Eff.snd.MSS &lt; RCV.BUFF/2).
            Note also that the receiver must use its own
            Eff.snd.MSS, assuming it is the same as the sender's.
</t>

</section>
</section>
<section title="Delayed Acknowledgements - When to Send an ACK Segment" anchor="delACK">

<t>
            A host that is receiving a stream of TCP data segments can
            increase efficiency in both the Internet and the hosts by
            sending fewer than one ACK (acknowledgment) segment per data
            segment received; this is known as a &quot;delayed ACK&quot;.
</t>
<t>
	    A TCP endpoint SHOULD implement a delayed ACK (SHLD-18), but an ACK
	    should not be excessively delayed; in particular, the delay MUST be
	    less than 0.5 seconds (MUST-40).  An ACK SHOULD be generated for at
	    least every second full-sized segment or 2*RMSS bytes of new data
	    (where RMSS is the MSS specified by the TCP endpoint receiving the
	    segments to be acknowledged, or the default value if not specified)
	    (SHLD-19). Excessive delays on ACKs can disturb the round-trip
	    timing and packet &quot;clocking&quot; algorithms.  More complete
	    discussion of delayed ACK behavior is in Section 4.2 of RFC 5681
	    <xref target="RFC5681"/>, including recomendations to immediately
	    acknowledge out-of-order segments, segments above a gap in sequence
	    space, or segments that fill all or part of a gap, in order to
	    accelerate loss recovery.
</t>
<t>
	    Note that there are several current
	    practices that further lead to a reduced number of ACKs, including
	    generic receive offload (GRO), ACK compression, and ACK decimation
	    <xref target="RFC3449"/>. 
</t>
</section>
</section>

</section>
<section title="Interfaces">
<t>
  There are of course two interfaces of concern:  the user/TCP interface
  and the TCP/lower-level interface.  We have a fairly elaborate model
  of the user/TCP interface, but the interface to the lower level
  protocol module is left unspecified here, since it will be specified
  in detail by the specification of the lower level protocol.  For the
  case that the lower level is IP we note some of the parameter values
  that TCP implementations might use.
</t>
<section title="User/TCP Interface" anchor="user-api">
<t>
    The following functional description of user commands to the TCP implementation is,
    at best, fictional, since every operating system will have different
    facilities.  Consequently, we must warn readers that different TCP
    implementations may have different user interfaces.  However, all
    TCP implementations must provide a certain minimum set of services to guarantee
    that all TCP implementations can support the same protocol
    hierarchy.  This section specifies the functional interfaces
    required of all TCP implementations.
</t>
<t>
Section 3.1 of <xref target="RFC8303"/> also identifies primitives provided by TCP, and could be used as an additional reference for implementers.
</t>
<t>
    TCP User Commands
</t>
<t><list style="hanging">
<t>
      The following sections functionally characterize a USER/TCP
      interface.  The notation used is similar to most procedure or
      function calls in high level languages, but this usage is not
      meant to rule out trap type service calls.
</t>
<t>
      The user commands described below specify the basic functions the
      TCP implementation must perform to support interprocess communication.
      Individual implementations must define their own exact format, and
      may provide combinations or subsets of the basic functions in
      single calls.  In particular, some implementations may wish to
      automatically OPEN a connection on the first SEND or RECEIVE
      issued by the user for a given connection.
</t>
<t>
      In providing interprocess communication facilities, the TCP implementation must
      not only accept commands, but must also return information to the
      processes it serves.  The latter consists of:
      <list>
        <t>
        (a) general information about a connection (e.g., interrupts,
        remote close, binding of unspecified remote socket).
        </t>
        <t>
        (b) replies to specific user commands indicating success or
        various types of failure.
        </t>
      </list>
</t>

<t>
      Open
    <list>
<t>
        Format:  OPEN (local port, remote socket, active/passive
        [, timeout] [, DiffServ field] [, security/compartment]
        [local IP address,] [, options])
        -&gt; local connection name
</t>
<t>
        If the active/passive flag is set to passive, then this is a
        call to LISTEN for an incoming connection.  A passive open may
        have either a fully specified remote socket to wait for a
        particular connection or an unspecified remote socket to wait
        for any call.  A fully specified passive call can be made active
        by the subsequent execution of a SEND.
</t>
<t>
        A transmission control block (TCB) is created and partially
        filled in with data from the OPEN command parameters.
</t>
<t>
        Every passive OPEN call either creates a new connection
        record in LISTEN state, or it returns an error; it MUST NOT
        affect any previously created connection record (MUST-41).
</t>
<t>
        A TCP implementation that supports multiple concurrent connections MUST provide
        an OPEN call that will functionally allow an application to
        LISTEN on a port while a connection block with the same
        local port is in SYN-SENT or SYN-RECEIVED state (MUST-42).
</t>
<t>
        On an active OPEN command, the TCP endpoint will begin the procedure to
        synchronize (i.e., establish) the connection at once.
</t>
<t>
        The timeout, if present, permits the caller to set up a timeout
        for all data submitted to TCP.  If data is not successfully
        delivered to the destination within the timeout period, the TCP endpoint
        will abort the connection.  The present global default is five
        minutes.
</t>

<t>
        The TCP implementation or some component of the operating system will verify
        the users authority to open a connection with the specified
        DiffServ field value or security/compartment.  The absence of a
	DiffServ field value
        or security/compartment specification in the OPEN call indicates
        the default values must be used.
</t>
<t>
        TCP will accept incoming requests as matching only if the
        security/compartment information is exactly the same as that
        requested in the OPEN call.
</t>
<t>
The DiffServ field value indicated by the user only impacts outgoing packets, may be altered en route through the network, and has no direct bearing or relation to received packets.
</t>
<t>
        A local connection name will be returned to the user by the TCP implementation.
        The local connection name can then be used as a short hand term
        for the connection defined by the &lt;local socket, remote socket>
        pair.
</t>
<t>
	The optional &quot;local IP address&quot; parameter MUST be supported
        to allow the specification of the local IP address (MUST-43).  This enables
        applications that need to select the local IP address used when
        multihoming is present. 
</t>

<t>
        A passive OPEN call with a specified &quot;local IP address&quot;
        parameter will await an incoming connection request to
        that address.  If the parameter is unspecified, a
        passive OPEN will await an incoming connection request
        to any local IP address, and then bind the local IP
        address of the connection to the particular address
        that is used.
</t>
<t>
For an active OPEN call, a specified &quot;local IP address&quot; parameter
will be used for opening the connection.  If the parameter is unspecified, the
host will choose an appropriate local IP address (see RFC 1122 section 3.3.4.2).
</t>

<t>
        If an application on a multihomed host does not specify the
        local IP address when actively opening a TCP connection,
        then the TCP implementation MUST ask the IP layer to select a local IP
        address before sending the (first) SYN (MUST-44).  See the function
        GET_SRCADDR() in Section 3.4 of RFC 1122.
</t>
<t>
        At all other times, a previous segment has either been sent
        or received on this connection, and TCP implementations MUST use the same
        local address is used that was used in those previous
        segments (MUST-45).
</t>
<t>
            A TCP implementation MUST reject as an error a local OPEN
            call for an invalid remote IP address (e.g., a broadcast or
            multicast address) (MUST-46).
</t>
</list>
</t>
<t anchor="send-call">
      Send
      <list>
<t>
        Format:  SEND (local connection name, buffer address, byte
        count, PUSH flag (optional), URGENT flag [,timeout])
</t>
<t>
        This call causes the data contained in the indicated user buffer
        to be sent on the indicated connection.  If the connection has
        not been opened, the SEND is considered an error.  Some
        implementations may allow users to SEND first; in which case, an
        automatic OPEN would be done.  For example, this might be one way
	for application data to be included in SYN segments. If the calling process is not
        authorized to use this connection, an error is returned.
</t>
<t>

A TCP endpoint MAY implement PUSH flags on SEND calls (MAY-15).  If PUSH flags are not
implemented, then the sending TCP peer: (1) MUST NOT buffer data indefinitely (MUST-60), and
(2) MUST set the PSH bit in the last buffered segment (i.e., when there is no
more queued data to be sent) (MUST-61).  The remaining description below assumes the PUSH
flag is supported on SEND calls.

</t>
<t>

If the PUSH flag is set, the application intends the data to be
transmitted promptly to the receiver, and the PUSH bit will be set in the last
TCP segment created from the buffer.  When an application issues a series of
SEND calls without setting the PUSH flag, the TCP implementation MAY aggregate the data
internally without sending it (MAY-16).

</t>
<t>

The PSH bit is not a record marker and is independent of segment boundaries.
The transmitter SHOULD collapse successive bits when it packetizes data, to
send the largest possible segment (SHLD-27).

</t>
<t>

If the PUSH flag is not set, the data may be combined with data from
subsequent SENDs for transmission efficiency.  Note that when the Nagle
algorithm is in use, TCP implementations may buffer the data before sending, without regard to
the PUSH flag (see <xref target="nagle"/>).

</t>
<t>

An application program is logically required to set the PUSH flag in a SEND
call whenever it needs to force delivery of the data to avoid a communication
deadlock.  However, a TCP implementation SHOULD send a maximum-sized segment whenever
possible (SHLD-28), to improve performance (see <xref target="SWSsender"/>).

</t>

<t>
        New applications SHOULD NOT set the URGENT flag <xref target="RFC6093"/> due to implementation differences and middlebox issues (SHLD-13).
</t>
<t>
        If the URGENT flag is set, segments sent to the destination TCP peer
        will have the urgent pointer set.  The receiving TCP peer will signal
        the urgent condition to the receiving process if the urgent
        pointer indicates that data preceding the urgent pointer has not
        been consumed by the receiving process.  The purpose of urgent
        is to stimulate the receiver to process the urgent data and to
        indicate to the receiver when all the currently known urgent
        data has been received.  The number of times the sending user's
        TCP implementation signals urgent will not necessarily be equal to the number
        of times the receiving user will be notified of the presence of
        urgent data.
</t>
<t>
        If no remote socket was specified in the OPEN, but the
        connection is established (e.g., because a LISTENing connection
        has become specific due to a remote segment arriving for the
        local socket), then the designated buffer is sent to the implied
        remote socket.  Users who make use of OPEN with an unspecified
        remote socket can make use of SEND without ever explicitly
        knowing the remote socket address.
</t>
<t>
        However, if a SEND is attempted before the remote socket
        becomes specified, an error will be returned.  Users can use the
        STATUS call to determine the status of the connection.  Some
        TCP implementations may notify the user when an unspecified
        socket is bound.
</t>
<t>
        If a timeout is specified, the current user timeout for this
        connection is changed to the new one.
</t>
<t>
        In the simplest implementation, SEND would not return control to
        the sending process until either the transmission was complete
        or the timeout had been exceeded.  However, this simple method
        is both subject to deadlocks (for example, both sides of the
        connection might try to do SENDs before doing any RECEIVEs) and
        offers poor performance, so it is not recommended.  A more
        sophisticated implementation would return immediately to allow
        the process to run concurrently with network I/O, and,
        furthermore, to allow multiple SENDs to be in progress.
        Multiple SENDs are served in first come, first served order, so
        the TCP endpoint will queue those it cannot service immediately.
</t>
<t>
        We have implicitly assumed an asynchronous user interface in
        which a SEND later elicits some kind of SIGNAL or
        pseudo-interrupt from the serving TCP endpoint.  An alternative is to
        return a response immediately.  For instance, SENDs might return
        immediate local acknowledgment, even if the segment sent had not
        been acknowledged by the distant TCP endpoint.  We could optimistically
        assume eventual success.  If we are wrong, the connection will
        close anyway due to the timeout.  In implementations of this
        kind (synchronous), there will still be some asynchronous
        signals, but these will deal with the connection itself, and not
        with specific segments or buffers.
</t>
<t>
        In order for the process to distinguish among error or success
        indications for different SENDs, it might be appropriate for the
        buffer address to be returned along with the coded response to
        the SEND request.  TCP-to-user signals are discussed below,
        indicating the information that should be returned to the
        calling process.
</t>
</list></t>
<t>
      Receive
      <list>
<t>
        Format:  RECEIVE (local connection name, buffer address, byte
        count) -> byte count, urgent flag, push flag (optional)
</t>
<t>
        This command allocates a receiving buffer associated with the
        specified connection.  If no OPEN precedes this command or the
        calling process is not authorized to use this connection, an
        error is returned.
</t>
<t>
        In the simplest implementation, control would not return to the
        calling program until either the buffer was filled, or some
        error occurred, but this scheme is highly subject to deadlocks.
        A more sophisticated implementation would permit several
        RECEIVEs to be outstanding at once.  These would be filled as
        segments arrive.  This strategy permits increased throughput at
        the cost of a more elaborate scheme (possibly asynchronous) to
        notify the calling program that a PUSH has been seen or a buffer
        filled.
</t>
<t>

A TCP receiver MAY pass a received PSH flag to the application layer via the
PUSH flag in the interface (MAY-17), but it is not required (this was clarified in RFC
1122 section 4.2.2.2).  The remainder of text describing the RECEIVE call below
assumes that passing the PUSH indication is supported.

</t>
<t>
        If enough data arrive to fill the buffer before a PUSH is seen,
        the PUSH flag will not be set in the response to the RECEIVE.
        The buffer will be filled with as much data as it can hold.  If
        a PUSH is seen before the buffer is filled the buffer will be
        returned partially filled and PUSH indicated.
</t>
<t>
        If there is urgent data the user will have been informed as soon
        as it arrived via a TCP-to-user signal.  The receiving user
        should thus be in &quot;urgent mode&quot;.  If the URGENT flag is on,
        additional urgent data remains.  If the URGENT flag is off, this
        call to RECEIVE has returned all the urgent data, and the user
        may now leave &quot;urgent mode&quot;.  Note that data following the
        urgent pointer (non-urgent data) cannot be delivered to the user
        in the same buffer with preceding urgent data unless the
        boundary is clearly marked for the user.
</t>
<t>
        To distinguish among several outstanding RECEIVEs and to take
        care of the case that a buffer is not completely filled, the
        return code is accompanied by both a buffer pointer and a byte
        count indicating the actual length of the data received.
</t>
<t>
        Alternative implementations of RECEIVE might have the TCP endpoint
        allocate buffer storage, or the TCP endpoint might share a ring buffer
        with the user.
</t>
</list></t>
<t>
      Close
      <list>
<t>
        Format:  CLOSE (local connection name)
</t>
<t>
        This command causes the connection specified to be closed.  If
        the connection is not open or the calling process is not
        authorized to use this connection, an error is returned.
        Closing connections is intended to be a graceful operation in
        the sense that outstanding SENDs will be transmitted (and
        retransmitted), as flow control permits, until all have been
        serviced.  Thus, it should be acceptable to make several SEND
        calls, followed by a CLOSE, and expect all the data to be sent
        to the destination.  It should also be clear that users should
        continue to RECEIVE on CLOSING connections, since the remote peer
        may be trying to transmit the last of its data.  Thus, CLOSE
        means "I have no more to send" but does not mean "I will not
        receive any more."  It may happen (if the user level protocol is
        not well thought out) that the closing side is unable to get rid
        of all its data before timing out.  In this event, CLOSE turns
        into ABORT, and the closing TCP peer gives up.
</t>
<t>
        The user may CLOSE the connection at any time on their own
        initiative, or in response to various prompts from the TCP implementation
        (e.g., remote close executed, transmission timeout exceeded,
        destination inaccessible).
</t>
<t>
        Because closing a connection requires communication with the
        remote TCP peer, connections may remain in the closing state for a
        short time.  Attempts to reopen the connection before the TCP peer
        replies to the CLOSE command will result in error responses.
</t>
<t>
        Close also implies push function.
</t>
</list></t>
<t>
      Status
      <list>
<t>
        Format:  STATUS (local connection name) -> status data
</t>
<t>
        This is an implementation dependent user command and could be
        excluded without adverse effect.  Information returned would
        typically come from the TCB associated with the connection.
</t>
<t>
        This command returns a data block containing the following
        information:
        <list>
          <t>local socket,<vspace />
          remote socket,<vspace />
          local connection name,<vspace />
          receive window,<vspace />
          send window,<vspace />
          connection state,<vspace />
          number of buffers awaiting acknowledgment,<vspace />
          number of buffers pending receipt,<vspace />
          urgent state,<vspace />
          DiffServ field value,<vspace />
          security/compartment,<vspace />
          and transmission timeout.</t>
        </list>
</t>
<t>
        Depending on the state of the connection, or on the
        implementation itself, some of this information may not be
        available or meaningful.  If the calling process is not
        authorized to use this connection, an error is returned.  This
        prevents unauthorized processes from gaining information about a
        connection.
</t>
</list></t>
<t>
      Abort
      <list>
<t>
        Format:  ABORT (local connection name)
</t>
<t>
        This command causes all pending SENDs and RECEIVES to be
        aborted, the TCB to be removed, and a special RESET message to
        be sent to the remote TCP peer of the connection.
        Depending on the implementation, users may receive abort
        indications for each outstanding SEND or RECEIVE, or may simply
        receive an ABORT-acknowledgment.
</t>
</list></t>
<t>
      Flush
    <list>
     <t>
            Some TCP implementations have included a FLUSH call, which
            will empty the TCP send queue of any data that the user
            has issued SEND calls but is still to the right of the
            current send window.  That is, it flushes as much queued
            send data as possible without losing sequence number
            synchronization.  The FLUSH call MAY be implemented (MAY-14).
     </t>
    </list>
</t>
<t>
      Asynchronous Reports
      <list>
      <t>
            There MUST be a mechanism for reporting soft TCP error
            conditions to the application (MUST-47).  Generically, we assume this
            takes the form of an application-supplied ERROR_REPORT
            routine that may be upcalled asynchronously from
            the transport layer:
            <list><t>
               ERROR_REPORT(local connection name, reason, subreason)
            </t></list>
            The precise encoding of the reason and subreason parameters
            is not specified here.  However, the conditions that are
            reported asynchronously to the application MUST include:
            <list><t>
            *    ICMP error message arrived (see <xref target="icmp"/> for description of handling each ICMP message type, since some message types need to be suppressed from generating reports to the application)
            </t><t>
            *    Excessive retransmissions (see <xref target="connfail"/>)
            </t><t>
            *    Urgent pointer advance (see <xref target="urgent"/>)
            </t></list>
            However, an application program that does not want to
            receive such ERROR_REPORT calls SHOULD be able to
            effectively disable these calls (SHLD-20).
      </t>
      </list>
</t>
<t>
      Set Differentiated Services Field (IPv4 TOS or IPv6 Traffic Class)
      <list>
<t>
            The application layer MUST be able to specify the Differentiated Services field
            for segments that are sent on a connection (MUST-48).  The Differentiated Services field includes the 6-bit Differentiated Services Code Point (DSCP) value.
            It is not required, but the application SHOULD be able to
            change the Differentiated Services field during the connection lifetime (SHLD-21).  TCP implementations SHOULD
            pass the current Differentiated Services field value without change to the IP layer,
            when it sends segments on the connection (SHLD-22).
</t>
<t>
            The Differentiated Services field will be specified independently in each direction on
            the connection, so that the receiver application will
            specify the Differentiated Services field used for ACK segments.
</t>
<t>
            TCP implementations MAY pass the most recently received Differentiated Services field up to the
            application (MAY-9).
</t>
</list></t>
</list></t>
</section>
<section title="TCP/Lower-Level Interface">
<t>
    The TCP endpoint calls on a lower level protocol module to actually send and
    receive information over a network.  The two current standard Internet Protocol (IP) versions layered below TCP are IPv4 <xref target="RFC0791"/> and IPv6 <xref target="RFC8200"/>.
</t>
<t>
    If the lower level protocol is IPv4 it provides arguments for a type
    of service (used within the Differentiated Services field) and for a time to live.  TCP uses the following settings
    for these parameters:
    <list>
<t>
      DiffServ field: The IP header value for the DiffServ field is given by the user.  This includes the bits of the DiffServ Code Point (DSCP).  
</t>
<t>
      Time to Live (TTL): The TTL value used to send TCP segments MUST be configurable (MUST-49).
      <list>
<t>
	Note that RFC 793 specified one minute (60 seconds) as a constant for
the TTL, because the assumed maximum segment lifetime was two minutes.  This was
intended to explicitly ask that a segment be destroyed if it cannot be
delivered by the internet system within one minute.  RFC 1122 changed this specification to require that the TTL be configurable.
</t>
<t>
       Note that the DiffServ field is permitted to change during a connection
       (Section 4.2.4.2 of RFC 1122).  However, the application interface might
       not support this ability, and the application does not have knowledge
       about individual TCP segments, so this can only be done on a coarse
       granularity, at best.  This limitation is further discussed in RFC 7657
       (sec 5.1, 5.3, and 6) <xref target="RFC7657"/>.   Generally, an
       application SHOULD NOT change the DiffServ field value during the course
       of a connection (SHLD-23).
</t>
      </list>
</t>
</list></t>
<t>
    Any lower level protocol will have to provide the source address,
    destination address, and protocol fields, and some way to determine
    the &quot;TCP length&quot;, both to provide the functional equivalent service
    of IP and to be used in the TCP checksum.
</t>
<t>
    When received options are passed up to TCP from the IP
    layer, TCP implementations MUST ignore options that it does not understand (MUST-50).
</t>
<t>
    A TCP implementation MAY support the Time Stamp (MAY-10) and Record Route (MAY-11) options.
</t>

<section title="Source Routing">
<t>
    If the lower level is IP (or other protocol that provides this
    feature) and source routing is used, the interface must allow the
    route information to be communicated.  This is especially important
    so that the source and destination addresses used in the TCP
    checksum be the originating source and ultimate destination. It is
    also important to preserve the return route to answer connection
    requests.
</t>
<t>
    An application MUST be able to specify a source route when
    it actively opens a TCP connection (MUST-51), and this MUST take
    precedence over a source route received in a datagram (MUST-52).
</t>
<t>
    When a TCP connection is OPENed passively and a packet
    arrives with a completed IP Source Route option (containing
    a return route), TCP implementations MUST save the return route and use it
    for all segments sent on this connection (MUST-53).  If a different
    source route arrives in a later segment, the later
    definition SHOULD override the earlier one (SHLD-24).
</t>
</section>
<section title="ICMP Messages" anchor="icmp">
<t>
            TCP implementations MUST act on an ICMP error message passed up from the IP
            layer, directing it to the connection that created the
            error (MUST-54).  The necessary demultiplexing information can be
            found in the IP header contained within the ICMP message.
</t>
<t>
            This applies to ICMPv6 in addition to IPv4 ICMP.
</t>
<t>
            <xref target="RFC5461"/> contains discussion of specific ICMP and ICMPv6 messages classified as either &quot;soft&quot; or &quot;hard&quot; errors that may bear different responses.  Treatment for classes of ICMP messages is described below:
</t>
<t>
<list style="hanging" hangIndent="2">
<t hangText="Source Quench"><vspace />

                 TCP implementations MUST silently discard any received ICMP Source Quench messages (MUST-55).  See <xref target="RFC6633"/> for discussion.
</t>
<t hangText="Soft Errors"><vspace />
                 For ICMP these include: Destination Unreachable -- codes 0, 1, 5, Time Exceeded -- codes 0, 1, and Parameter Problem.<vspace />
                 For ICMPv6 these include: Destination Unreachable -- codes 0 and 3, Time Exceeded -- codes 0, 1, and Parameter Problem  -- codes 0, 1, 2.<vspace />

                 Since these Unreachable messages indicate soft error
                 conditions, TCP implementations MUST NOT abort the connection (MUST-56), and it
                 SHOULD make the information available to the
                 application (SHLD-25).
</t>
<t hangText="Hard Errors"><vspace />
                 For ICMP these include Destination Unreachable -- codes 2-4.<vspace />

                 These are hard error conditions, so TCP implementations SHOULD abort
                 the connection (SHLD-26).  <xref target="RFC5461"/> notes that
                 some implementations do not abort connections when an
                 ICMP hard error is received for a connection that is
                 in any of the synchronized states.
</t>
</list>
</t>
<t>
Note that <xref target="RFC5461"/> section 4 describes widespread implementation behavior that treats soft errors as hard errors during connection establishment.
</t>
</section>
<section title="Source Address Validation">
<t>
RFC 1122 requires addresses to be validated in incoming SYN packets:
<list>
<t>
            An incoming SYN with an invalid source address MUST be
            ignored either by TCP or by the IP layer (MUST-63) (Section
            3.2.1.3 of <xref target="RFC1122"/>).
</t>
<t>
            A TCP implementation MUST silently discard an incoming SYN
            segment that is addressed to a broadcast or multicast
            address (MUST-57).
</t>
</list>
</t>
<t>This prevents connection state and replies from being erroneously generated, and implementers should note that this guidance is applicable to all incoming segments, not just SYNs, as specifically indicated in RFC 1122.</t>
</section>
</section>
</section>
<section title="Event Processing">
<t>
  The processing depicted in this section is an example of one possible
  implementation.  Other implementations may have slightly different
  processing sequences, but they should differ from those in this
  section only in detail, not in substance.
</t>
<t>
  The activity of the TCP endpoint can be characterized as responding to events.
  The events that occur can be cast into three categories:  user calls,
  arriving segments, and timeouts.  This section describes the
  processing the TCP endpoint does in response to each of the events.  In many
  cases the processing required depends on the state of the connection.
</t>
<t>
    Events that occur:

    <list>
      <t>User Calls
        <list>
        <t>OPEN<vspace />
        SEND<vspace />
        RECEIVE<vspace />
        CLOSE<vspace />
        ABORT<vspace />
        STATUS</t>
        </list>
      </t>
      <t>Arriving Segments
        <list><t>SEGMENT ARRIVES</t></list>
      </t>
      <t>Timeouts
        <list>
        <t>USER TIMEOUT<vspace />
        RETRANSMISSION TIMEOUT<vspace />
        TIME-WAIT TIMEOUT<vspace />
        </t></list>
      </t>
    </list>
</t>
<t>
  The model of the TCP/user interface is that user commands receive an
  immediate return and possibly a delayed response via an event or
  pseudo interrupt.  In the following descriptions, the term "signal"
  means cause a delayed response.
</t>
<t>
  Error responses in this document are identified by character strings.  For example, user
  commands referencing connections that do not exist receive "error:
  connection not open".
</t>
<t>
  Please note in the following that all arithmetic on sequence numbers,
  acknowledgment numbers, windows, et cetera, is modulo 2**32 the size
  of the sequence number space.  Also note that "=&lt;" means less than or
  equal to (modulo 2**32).
</t>
<t>
  A natural way to think about processing incoming segments is to
  imagine that they are first tested for proper sequence number (i.e.,
  that their contents lie in the range of the expected "receive window"
  in the sequence number space) and then that they are generally queued
  and processed in sequence number order.
</t>
<t>
  When a segment overlaps other already received segments we reconstruct
  the segment to contain just the new data, and adjust the header fields
  to be consistent.
</t>
<t>
  Note that if no state change is mentioned the TCP connection stays in the same
  state.
</t>
<section title="OPEN Call">
<t>
<list>
<t>CLOSED STATE (i.e., TCB does not exist)
  <list>
    <t>
      Create a new transmission control block (TCB) to hold connection
      state information.  Fill in local socket identifier, remote
      socket, DiffServ field, security/compartment, and user timeout
      information.  Note that some parts of the remote socket may be
      unspecified in a passive OPEN and are to be filled in by the
      parameters of the incoming SYN segment.  Verify the security and
      DiffServ value requested are allowed for this user, if not return
      &quot;error:  precedence not allowed&quot; or &quot;error:  security/compartment
      not allowed.&quot;  If passive enter the LISTEN state and return.  If
      active and the remote socket is unspecified, return &quot;error:
      remote socket unspecified&quot;; if active and the remote socket is
      specified, issue a SYN segment.  An initial send sequence number
      (ISS) is selected.  A SYN segment of the form &lt;SEQ=ISS>&lt;CTL=SYN>
      is sent.  Set SND.UNA to ISS, SND.NXT to ISS+1, enter SYN-SENT
      state, and return.
    </t>
    <t>
      If the caller does not have access to the local socket specified,
      return &quot;error:  connection illegal for this process&quot;.  If there is
      no room to create a new connection, return &quot;error:  insufficient
      resources&quot;.
    </t>
  </list>
</t>
<t>LISTEN STATE
  <list>
    <t>
      If the OPEN call is active and the remote socket is specified, then change the
      connection from passive to active, select an ISS.  Send a SYN
      segment, set SND.UNA to ISS, SND.NXT to ISS+1.  Enter SYN-SENT
      state.  Data associated with SEND may be sent with SYN segment or
      queued for transmission after entering ESTABLISHED state.  The
      urgent bit if requested in the command must be sent with the data
      segments sent as a result of this command.  If there is no room to
      queue the request, respond with "error:  insufficient resources".
      If Foreign socket was not specified, then return "error:  remote
      socket unspecified".
    </t>
  </list>
</t>
<t><vspace blankLines="999"/></t>
<t>SYN-SENT STATE<vspace />
SYN-RECEIVED STATE<vspace />
ESTABLISHED STATE<vspace />
FIN-WAIT-1 STATE<vspace />
FIN-WAIT-2 STATE<vspace />
CLOSE-WAIT STATE<vspace />
CLOSING STATE<vspace />
LAST-ACK STATE<vspace />
TIME-WAIT STATE
  <list>
      <t>Return "error:  connection already exists".</t>
  </list>
</t>
</list>
</t>
</section>
<section title="SEND Call">
<t>
  <list>
    <t>
    CLOSED STATE (i.e., TCB does not exist)
      <list>
      <t>
      If the user does not have access to such a connection, then return
      "error:  connection illegal for this process".
      </t>
      <t>
      Otherwise, return "error:  connection does not exist".
      </t>
      </list>
    </t>
    <t>
    LISTEN STATE
      <list>
      <t>
      If the remote socket is specified, then change the connection
      from passive to active, select an ISS.  Send a SYN segment, set
      SND.UNA to ISS, SND.NXT to ISS+1.  Enter SYN-SENT state.  Data
      associated with SEND may be sent with SYN segment or queued for
      transmission after entering ESTABLISHED state.  The urgent bit if
      requested in the command must be sent with the data segments sent
      as a result of this command.  If there is no room to queue the
      request, respond with "error:  insufficient resources".  If
      Foreign socket was not specified, then return "error:  remote
      socket unspecified".
      </t>
      </list>
    </t>
    <t>
    SYN-SENT STATE<vspace />
    SYN-RECEIVED STATE
      <list><t>
      Queue the data for transmission after entering ESTABLISHED state.
      If no space to queue, respond with "error:  insufficient
      resources".
      </t></list>
    </t>
    <t>
    ESTABLISHED STATE<vspace />
    CLOSE-WAIT STATE
      <list><t>
      Segmentize the buffer and send it with a piggybacked
      acknowledgment (acknowledgment value = RCV.NXT).  If there is
      insufficient space to remember this buffer, simply return "error:
      insufficient resources".
      </t>
      <t>
      If the urgent flag is set, then SND.UP &lt;- SND.NXT and set the
      urgent pointer in the outgoing segments.
      </t></list>
    </t>
    <t>
    FIN-WAIT-1 STATE<vspace />
    FIN-WAIT-2 STATE<vspace />
    CLOSING STATE<vspace />
    LAST-ACK STATE<vspace />
    TIME-WAIT STATE
      <list><t>
      Return "error:  connection closing" and do not service request.
      </t></list>
    </t>
  </list>
</t>
</section>
<section title="RECEIVE Call">
<t>
  <list>
    <t>
    CLOSED STATE (i.e., TCB does not exist)
    <list>
      <t>
      If the user does not have access to such a connection, return
      "error:  connection illegal for this process".
      </t>
      <t>
      Otherwise return "error:  connection does not exist".
      </t>
    </list></t>
    <t>
    LISTEN STATE<vspace />
    SYN-SENT STATE<vspace />
    SYN-RECEIVED STATE
    <list>
      <t>
      Queue for processing after entering ESTABLISHED state.  If there
      is no room to queue this request, respond with "error:
      insufficient resources".
      </t>
    </list></t>
    <t>
    ESTABLISHED STATE<vspace />
    FIN-WAIT-1 STATE<vspace />
    FIN-WAIT-2 STATE
    <list>
      <t>
      If insufficient incoming segments are queued to satisfy the
      request, queue the request.  If there is no queue space to
      remember the RECEIVE, respond with "error:  insufficient
      resources".
      </t>
      <t>
      Reassemble queued incoming segments into receive buffer and return
      to user.  Mark "push seen" (PUSH) if this is the case.
      </t>
      <t>
      If RCV.UP is in advance of the data currently being passed to the
      user notify the user of the presence of urgent data.
      </t>
      <t>
      When the TCP endpoint takes responsibility for delivering data to the user
      that fact must be communicated to the sender via an
      acknowledgment.  The formation of such an acknowledgment is
      described below in the discussion of processing an incoming
      segment.
      </t>
    </list></t>
    <t>
    CLOSE-WAIT STATE
    <list>
      <t>
      Since the remote side has already sent FIN, RECEIVEs must be
      satisfied by data already on hand, but not yet delivered to the
      user.  If no text is awaiting delivery, the RECEIVE will get a
      "error:  connection closing" response.  Otherwise, any remaining
      text can be used to satisfy the RECEIVE.
      </t>
    </list></t>
    <t>
    CLOSING STATE<vspace />
    LAST-ACK STATE<vspace />
    TIME-WAIT STATE
    <list>
      <t>
      Return "error:  connection closing".
      </t>
    </list></t>
  </list>
</t>
</section>
<section title="CLOSE Call">
<t>
  <list>
    <t>
    CLOSED STATE (i.e., TCB does not exist)
      <list>
      <t>
      If the user does not have access to such a connection, return
      "error:  connection illegal for this process".
      </t>
      <t>
      Otherwise, return "error:  connection does not exist".
      </t>
      </list></t>
    <t>
    LISTEN STATE
      <list>
      <t>
      Any outstanding RECEIVEs are returned with "error:  closing"
      responses.  Delete TCB, enter CLOSED state, and return.
      </t></list></t>
    <t>
    SYN-SENT STATE
      <list>
      <t>
      Delete the TCB and return "error:  closing" responses to any
      queued SENDs, or RECEIVEs.
      </t></list></t>
    <t>
    SYN-RECEIVED STATE
      <list>
      <t>
      If no SENDs have been issued and there is no pending data to send,
      then form a FIN segment and send it, and enter FIN-WAIT-1 state;
      otherwise queue for processing after entering ESTABLISHED state.
      </t></list></t>
    <t>
    ESTABLISHED STATE
      <list>
      <t>
      Queue this until all preceding SENDs have been segmentized, then
      form a FIN segment and send it.  In any case, enter FIN-WAIT-1
      state.
      </t></list></t>
    <t>
    FIN-WAIT-1 STATE<vspace />
    FIN-WAIT-2 STATE
      <list>
      <t>
      Strictly speaking, this is an error and should receive a "error:
      connection closing" response.  An "ok" response would be
      acceptable, too, as long as a second FIN is not emitted (the first
      FIN may be retransmitted though).
      </t></list></t>
    <t>
    CLOSE-WAIT STATE
      <list>
      <t>
      Queue this request until all preceding SENDs have been
      segmentized; then send a FIN segment, enter LAST-ACK state.
      </t></list></t>
    <t>
    CLOSING STATE<vspace />
    LAST-ACK STATE<vspace />
    TIME-WAIT STATE
      <list>
      <t>
      Respond with "error:  connection closing".
      </t></list></t>
  </list>
</t>
</section>
<section title="ABORT Call">
<t>
  <list>
    <t>
    CLOSED STATE (i.e., TCB does not exist)
      <list>
      <t>
      If the user should not have access to such a connection, return
      "error:  connection illegal for this process". 
      </t>
      <t>
      Otherwise return "error:  connection does not exist".
      </t></list></t>
    <t>
    LISTEN STATE
      <list>
      <t>
      Any outstanding RECEIVEs should be returned with "error:
      connection reset" responses.  Delete TCB, enter CLOSED state, and
      return.
      </t></list></t>
    <t>
    SYN-SENT STATE
      <list>
      <t>
      All queued SENDs and RECEIVEs should be given "connection reset"
      notification, delete the TCB, enter CLOSED state, and return.
      </t></list></t>
    <t>
    SYN-RECEIVED STATE<vspace />
    ESTABLISHED STATE<vspace />
    FIN-WAIT-1 STATE<vspace />
    FIN-WAIT-2 STATE<vspace />
    CLOSE-WAIT STATE
      <list>
      <t>
      Send a reset segment:
      <list>
      <t>
        &lt;SEQ=SND.NXT>&lt;CTL=RST>
      </t>
      </list></t>
      <t>
      All queued SENDs and RECEIVEs should be given "connection reset"
      notification; all segments queued for transmission (except for the
      RST formed above) or retransmission should be flushed, delete the
      TCB, enter CLOSED state, and return.
      </t></list></t>
    <t>
    CLOSING STATE
    LAST-ACK STATE
    TIME-WAIT STATE
      <list>
      <t>
      Respond with "ok" and delete the TCB, enter CLOSED state, and
      return.
      </t></list></t>
  </list>
</t>
</section>
<section title="STATUS Call">
<t>
  <list>
    <t>
    CLOSED STATE (i.e., TCB does not exist)
    <list>
      <t>
      If the user should not have access to such a connection, return
      "error:  connection illegal for this process".
      </t>
      <t>
      Otherwise return "error:  connection does not exist".
      </t></list></t>
    <t>
    LISTEN STATE
    <list>
      <t>
      Return "state = LISTEN", and the TCB pointer.
      </t></list></t>
    <t>
    SYN-SENT STATE
      <list>
      <t>
      Return "state = SYN-SENT", and the TCB pointer.
      </t></list></t>
    <t>
    SYN-RECEIVED STATE
      <list>
      <t>
      Return "state = SYN-RECEIVED", and the TCB pointer.
      </t></list></t>
    <t>
    ESTABLISHED STATE
      <list>
      <t>
      Return "state = ESTABLISHED", and the TCB pointer.
      </t></list></t>
    <t>
    FIN-WAIT-1 STATE
      <list>
      <t>
      Return "state = FIN-WAIT-1", and the TCB pointer.
      </t></list></t>
    <t>
    FIN-WAIT-2 STATE
      <list>
      <t>
      Return "state = FIN-WAIT-2", and the TCB pointer.
      </t></list></t>
    <t>
    CLOSE-WAIT STATE
      <list>
      <t>
      Return "state = CLOSE-WAIT", and the TCB pointer.
      </t></list></t>
    <t>
    CLOSING STATE
      <list>
      <t>
      Return "state = CLOSING", and the TCB pointer.
      </t></list></t>
    <t>
    LAST-ACK STATE
    <list>
    <t>
      Return "state = LAST-ACK", and the TCB pointer.
    </t></list></t>
    <t>
    TIME-WAIT STATE
    <list>
    <t>
      Return "state = TIME-WAIT", and the TCB pointer.
    </t></list></t>
  </list>
</t>
</section>
<section title="SEGMENT ARRIVES">

 <section title="CLOSED State">
    <t>
    If the state is CLOSED (i.e., TCB does not exist) then
    <list>
      <t>
      all data in the incoming segment is discarded.  An incoming
      segment containing a RST is discarded.  An incoming segment not
      containing a RST causes a RST to be sent in response.  The
      acknowledgment and sequence field values are selected to make the
      reset sequence acceptable to the TCP endpoint that sent the offending
      segment.
      </t>
      <t>
      If the ACK bit is off, sequence number zero is used,
        <list>
        <t>
        &lt;SEQ=0>&lt;ACK=SEG.SEQ+SEG.LEN>&lt;CTL=RST,ACK>
        </t>
        </list></t>
      <t>
      If the ACK bit is on,
        <list>
        <t>
        &lt;SEQ=SEG.ACK>&lt;CTL=RST>
        </t></list></t>
      <t>
      Return.
      </t>
    </list></t>
 </section>
 <section title="LISTEN State">
    <t>
    If the state is LISTEN then
      <list>
       <t>
      first check for an RST
        <list>
        <t>
	An incoming RST segment could not be valid, since
        it could not have been sent in response to anything sent by this
        incarnation of the connection.
        An incoming RST should be ignored.  Return.
        </t></list></t>
      <t>
      second check for an ACK
        <list>
        <t>
        Any acknowledgment is bad if it arrives on a connection still in
        the LISTEN state.  An acceptable reset segment should be formed
        for any arriving ACK-bearing segment.  The RST should be
        formatted as follows:
        <list>
          <t>
          &lt;SEQ=SEG.ACK>&lt;CTL=RST>
          </t></list></t>
        <t>
        Return.
        </t></list></t>
      <t>
      third check for a SYN
      <list>
        <t>
        If the SYN bit is set, check the security.  If the
        security/compartment on the incoming segment does not exactly
        match the security/compartment in the TCB then send a reset and
        return.
          <list>
          <t>
          &lt;SEQ=0>&lt;ACK=SEG.SEQ+SEG.LEN>&lt;CTL=RST,ACK>
          </t></list></t>
        <t>
        Set RCV.NXT to SEG.SEQ+1, IRS is set to SEG.SEQ and any other
        control or text should be queued for processing later.  ISS
        should be selected and a SYN segment sent of the form:
        <list>
          <t>
          &lt;SEQ=ISS>&lt;ACK=RCV.NXT>&lt;CTL=SYN,ACK>
          </t></list></t>
        <t>
        SND.NXT is set to ISS+1 and SND.UNA to ISS.  The connection
        state should be changed to SYN-RECEIVED.  Note that any other
        incoming control or data (combined with SYN) will be processed
        in the SYN-RECEIVED state, but processing of SYN and ACK should
        not be repeated.  If the listen was not fully specified (i.e.,
        the remote socket was not fully specified), then the
        unspecified fields should be filled in now.
        </t></list></t>
      <t>
      fourth other data or control
        <list>
        <t>
        This should not be reached.  Drop the segment and return.  Any other control or data-bearing segment (not containing SYN)
        must have an ACK and thus would have been discarded by the ACK
        processing in the second step, unless it was first discarded by
	RST checking in the first step.
        </t></list></t>
    </list></t>
 </section>
 <section title="SYN-SENT State">
    <t>
    If the state is SYN-SENT then
      <list>
      <t>
      first check the ACK bit
        <list>
        <t>
        If the ACK bit is set
          <list>
          <t>
          If SEG.ACK =&lt; ISS, or SEG.ACK > SND.NXT, send a reset (unless
          the RST bit is set, if so drop the segment and return)
            <list>
            <t>
            &lt;SEQ=SEG.ACK>&lt;CTL=RST>
            </t></list></t>
          <t>
          and discard the segment.  Return.
          </t>
          <t>
          If SND.UNA &lt; SEG.ACK =&lt; SND.NXT then the ACK is acceptable.  Some deployed TCP code has used the check SEG.ACK == SND.NXT (using &quot;==&quot; rather than &quot;=&lt;&quot;, but this is not appropriate when the stack is capable of sending data on the SYN, because the TCP peer may not accept and acknowledge all of the data on the SYN.
          </t></list></t>
        </list></t>
      <t>
      second check the RST bit
        <list>
        <t>
        If the RST bit is set
          <list>
          <t>
          A potential blind reset attack is described in RFC 5961 <xref target="RFC5961"/>.  The mitigation described in that document has specific applicability explained therein, and is not a substitute for cryptographic protection (e.g. IPsec or TCP-AO).  A TCP implementation that supports the RFC 5961 mitigation SHOULD first check that the sequence number exactly matches RCV.NXT prior to executing the action in the next paragraph.
	  </t>
          <t>
          If the ACK was acceptable then signal the user "error:
          connection reset", drop the segment, enter CLOSED state,
          delete TCB, and return.  Otherwise (no ACK) drop the segment
          and return.
          </t></list></t>
        </list></t>
      <t>
      third check the security 
        <list>
        <t>
        If the security/compartment in the segment does not exactly
        match the security/compartment in the TCB, send a reset
          <list>
          <t>
          If there is an ACK
            <list>
            <t>
            &lt;SEQ=SEG.ACK>&lt;CTL=RST>
            </t></list></t>
          <t>
          Otherwise
            <list>
            <t>
            &lt;SEQ=0>&lt;ACK=SEG.SEQ+SEG.LEN>&lt;CTL=RST,ACK>
            </t></list></t>
          </list></t>
        <t>
        If a reset was sent, discard the segment and return.
        </t></list></t>
      <t>
      fourth check the SYN bit
        <list>
        <t>
        This step should be reached only if the ACK is ok, or there is
        no ACK, and the segment did not contain a RST.
        </t>
        <t>
        If the SYN bit is on and the security/compartment 
        is acceptable then, RCV.NXT is set to SEG.SEQ+1, IRS is set to
        SEG.SEQ.  SND.UNA should be advanced to equal SEG.ACK (if there
        is an ACK), and any segments on the retransmission queue that
        are thereby acknowledged should be removed.
        </t>
        <t>
        If SND.UNA > ISS (our SYN has been ACKed), change the connection
        state to ESTABLISHED, form an ACK segment
          <list>
          <t>
          &lt;SEQ=SND.NXT>&lt;ACK=RCV.NXT>&lt;CTL=ACK>
          </t></list></t>
        <t>
        and send it.  Data or controls that were queued for
	transmission MAY be included.  Some TCP implementations suppress
	sending this segment when the received segment contains data that will
	anyways generate an acknowledgement in the later processing steps,
	saving this extra acknowledgement of the SYN from being sent.  If there
	are other controls or text in the segment then continue processing at
	the sixth step under <xref target="other-states"/> where the URG
	bit is checked, otherwise return.
        </t>
        <t>
        Otherwise enter SYN-RECEIVED, form a SYN,ACK segment
          <list>
          <t>
          &lt;SEQ=ISS>&lt;ACK=RCV.NXT>&lt;CTL=SYN,ACK>
          </t></list></t>
        <t>
        and send it.  Set the variables:
        <list>
        <t>SND.WND &lt;- SEG.WND<vspace />
        SND.WL1 &lt;- SEG.SEQ<vspace />
        SND.WL2 &lt;- SEG.ACK</t>
        </list>

        If there are other controls or text in the
        segment, queue them for processing after the ESTABLISHED state
        has been reached, return.  
        </t>
	<t>
	Note that it is legal to send and receive application data on SYN segments (this is the &quot;text in the segment&quot; mentioned above.  There has been significant misinformation and misunderstanding of this topic historically.  Some firewalls and security devices consider this suspicious.  However, the capability was used in T/TCP <xref target="RFC1644"/> and is used in TCP Fast Open (TFO) <xref target="RFC7413"/>, so is important for implementations and network devices to permit.
	</t></list></t>
      <t>
      fifth, if neither of the SYN or RST bits is set then drop the
      segment and return.
      </t></list></t>
 </section>
 <section title="Other States" anchor="other-states">
 <t>
    Otherwise,
    <list>
    <t>
    first check sequence number
      <list>
      <t>
      SYN-RECEIVED STATE<vspace />
      ESTABLISHED STATE<vspace />
      FIN-WAIT-1 STATE<vspace />
      FIN-WAIT-2 STATE<vspace />
      CLOSE-WAIT STATE<vspace />
      CLOSING STATE<vspace />
      LAST-ACK STATE<vspace />
      TIME-WAIT STATE
        <list>
        <t>
        Segments are processed in sequence.  Initial tests on arrival
        are used to discard old duplicates, but further processing is
        done in SEG.SEQ order.  If a segment's contents straddle the
        boundary between old and new, only the new parts should be
        processed.
        </t>
        <t>
            In general, the processing of received segments MUST be
            implemented to aggregate ACK segments whenever possible (MUST-58).
            For example, if the TCP endpoint is processing a series of queued
            segments, it MUST process them all before sending any ACK
            segments (MUST-59).
        </t>
        <t>
        There are four cases for the acceptability test for an incoming
        segment:
        </t>
<t><figure><artwork>
      Segment Receive  Test
      Length  Window
      ------- -------  -------------------------------------------

         0       0     SEG.SEQ = RCV.NXT

         0      >0     RCV.NXT =&lt; SEG.SEQ &lt; RCV.NXT+RCV.WND

        >0       0     not acceptable

        >0      >0     RCV.NXT =&lt; SEG.SEQ &lt; RCV.NXT+RCV.WND
                    or RCV.NXT =&lt; SEG.SEQ+SEG.LEN-1 &lt; RCV.NXT+RCV.WND
</artwork></figure></t>
        <t>
	In implementing sequence number validation as described here, please note <xref target="seqval"/>.
	</t>
	<t>
        If the RCV.WND is zero, no segments will be acceptable, but
        special allowance should be made to accept valid ACKs, URGs and
        RSTs.
        </t>
        <t>
        If an incoming segment is not acceptable, an acknowledgment
        should be sent in reply (unless the RST bit is set, if so drop
        the segment and return):
          <list>
          <t>
          &lt;SEQ=SND.NXT>&lt;ACK=RCV.NXT>&lt;CTL=ACK>
          </t></list></t>
        <t>
        After sending the acknowledgment, drop the unacceptable segment
        and return.
        </t>
	<t>
        Note that for the TIME-WAIT state, there is an improved algorithm
	described in <xref target="RFC6191"/> for handling incoming SYN
	segments, that utilizes timestamps rather than relying on
	the sequence number check described here.  When the improved
	algorithm is implemented, the logic above is not applicable for
	incoming SYN segments with timestamp options, received on a
	connection in the TIME-WAIT state.
	</t>
        <t>
        In the following it is assumed that the segment is the idealized
        segment that begins at RCV.NXT and does not exceed the window.
        One could tailor actual segments to fit this assumption by
        trimming off any portions that lie outside the window (including
        SYN and FIN), and only processing further if the segment then
        begins at RCV.NXT.  Segments with higher beginning sequence
        numbers SHOULD be held for later processing (SHLD-31).
        </t>

	</list></t>
    <t>
    second check the RST bit,
      <list>
<t>
RFC 5961 <xref target="RFC5961"/> section 3 describes a potential blind reset attack and optional mitigation approach.  This does not provide a cryptographic protection (e.g. as in IPsec or TCP-AO), but can be applicable in situations described in RFC 5961.  For stacks implementing the RFC 5961 protection, the three checks below apply, otherwise processing for these states is indicated further below.
<list>
<t>1) If the RST bit is set and the sequence number is outside the current receive window, silently drop the segment.</t>
<t>2) If the RST bit is set and the sequence number exactly matches the next expected sequence number (RCV.NXT), then TCP endpoints MUST reset the connection in the manner prescribed below according to the connection state.</t>
<t>3) If the RST bit is set and the sequence number does not exactly match the next expected sequence value, yet is within the current receive window, TCP endpoints MUST send an acknowledgement (challenge ACK):<vspace blankLines="1"/>
&lt;SEQ=SND.NXT&gt;&lt;ACK=RCV.NXT&gt;&lt;CTL=ACK&gt;<vspace blankLines="1"/>
After sending the challenge ACK, TCP endpoints MUST drop the unacceptable segment and stop processing the incoming packet further.  Note that RFC 5961 and Errata ID 4772 contain additional considerations for ACK throttling in an implementation.</t>
</list>
</t>
      <t>
      SYN-RECEIVED STATE
        <list>
        <t>
        If the RST bit is set

          <list>
          <t>
          If this connection was initiated with a passive OPEN (i.e.,
          came from the LISTEN state), then return this connection to
          LISTEN state and return.  The user need not be informed.  If
          this connection was initiated with an active OPEN (i.e., came
          from SYN-SENT state) then the connection was refused, signal
          the user "connection refused".  In either case, all segments
          on the retransmission queue should be removed.  And in the
          active OPEN case, enter the CLOSED state and delete the TCB,
          and return.
          </t></list></t>
        </list></t>
      <t>
      ESTABLISHED<vspace />
      FIN-WAIT-1<vspace />
      FIN-WAIT-2<vspace />
      CLOSE-WAIT
        <list>
        <t>
        If the RST bit is set then, any outstanding RECEIVEs and SEND
        should receive "reset" responses.  All segment queues should be
        flushed.  Users should also receive an unsolicited general
        "connection reset" signal.  Enter the CLOSED state, delete the
        TCB, and return.
        </t>
        </list></t>
      <t>
      CLOSING STATE<vspace />
      LAST-ACK STATE<vspace />
      TIME-WAIT<vspace />
        <list>
        <t>
        If the RST bit is set then, enter the CLOSED state, delete the
        TCB, and return.
        </t></list></t>
      </list></t>
    <t>
    third check security
      <list>
      <t>
      SYN-RECEIVED
        <list>
        <t>
        If the security/compartment in the segment does not
        exactly match the security/compartment in the TCB
        then send a reset, and return.
        </t></list></t>
      <t>
      ESTABLISHED<vspace />
      FIN-WAIT-1<vspace />
      FIN-WAIT-2<vspace />
      CLOSE-WAIT<vspace />
      CLOSING<vspace />
      LAST-ACK<vspace />
      TIME-WAIT
        <list>
        <t>
        If the security/compartment in the segment does not
        exactly match the security/compartment in the TCB
        then send a reset, any outstanding RECEIVEs and SEND should
        receive "reset" responses.  All segment queues should be
        flushed.  Users should also receive an unsolicited general
        "connection reset" signal.  Enter the CLOSED state, delete the
        TCB, and return.
        </t></list></t>
      <t>
      Note this check is placed following the sequence check to prevent
      a segment from an old connection between these port numbers with a
      different security from causing an abort of the
      current connection.
      </t>
    </list></t>
    <t>
    fourth, check the SYN bit,
      <list>
      <t>
      SYN-RECEIVED<vspace />
        <list><t>If the connection was initiated with a passive OPEN, then return this connection to the LISTEN state and return.  Otherwise, handle per the directions for synchronized states below.</t></list>
      ESTABLISHED STATE<vspace />
      FIN-WAIT STATE-1<vspace />
      FIN-WAIT STATE-2<vspace />
      CLOSE-WAIT STATE<vspace />
      CLOSING STATE<vspace />
      LAST-ACK STATE<vspace />
      TIME-WAIT STATE
        <list>
        <t>
If the SYN bit is set in these synchronized states, it may be either a legitimate new connection attempt (e.g. in the case of TIME-WAIT), an error where the connection should be reset, or the result of an attack attempt, as described in RFC 5961 <xref target="RFC5961"/>.  For the TIME-WAIT state, new connections can be accepted if the timestamp option is used and meets expectations (per <xref target="RFC6191"/>).  For all other cases, RFC 5961 provides a mitigation with applicability to some situations, though there are also alternatives that offer cryptographic protection (see <xref target="Security"/>).  RFC 5961 recommends that in these synchronized states, if the SYN bit is set, irrespective of the sequence number, TCP endpoints MUST send a &quot;challenge ACK&quot; to the remote peer:</t>
        <t>
        &lt;SEQ=SND.NXT&gt;&lt;ACK=RCV.NXT&gt;&lt;CTL=ACK&gt;
        </t>
        <t>
After sending the acknowledgement, TCP implementations MUST drop the unacceptable segment and stop processing further.  Note that RFC 5961 and Errata ID 4772 contain additional ACK throttling notes for an implementation.
        </t>
        <t>
        For implementations that do not follow RFC 5961, the original RFC 793 behavior follows in this paragraph.  If the SYN is in the window it is an error, send a reset, any
        outstanding RECEIVEs and SEND should receive &quot;reset&quot; responses,
        all segment queues should be flushed, the user should also
        receive an unsolicited general "connection reset" signal, enter
        the CLOSED state, delete the TCB, and return.
        </t>
        <t>
        If the SYN is not in the window this step would not be reached
        and an ACK would have been sent in the first step (sequence
        number check).
        </t>
        </list></t>
      </list></t>
    <t>
    fifth check the ACK field,
      <list>
      <t>
      if the ACK bit is off drop the segment and return
      </t>
      <t>
      if the ACK bit is on
        <list>
        <t>
RFC 5961 <xref target="RFC5961"/> section 5 describes a potential blind data injection attack, and mitigation that implementations MAY choose to include (MAY-12).  TCP stacks that implement RFC 5961 MUST add an input check that the ACK value is acceptable only if it is in the range of ((SND.UNA - MAX.SND.WND) =&lt; SEG.ACK =&lt; SND.NXT).  All incoming segments whose ACK value doesn't satisfy the above condition MUST be discarded and an ACK sent back.  The new state variable MAX.SND.WND is defined as the largest window that the local sender has ever received from its peer (subject to window scaling) or may be hard-coded to a maximum permissible window value.  When the ACK value is acceptable, the processing per-state below applies:
        </t>
        <t>
        SYN-RECEIVED STATE
         <list>
          <t>
          If SND.UNA &lt; SEG.ACK =&lt; SND.NXT then enter ESTABLISHED state
          and continue processing with variables below set to:
           <list>
           <t>SND.WND &lt;- SEG.WND<vspace />
           SND.WL1 &lt;- SEG.SEQ<vspace />
           SND.WL2 &lt;- SEG.ACK</t>
           </list>
	  </t>
          <t>
          If the segment acknowledgment is not acceptable, form a
          reset segment,
            <list>
            <t>
            &lt;SEQ=SEG.ACK>&lt;CTL=RST>
            </t></list>
	  </t>
          <t>
          and send it.
          </t>
         </list></t>
        <t>
        ESTABLISHED STATE
          <list>
          <t>
          If SND.UNA &lt; SEG.ACK =&lt; SND.NXT then, set SND.UNA &lt;- SEG.ACK.
          Any segments on the retransmission queue that are thereby
          entirely acknowledged are removed.  Users should receive
          positive acknowledgments for buffers that have been SENT and
          fully acknowledged (i.e., SEND buffer should be returned with
          "ok" response).  If the ACK is a duplicate
          (SEG.ACK =&lt; SND.UNA), it can be ignored.  If the ACK acks
          something not yet sent (SEG.ACK > SND.NXT) then send an ACK,
          drop the segment, and return.
          </t>
          <t>
          If SND.UNA =&lt; SEG.ACK =&lt; SND.NXT, the send window should be
          updated.  If (SND.WL1 &lt; SEG.SEQ or (SND.WL1 = SEG.SEQ and
          SND.WL2 =&lt; SEG.ACK)), set SND.WND &lt;- SEG.WND, set
          SND.WL1 &lt;- SEG.SEQ, and set SND.WL2 &lt;- SEG.ACK.
          </t>
          <t>
          Note that SND.WND is an offset from SND.UNA, that SND.WL1
          records the sequence number of the last segment used to update
          SND.WND, and that SND.WL2 records the acknowledgment number of
          the last segment used to update SND.WND.  The check here
          prevents using old segments to update the window.
          </t>
          </list></t>
        <t>
        FIN-WAIT-1 STATE
          <list>
          <t>
          In addition to the processing for the ESTABLISHED state, if
          the FIN segment is now acknowledged then enter FIN-WAIT-2 and continue
          processing in that state.
          </t></list></t>
        <t>
        FIN-WAIT-2 STATE
          <list>
          <t>
          In addition to the processing for the ESTABLISHED state, if
          the retransmission queue is empty, the user's CLOSE can be
          acknowledged ("ok") but do not delete the TCB.
          </t></list></t>
        <t>
        CLOSE-WAIT STATE
          <list>
          <t>
          Do the same processing as for the ESTABLISHED state.
          </t></list></t>
        <t>
        CLOSING STATE
          <list>
          <t>
          In addition to the processing for the ESTABLISHED state, if
          the ACK acknowledges our FIN then enter the TIME-WAIT state,
          otherwise ignore the segment.
          </t></list></t>
        <t>
        LAST-ACK STATE
          <list>
          <t>
          The only thing that can arrive in this state is an
          acknowledgment of our FIN.  If our FIN is now acknowledged,
          delete the TCB, enter the CLOSED state, and return.
          </t></list></t>
        <t>
        TIME-WAIT STATE
          <list>
          <t>
          The only thing that can arrive in this state is a
          retransmission of the remote FIN.  Acknowledge it, and restart
          the 2 MSL timeout.
          </t></list></t>
        </list></t>
      </list></t>
    <t>
    sixth, check the URG bit,
      <list>
      <t>
      ESTABLISHED STATE<vspace />
      FIN-WAIT-1 STATE<vspace />
      FIN-WAIT-2 STATE
        <list>
        <t>
        If the URG bit is set, RCV.UP &lt;- max(RCV.UP,SEG.UP), and signal
        the user that the remote side has urgent data if the urgent
        pointer (RCV.UP) is in advance of the data consumed.  If the
        user has already been signaled (or is still in the &quot;urgent
        mode&quot;) for this continuous sequence of urgent data, do not
        signal the user again.
        </t></list></t>
      <t>
      CLOSE-WAIT STATE<vspace />
      CLOSING STATE<vspace />
      LAST-ACK STATE<vspace />
      TIME-WAIT
        <list>
        <t>
        This should not occur, since a FIN has been received from the
        remote side.  Ignore the URG.
        </t></list></t>
    </list></t>
    <t>
    seventh, process the segment text,
      <list>
      <t>
      ESTABLISHED STATE<vspace />
      FIN-WAIT-1 STATE<vspace />
      FIN-WAIT-2 STATE
        <list>
        <t>
        Once in the ESTABLISHED state, it is possible to deliver segment
        text to user RECEIVE buffers.  Text from segments can be moved
        into buffers until either the buffer is full or the segment is
        empty.  If the segment empties and carries a PUSH flag, then
        the user is informed, when the buffer is returned, that a PUSH
        has been received.
        </t>
        <t>
        When the TCP endpoint takes responsibility for delivering the data to the
        user it must also acknowledge the receipt of the data.
        </t>
        <t>
        Once the TCP endpoint takes responsibility for the data it advances
        RCV.NXT over the data accepted, and adjusts RCV.WND as
        appropriate to the current buffer availability.  The total of
        RCV.NXT and RCV.WND should not be reduced.
        </t>
        <t>
        A TCP implementation MAY send an ACK segment acknowledging RCV.NXT when a
        valid segment arrives that is in the window but not at the
        left window edge (MAY-13).
        </t>
        <t>
        Please note the window management suggestions in <xref target="datacomm"/>.
        </t>
        <t>
        Send an acknowledgment of the form:
          <list><t>
          &lt;SEQ=SND.NXT>&lt;ACK=RCV.NXT>&lt;CTL=ACK>
          </t></list></t>
        <t>
        This acknowledgment should be piggybacked on a segment being
        transmitted if possible without incurring undue delay.
        </t>
        </list></t>
      <t>
      CLOSE-WAIT STATE<vspace />
      CLOSING STATE<vspace />
      LAST-ACK STATE<vspace />
      TIME-WAIT STATE
        <list>
        <t>
        This should not occur, since a FIN has been received from the
        remote side.  Ignore the segment text.
        </t>
        </list>
      </t>
      </list></t>
    <t>
    eighth, check the FIN bit,
      <list>
      <t>
      Do not process the FIN if the state is CLOSED, LISTEN or SYN-SENT
      since the SEG.SEQ cannot be validated; drop the segment and
      return.
      </t>
      <t>
      If the FIN bit is set, signal the user "connection closing" and
      return any pending RECEIVEs with same message, advance RCV.NXT
      over the FIN, and send an acknowledgment for the FIN.  Note that
      FIN implies PUSH for any segment text not yet delivered to the
      user.
        <list>
        <t>
        SYN-RECEIVED STATE<vspace />
        ESTABLISHED STATE
          <list>
          <t>
          Enter the CLOSE-WAIT state.
          </t></list></t>
        <t>
        FIN-WAIT-1 STATE
          <list>
          <t>
          If our FIN has been ACKed (perhaps in this segment), then
          enter TIME-WAIT, start the time-wait timer, turn off the other
          timers; otherwise enter the CLOSING state.
          </t></list></t>
        <t>
        FIN-WAIT-2 STATE
          <list>
          <t>
          Enter the TIME-WAIT state.  Start the time-wait timer, turn
          off the other timers.
          </t></list></t>
        <t>
        CLOSE-WAIT STATE
          <list>
          <t>
          Remain in the CLOSE-WAIT state.
          </t></list></t>
        <t>
        CLOSING STATE
          <list>
          <t>
          Remain in the CLOSING state.
          </t></list></t>
        <t>
        LAST-ACK STATE
          <list>
          <t>
          Remain in the LAST-ACK state.
          </t></list></t>
        <t>
        TIME-WAIT STATE
          <list>
          <t>
          Remain in the TIME-WAIT state.  Restart the 2 MSL time-wait
          timeout.
          </t></list></t>
        </list></t>
      </list></t>
    <t>
    and return.
    </t>
    </list>
  </t>
  </list>
</t>
</section> 

</section>

<section title="Timeouts">
<t>
<list>
<t>
  USER TIMEOUT
  <list>
  <t>
    For any state if the user timeout expires, flush all queues, signal
    the user "error:  connection aborted due to user timeout" in general
    and for any outstanding calls, delete the TCB, enter the CLOSED
    state and return.
  </t>
  </list>
</t>
<t>
  RETRANSMISSION TIMEOUT
  <list>
  <t>
    For any state if the retransmission timeout expires on a segment in
    the retransmission queue, send the segment at the front of the
    retransmission queue again, reinitialize the retransmission timer,
    and return.
  </t>
  </list>
</t>
<t>
  TIME-WAIT TIMEOUT
  <list>
  <t>
    If the time-wait timeout expires on a connection delete the TCB,
    enter the CLOSED state and return.
  </t>
  </list>
</t>
</list>
</t>
</section>
</section>
</section>

<section title="Glossary" anchor="glossary">
<t>
<list style="hanging" hangIndent="8">

<t hangText="ACK"><vspace />
          A control bit (acknowledge) occupying no sequence space, which
          indicates that the acknowledgment field of this segment
          specifies the next sequence number the sender of this segment
          is expecting to receive, hence acknowledging receipt of all
          previous sequence numbers.</t>

<t hangText="connection"><vspace />
          A logical communication path identified by a pair of sockets.</t>

<t hangText="datagram"><vspace />
          A message sent in a packet switched computer communications
          network.</t>

<t hangText="Destination Address"><vspace />
          The network layer address of the remote endpoint.</t>

<t hangText="FIN"><vspace />
          A control bit (finis) occupying one sequence number, which
          indicates that the sender will send no more data or control
          occupying sequence space.</t>

<t hangText="fragment"><vspace />
          A portion of a logical unit of data, in particular an internet
          fragment is a portion of an internet datagram.</t>

<t hangText="header"><vspace />
          Control information at the beginning of a message, segment,
          fragment, packet or block of data.</t>

<t hangText="host"><vspace />
          A computer.  In particular a source or destination of messages
          from the point of view of the communication network.</t>

<t hangText="Identification"><vspace />
          An Internet Protocol field.  This identifying value assigned
          by the sender aids in assembling the fragments of a datagram.</t>

<t hangText="internet address"><vspace />
          A network layer address.</t>

<t hangText="internet datagram"><vspace />
          The unit of data exchanged between an internet module and the
          higher level protocol together with the internet header.</t>

<t hangText="internet fragment"><vspace />
          A portion of the data of an internet datagram with an internet
          header.</t>

<t hangText="IP"><vspace />
          Internet Protocol. See <xref target="RFC0791"/> and <xref target="RFC8200"/>.</t>

<t hangText="IRS"><vspace />
          The Initial Receive Sequence number.  The first sequence
          number used by the sender on a connection.</t>

<t hangText="ISN"><vspace />
          The Initial Sequence Number.  The first sequence number used
          on a connection, (either ISS or IRS).  Selected in a way that is unique within a given period of time and is unpredictable to attackers.</t>

<t hangText="ISS"><vspace />
          The Initial Send Sequence number.  The first sequence number
          used by the sender on a connection.</t>

<t hangText="left sequence"><vspace />
          This is the next sequence number to be acknowledged by the
          data receiving TCP endpoint (or the lowest currently unacknowledged
          sequence number) and is sometimes referred to as the left edge
          of the send window.</t>

<t hangText="module"><vspace />
          An implementation, usually in software, of a protocol or other
          procedure.</t>

<t hangText="MSL"><vspace />
          Maximum Segment Lifetime, the time a TCP segment can exist in
          the internetwork system.  Arbitrarily defined to be 2 minutes.</t>

<t hangText="octet"><vspace />
          An eight bit byte.</t>

<t hangText="Options"><vspace />
          An Option field may contain several options, and each option
          may be several octets in length.</t>

<t hangText="packet"><vspace />
          A package of data with a header that may or may not be
          logically complete.  More often a physical packaging than a
          logical packaging of data.</t>

<t hangText="port"><vspace />
          The portion of a connection identifier used for demultiplexing connections
	  at an endpoint.</t>

<t hangText="process"><vspace />
          A program in execution.  A source or destination of data from
          the point of view of the TCP endpoint or other host-to-host protocol.</t>

<t hangText="PUSH"><vspace />
          A control bit occupying no sequence space, indicating that
          this segment contains data that must be pushed through to the
          receiving user.</t>

<t hangText="RCV.NXT"><vspace />
          receive next sequence number</t>

<t hangText="RCV.UP"><vspace />
          receive urgent pointer</t>

<t hangText="RCV.WND"><vspace />
          receive window</t>

<t hangText="receive next sequence number"><vspace />
          This is the next sequence number the local TCP endpoint is expecting to
              receive.</t>

<t hangText="receive window"><vspace />
          This represents the sequence numbers the local (receiving) TCP endpoint
          is willing to receive.  Thus, the local TCP endpoint considers that
          segments overlapping the range RCV.NXT to
          RCV.NXT + RCV.WND - 1 carry acceptable data or control.
          Segments containing sequence numbers entirely outside of this
          range are considered duplicates and discarded.</t>

<t hangText="RST"><vspace />
          A control bit (reset), occupying no sequence space, indicating
          that the receiver should delete the connection without further
          interaction.  The receiver can determine, based on the
          sequence number and acknowledgment fields of the incoming
          segment, whether it should honor the reset command or ignore
          it.  In no case does receipt of a segment containing RST give
          rise to a RST in response.</t>

<t hangText="SEG.ACK"><vspace />
          segment acknowledgment</t>

<t hangText="SEG.LEN"><vspace />
          segment length</t>

<t hangText="SEG.SEQ"><vspace />
          segment sequence</t>

<t hangText="SEG.UP"><vspace />
          segment urgent pointer field</t>

<t hangText="SEG.WND"><vspace />
          segment window field</t>

<t hangText="segment"><vspace />
          A logical unit of data, in particular a TCP segment is the
          unit of data transferred between a pair of TCP modules.</t>

<t hangText="segment acknowledgment"><vspace />
          The sequence number in the acknowledgment field of the
          arriving segment.</t>

<t hangText="segment length"><vspace />
          The amount of sequence number space occupied by a segment,
          including any controls that occupy sequence space.</t>

<t hangText="segment sequence"><vspace />
          The number in the sequence field of the arriving segment.</t>

<t hangText="send sequence"><vspace />
          This is the next sequence number the local (sending) TCP endpoint will
          use on the connection.  It is initially selected from an
          initial sequence number curve (ISN) and is incremented for
          each octet of data or sequenced control transmitted.</t>

<t hangText="send window"><vspace />
          This represents the sequence numbers that the remote
          (receiving) TCP endpoint is willing to receive.  It is the value of the
          window field specified in segments from the remote (data
          receiving) TCP endpoint.  The range of new sequence numbers that may
          be emitted by a TCP implementation lies between SND.NXT and
          SND.UNA + SND.WND - 1. (Retransmissions of sequence numbers
          between SND.UNA and SND.NXT are expected, of course.)</t>

<t hangText="SND.NXT"><vspace />
          send sequence</t>

<t hangText="SND.UNA"><vspace />
          left sequence</t>

<t hangText="SND.UP"><vspace />
          send urgent pointer</t>

<t hangText="SND.WL1"><vspace />
          segment sequence number at last window update</t>

<t hangText="SND.WL2"><vspace />
          segment acknowledgment number at last window update</t>

<t hangText="SND.WND"><vspace />
          send window</t>

<t hangText="socket (or socket number, or socket address, or socket identifier)"><vspace />
          An address that specifically includes a port identifier, that
          is, the concatenation of an Internet Address with a TCP port.</t>

<t hangText="Source Address"><vspace />
          The network layer address of the sending endpoint.</t>

<t hangText="SYN"><vspace />
          A control bit in the incoming segment, occupying one sequence
          number, used at the initiation of a connection, to indicate
          where the sequence numbering will start.</t>

<t hangText="TCB"><vspace />
          Transmission control block, the data structure that records
          the state of a connection.</t>

<t hangText="TCP"><vspace />
          Transmission Control Protocol:  A host-to-host protocol for
          reliable communication in internetwork environments.</t>

<t hangText="TOS"><vspace />
          Type of Service, an obsoleted IPv4 field.  The same header bits currently are used for the Differentiated Services field <xref target="RFC2474"/> containing the Differentiated Services Code Point (DSCP) value and the 2-bit ECN codepoint <xref target="RFC3168"/>.</t>

<t hangText="Type of Service"><vspace />
          See &quot;TOS&quot;.</t>

<t hangText="URG"><vspace />
          A control bit (urgent), occupying no sequence space, used to
          indicate that the receiving user should be notified to do
          urgent processing as long as there is data to be consumed with
          sequence numbers less than the value indicated in the urgent
          pointer.</t>

<t hangText="urgent pointer"><vspace />
          A control field meaningful only when the URG bit is on.  This
          field communicates the value of the urgent pointer that
          indicates the data octet associated with the sending user's
          urgent call.</t>
</list>
</t>

</section>


<section anchor="changes" title="Changes from RFC 793">
        <?rfc subcompact="yes" ?>
        <t>
            This document obsoletes RFC 793 as well as RFC 6093 and 6528, which updated 793.  In all cases, only the normative protocol specification and requirements have been incorporated into this document, and some informational text with background and rationale may not have been carried in.  The informational content of those documents is still valuable in learning about and understanding TCP, and they are valid Informational references, even though their normative content has been incorporated into this document.
        </t>
        <t>
            The main body of this document was adapted from RFC 793's Section 3, titled "FUNCTIONAL SPECIFICATION", with an attempt to keep formatting and layout as close as possible.
        </t>
        <t>
            The collection of applicable RFC Errata that have been reported and either accepted or held for an update to RFC 793 were incorporated (Errata IDs: 573, 574, 700, 701, 1283, 1561, 1562, 1564, 1565, 1571, 1572, 2296, 2297, 2298, 2748, 2749, 2934, 3213, 3300, 3301, 6222).  Some errata were not applicable due to other changes (Errata IDs: 572, 575, 1569, 3305, 3602).
        </t>
        <t>
            Changes to the specification of the Urgent Pointer described in RFC 1122 and 6093 were incorporated.  See RFC 6093 for detailed discussion of why these changes were necessary.
        </t>
        <t>
The discussion of the RTO from RFC 793 was updated to refer to RFC 6298.  The RFC 1122 text on the RTO originally replaced the 793 text, however, RFC 2988 should have updated 1122, and has subsequently been obsoleted by 6298.
        </t>
        <t>
RFC 1122 contains a collection of other changes and clarifications to RFC 793.  The normative items impacting the protocol have been incorporated here, though some historically useful implementation advice and informative discussion from RFC 1122 is not included here.
        </t>
        <t>
RFC 1122 contains more than just TCP requirements, so this document can't obsolete RFC 1122 entirely.  It is only marked as &quot;updating&quot; 1122, however, it should be understood to effectively obsolete all of the RFC 1122 material on TCP.
        </t>
        <t>
            The more secure Initial Sequence Number generation algorithm from RFC 6528 was incorporated.  See RFC 6528 for discussion of the attacks that this mitigates, as well as advice on selecting PRF algorithms and managing secret key data.
        </t>
        <t>
A note based on RFC 6429 was added to explicitly clarify that system resource management concerns allow connection resources to be reclaimed.  RFC 6429 is obsoleted in the sense that this clarification has been reflected in this update to the base TCP specification now.
        </t>
	<t>
	The description of congestion control implementation was added, based on the set of documents that are IETF BCP or Standards Track on the topic, and the current state of common implementations.
	</t>
        <t>
            RFC EDITOR'S NOTE: the content below is for detailed change tracking and planning, and not to be included with the final revision of the document.
        </t>
        <t>
            This document started as draft-eddy-rfc793bis-00, that was merely a proposal and rough plan for updating RFC 793.
        </t>
        <t>
            The -01 revision of this draft-eddy-rfc793bis incorporates the content of RFC 793 Section 3 titled "FUNCTIONAL SPECIFICATION".  Other content from RFC 793 has not been incorporated.  The -01 revision of this document makes some minor formatting changes to the RFC 793 content in order to convert the content into XML2RFC format and account for left-out parts of RFC 793.  For instance, figure numbering differs and some indentation is not exactly the same.
        </t>
        <t>
            The -02 revision of draft-eddy-rfc793bis incorporates errata that have been verified:
            <list>
                <t>Errata ID 573: Reported by Bob Braden (note: This errata basically is just a reminder that RFC 1122 updates 793.  Some of the associated changes are left pending to a separate revision that incorporates 1122.  Bob's mention of PUSH in 793 section 2.8 was not applicable here because that section was not part of the "functional specification".  Also the 1122 text on the retransmission timeout also has been updated by subsequent RFCs, so the change here deviates from Bob's suggestion to apply the 1122 text.)</t>
                <t>Errata ID 574: Reported by Yin Shuming</t>
                <t>Errata ID 700: Reported by Yin Shuming</t>
                <t>Errata ID 701: Reported by Yin Shuming</t>
                <t>Errata ID 1283: Reported by Pei-chun Cheng</t>
                <t>Errata ID 1561: Reported by Constantin Hagemeier</t>
                <t>Errata ID 1562: Reported by Constantin Hagemeier</t>
                <t>Errata ID 1564: Reported by Constantin Hagemeier</t>
                <t>Errata ID 1565: Reported by Constantin Hagemeier</t>
                <t>Errata ID 1571: Reported by Constantin Hagemeier</t>
                <t>Errata ID 1572: Reported by Constantin Hagemeier</t>
                <t>Errata ID 2296: Reported by Vishwas Manral</t>
                <t>Errata ID 2297: Reported by Vishwas Manral</t>
                <t>Errata ID 2298: Reported by Vishwas Manral</t>
                <t>Errata ID 2748: Reported by Mykyta Yevstifeyev</t>
                <t>Errata ID 2749: Reported by Mykyta Yevstifeyev</t>
                <t>Errata ID 2934: Reported by Constantin Hagemeier</t>
                <t>Errata ID 3213: Reported by EugnJun Yi</t>
                <t>Errata ID 3300: Reported by Botong Huang</t>
                <t>Errata ID 3301: Reported by Botong Huang</t>
                <t>Errata ID 3305: Reported by Botong Huang</t>
                <t>Note: Some verified errata were not used in this update, as they relate to sections of RFC 793 elided from this document.  These include Errata ID 572, 575, and 1569.</t>
                <t>Note: Errata ID 3602 was not applied in this revision as it is duplicative of the 1122 corrections.</t>
            </list>
            Not related to RFC 793 content, this revision also makes small tweaks to the introductory text, fixes indentation of the pseudo header diagram, and notes that the Security Considerations should also include privacy, when this section is written.
        </t>
        <t>
            The -03 revision of draft-eddy-rfc793bis revises all discussion of the urgent pointer in order to comply with RFC 6093, 1122, and 1011.  Since 1122 held requirements on the urgent pointer, the full list of requirements was brought into an appendix of this document, so that it can be updated as-needed.
        </t>
        <t>
            The -04 revision of draft-eddy-rfc793bis includes the ISN generation changes from RFC 6528.
        </t>
        <t>
            The -05 revision of draft-eddy-rfc793bis incorporates MSS requirements and definitions from RFC 879, 1122, and 6691, as well as option-handling
            requirements from RFC 1122.
        </t>
        <t>
            The -00 revision of draft-ietf-tcpm-rfc793bis incorporates several additional clarifications and updates to the section on segmentation, many of which are based on feedback from Joe Touch improving from the initial text on this in the previous revision.
        </t>
        <t>
            The -01 revision incorporates the change to Reserved bits due to ECN, as well as many other changes that come from RFC 1122.
        </t>
        <t>
            The -02 revision has small formatting modifications in order to address xml2rfc warnings about long lines.  It was a quick update to avoid document expiration.  TCPM working group discussion in 2015 also indicated that that we should not try to add sections on implementation advice or similar non-normative information.
        </t>
        <t>
            The -03 revision incorporates more content from RFC 1122: Passive OPEN Calls, Time-To-Live, Multihoming, IP Options, ICMP messages, Data Communications, When to Send Data, When to Send a Window Update, Managing the Window, Probing Zero Windows, When to Send an ACK Segment.  The section on data communications was re-organized into clearer subsections (previously headings were embedded in the 793 text), and windows management advice from 793 was removed (as reviewed by TCPM working group) in favor of the 1122 additions on SWS, ZWP, and related topics.
        </t>
        <t>
           The -04 revision includes reference to RFC 6429 on the ZWP condition, RFC1122 material on TCP Connection Failures, TCP Keep-Alives, Acknowledging Queued Segments, and Remote Address Validation.  RTO computation is referenced from RFC 6298 rather than RFC 1122.

        </t>
        <t>
           The -05 revision includes the requirement to implement TCP congestion control with recommendation to implement ECN, the RFC 6633 update to 1122, which changed the requirement on responding to source quench ICMP messages, and discussion of ICMP (and ICMPv6) soft and hard errors per RFC 5461 (ICMPv6 handling for TCP doesn't seem to be mentioned elsewhere in standards track).
        </t>
        <t>
           The -06 revision includes an appendix on &quot;Other Implementation Notes&quot; to capture widely-deployed fundamental features that are not contained in the RFC series yet. It also added mention of RFC 6994 and the IANA TCP parameters registry as a reference.  It includes references to RFC 5961 in appropriate places.  The references to TOS were changed to DiffServ field, based on reflecting RFC 2474 as well as the IPv6 presence of traffic class (carrying DiffServ field) rather than TOS.
        </t>
	<t>
	The -07 revision includes reference to RFC 6191, updated security considerations, discussion of additional implementation considerations, and clarification of data on the SYN.
	</t>
	<t>
        The -08 revision includes changes based on:
	<list>
           <t>describing treatment of reserved bits (following TCPM mailing list thread from July 2014 on &quot;793bis item - reserved bit behavior&quot;</t>
           <t>addition a brief TCP key concepts section to make up for not including the outdated section 2 of RFC 793</t>
           <t>changed &quot;TCP&quot; to &quot;host&quot; to resolve conflict between 1122 wording on whether TCP or the network layer chooses an address when multihomed</t>
           <t>fixed/updated definition of options in glossary</t>
           <t>moved note on aggregating ACKs from 1122 to a more appropriate location</t>
           <t>resolved notes on IP precedence and security/compartment</t>
           <t>added implementation note on sequence number validation</t>
           <t>added note that PUSH does not apply when Nagle is active</t>
           <t>added 1122 content on asynchronous reports to replace 793 section on TCP to user messages</t>
	</list>
	</t>
	<t>
	The -09 revision fixes section numbering problems.
	</t>
	<t>
	The -10 revision includes additions to the security considerations based on comments from Joe Touch, and suggested edits on RST/FIN notification, RFC 2525 reference, and other edits suggested by Yuchung Cheng, as well as modifications to DiffServ text from Yuchung Cheng and Gorry Fairhurst.
	</t>
        <t>
        The -11 revision includes a start at identifying all of the requirements text and referencing each instance in the common table at the end of the document.
        </t>
        <t>
        The -12 revision completes the requirement language indexing started in -11 and adds necessary description of the PUSH functionality that was missing.
        </t>
	<t>
        The -13 revision  contains only changes in the inline editor notes.
	</t>
	<t>
	The -14 revision includes updates with regard to several comments from the mailing list, including editorial fixes, adding IANA considerations for the header flags, improving figure title placement, and breaking up the "Terminology" section into more appropriately titled subsections.
	</t>
	<t>
	The -15 revision has many technical and editorial corrections from Gorry Fairhurst's review, and subsequent discussion on the TCPM list, as well as some other collected clarifications and improvements from mailing list discussion.
	</t>
	<t>
        The -16 revision addresses several discussions that rose from additional reviews and follow-up on some of Gorry Fairhurst's comments from revision 14.
	</t>
        <t>
	The -17 revision includes errata 6222 from Charles Deng, update to the key words boilerplate, updated description of the header flags registry changes, and clarification about connections rather than users in the discussion of OPEN calls.
	</t>
	<t>
	The -18 revision includes editorial changes to the IANA considerations, based on comments from Richard Scheffenegger at the IETF 108 TCPM virtual meeting.
	</t>
	<t>
	The -19 revision includes editorial changes from Errata 6281 and 6282 reported by Merlin Buge.  It also includes WGLC changes noted by Mohamed Boucadair, Rahul Jadhav, Praveen Balasubramanian, Matt Olson, Yi Huang, Joe Touch, and Juhamatti Kuusisaari.
	</t>
	<t>
        The -20 revision includes text on congestion control based on mailing list and meeting discussion, put together in its final form by Markku Kojo.  It also clarifies that SACK, WS, and TS options are recommended for high performance, but not needed for basic interoperability.  It also clarifies that the length field is required for new TCP options.
	</t>

	<t>
The -21 revision includes slight changes to the header diagram for compatibility with tooling, from Stephen McQuistin, clarification on the meaning of idle connections from Yuchung Cheng, Neal Cardwell, Michael Scharf, and Richard Scheffenegger, editorial improvements from Markku Kojo, notes that some stacks suppress extra acknowledgments of the SYN when SYN-ACK carries data from Richard Scheffenegger, and adds MAY-18 numbering based on note from Jonathan Morton.
	</t>

	<t>
The -22 revision includes small clarifications on terminology (might versus may) and IPv6 extension headers versus IPv4 options, based on comments from Gorry Fairhurst.
	</t>

        <t>
The -23 revision has a fix to indentation from Michael Tuexen and idnits issues addressed from Michael Scharf.
	</t>

	<t>
The -24 revision incorporates changes after Martin Duke's AD review, including further feedback on those comments from Yuchung Cheng and Joe Touch.  Important changes for review include (1) removal of the need to check for the PUSH flag when evaluating the SWS override timer expiration, (2) clarification about receding urgent pointer, and (3) de-duplicating handling of the RST checking between step 4 and step 1.
	</t>

	<t>
The -25 revision incorporates changes based on the GENART review from Francis Dupont, SECDIR review from Kyle Rose, and OPSDIR review from Sarah Banks.
	</t>

        <t>Some other suggested changes that will not be incorporated in this 793 update unless TCPM consensus changes with regard to scope are:
        <list style="numbers">
            <t>Tony Sabatini's suggestion for describing DO field</t>
	    <t>Per discussion with Joe Touch (TAPS list, 6/20/2015), the description of the API could be revisited</t>
	    <t>Reducing the R2 value for SYNs has been suggested as a possible topic for future consideration.</t>
        </list>
        </t>

	<t>
        Early in the process of updating RFC 793, Scott Brim mentioned that this should include a PERPASS/privacy review.  This may be something for the chairs or AD to request during WGLC or IETF LC.
        </t>

        <?rfc subcompact="no" ?>
    </section>

    <section anchor="IANA" title="IANA Considerations">
    <t>
    In the &quot;Transmission Control Protocol (TCP) Header Flags&quot; registry, IANA is asked to make several changes described in this section.</t>
    <t>RFC 3168 originally created this registry, but only populated it with the new bits defined in RFC 3168, neglecting the other bits that had previously been described in RFC 793 and other documents.  Bit 7 has since also been updated by RFC 8311.</t>
    <t>The &quot;Bit&quot; column is renamed below as the &quot;Bit Offset&quot; column, since it references each header flag's offset within the 16-bit aligned view of the TCP header in <xref target="header_format"/>.  The bits in offsets 0 through 4 are the TCP segment Data Offset field, and not header flags.</t>
    <t>IANA should add a column for &quot;Assignment Notes&quot;.</t>
    <t>IANA should assign values indicated below.</t>
    <figure>
    <artwork>
   TCP Header Flags

   Bit      Name                                       Reference       Assignment Notes
  Offset
   ---      ----                                       ---------       ----------------
   4        Reserved for future use                    (this document)
   5        Reserved for future use                    (this document)
   6        Reserved for future use                    (this document)
   7        Reserved for future use                    [RFC8311]       Previously used by Historic [RFC3540] as NS (Nonce Sum)
   8        CWR (Congestion Window Reduced)            [RFC3168]
   9        ECE (ECN-Echo)                             [RFC3168]
   10       Urgent Pointer field is significant (URG)  (this document)
   11       Acknowledgment field is significant (ACK)  (this document)
   12       Push Function (PSH)                        (this document)
   13       Reset the connection (RST)                 (this document)
   14       Synchronize sequence numbers (SYN)         (this document)
   15       No more data from sender (FIN)             (this document)
    </artwork>
    </figure>

    <t>This TCP Header Flags registry should also be moved to a sub-registry under the global &quot;Transmission Control Protocol (TCP) Parameters registry (https://www.iana.org/assignments/tcp-parameters/tcp-parameters.xhtml).</t>

    <t>The registry's Registration Procedure should remain Standards Action, but the Reference can be updated to this document, and the Note removed.</t>
    </section>

    <section anchor="Security" title="Security and Privacy Considerations">
        <t>
The TCP design includes only rudimentary security features that improve the robustness and reliability of connections and application data transfer, but there are no built-in cryptographic capabilities to support any form of privacy, authentication, or other typical security functions.  Non-cryptographic enhancements (e.g. <xref target="RFC5961"/>) have been developed to improve robustness of TCP connections to particular types of attacks, but the applicability and protections of non-cryptographic enhancements are limited (e.g. see section 1.1 of <xref target="RFC5961"/>).
Applications typically utilize lower-layer (e.g. IPsec) and upper-layer (e.g. TLS) protocols to provide security and privacy for TCP connections and application data carried in TCP.  Methods based on TCP options have been developed as well, to support some security capabilities.
	</t>
	<t>
In order to fully protect TCP connections (including their control flags) IPsec
or the TCP Authentication Option (TCP-AO) <xref target="RFC5925"/> are the only
current effective methods.  Other methods discussed in this section may protect
the payload, but either only a subset of the fields (e.g. tcpcrypt <xref target="RFC8548"/>) or none at
all (e.g. TLS).  Other security features that have been added to TCP (e.g. ISN
generation, sequence number checks, and others) are only capable of partially
hindering attacks.

	</t>
	<t>
Applications using long-lived TCP flows have been vulnerable to attacks that exploit the processing of control flags described in earlier TCP specifications <xref target="RFC4953"/>.  TCP-MD5 was a commonly implemented TCP option to support authentication for some of these connections, but had flaws and is now deprecated.  TCP-AO provides a capability to protect long-lived TCP connections from attacks, and has superior properties to TCP-MD5.  It does not provide any privacy for application data, nor for the TCP headers.
	</t>
	<t>
The &quot;tcpcrypt&quot; <xref target="RFC8548"/> Experimental extension to TCP provides the ability to cryptographically protect connection data.  Metadata aspects of the TCP flow are still visible, but the application stream is well-protected.  Within the TCP header, only the urgent pointer and FIN flag are protected through tcpcrypt.
	</t>
        <t>
The TCP Roadmap <xref target="RFC7414"/> includes notes about several RFCs related to TCP security.  Many of the enhancements provided by these RFCs have been integrated into the present document, including ISN generation, mitigating blind in-window attacks, and improving handling of soft errors and ICMP packets.  These are all discussed in greater detail in the referenced RFCs that originally described the changes needed to earlier TCP specifications.  Additionally, see RFC 6093 <xref target="RFC6093"/> for discussion of security considerations related to the urgent pointer field, that has been deprecated.
        </t>
        <t>
Since TCP is often used for bulk transfer flows, some attacks are possible that abuse the TCP congestion control logic.  An example is &quot;ACK-division&quot; attacks. Updates that have been made to the TCP congestion control specifications include mechanisms like Appropriate Byte Counting (ABC) <xref target="RFC3465"/> that act as mitigations to these attacks.
	</t>
	<t>
Other attacks are focused on exhausting the resources of a TCP server.  Examples include SYN flooding <xref target="RFC4987"/> or wasting resources on non-progressing connections <xref target="RFC6429"/>.  Operating systems commonly implement mitigations for these attacks.  Some common defenses also utilize proxies, stateful firewalls, and other technologies outside of the end-host TCP implementation.
</t>
        <t>
The concept of a protocol's &quot;wire image&quot; is described in RFC 8546 <xref target="RFC8546"/>, which describes how TCP's cleartext headers expose more metadata to nodes on the path than is strictly required to route the packets to their destination.  On-path adversaries may be able to leverage this metadata.  Lessons learned in this respect from TCP have been applied in the design of newer transports like QUIC <xref target="RFC9000"/>.  Additionally, based partly on experiences with TCP and its extensions, there are considerations that might be applicable for future TCP extensions and other transports that the IETF has documented in RFC 9065 <xref target="RFC9065"/>, along with IAB recommendations in RFC 8558 <xref target="RFC8558"/> and <xref target="I-D.iab-use-it-or-lose-it"/>.
        </t>
    </section>
    <section title="Acknowledgements">
    <t>
    This document is largely a revision of RFC 793, which Jon Postel was the editor of.  Due to his excellent work, it was able to last for three decades before we felt the need to revise it.
    </t>
    <t>
    Andre Oppermann was a contributor and helped to edit the first revision of this document.
    </t>
    <t>
    We are thankful for the assistance of the IETF TCPM working group chairs, over the course of work on this document:
    <list>
        <t>Michael Scharf<vspace />
           Yoshifumi Nishida<vspace />
           Pasi Sarolahti<vspace />
           Michael Tuexen</t>
    </list>
    </t>
    <t>
    During the discussions of this work on the TCPM mailing list, in working group meetings, and via area reviews, helpful comments, critiques, and reviews were received from (listed alphabetically by last name): Praveen Balasubramanian, David Borman, Mohamed Boucadair, Bob Briscoe, Neal Cardwell, Yuchung Cheng, Martin Duke, Francis Dupont, Ted Faber, Gorry Fairhurst, Fernando Gont, Rodney Grimes, Yi Huang, Rahul Jadhav, Markku Kojo, Mike Kosek, Juhamatti Kuusisaari, Kevin Lahey, Kevin Mason, Matt Mathis, Stephen McQuistin, Jonathan Morton, Matt Olson, Tommy Pauly, Tom Petch, Hagen Paul Pfeifer, Kyle Rose, Anthony Sabatini, Michael Scharf, Greg Skinner, Joe Touch, Michael Tuexen, Reji Varghese, Tim Wicinski, Lloyd Wood, and Alex Zimmermann.
    </t>
    <t>
    Joe Touch provided additional help in clarifying the description of segment size parameters and PMTUD/PLPMTUD recommendations.  Markku Kojo helped put together the text in the section on TCP Congestion Control.
    </t>
    <t>
    This document includes content from errata that were reported by (listed chronologically): Yin Shuming, Bob Braden, Morris M. Keesan, Pei-chun Cheng, Constantin Hagemeier, Vishwas Manral, Mykyta Yevstifeyev, EungJun Yi, Botong Huang, Charles Deng, Merlin Buge.
    </t>
    </section>
</middle>

<!--  *****BACK MATTER ***** -->
<back>
    <!-- References split to informative and normative -->
    <references title="Normative References">
         <!-- A *really* full, totally OTT reference - Note, the "target" attribute of the 
	     "reference": if you want a URI printed in the reference, this is where it goes. -->
        <!--
        <reference anchor='RFC2119'
                   target='http://xml.resource.org/public/rfc/html/rfc2119.html'>
            <front>
                <title abbrev='RFC Key Words'>Key words for use in RFCs to Indicate Requirement 
                Levels</title>
                <author initials='S.' surname='Bradner' fullname='Scott Bradner'>
                    <organization>Harvard University</organization>
                    <address>
                        <postal>
                            <street>1350 Mass. Ave.</street>
                            <street>Cambridge</street>
                            <street>MA 02138</street>
                        </postal>
                        <phone>- +1 617 495 3864</phone>
                        <email>sob@harvard.edu</email>
                    </address>
                </author>
                <date year='1997' month='March' />
                <area>General</area>
                <keyword>keyword</keyword>
                <abstract>
                    <t>In many standards track documents several words are used to signify
                    the requirements in the specification.  These words are often
                    capitalized.  This document defines these words as they should be
                    interpreted in IETF documents.  Authors who follow these guidelines
                    should incorporate this phrase near the beginning of their document:

                        <list>
                            <t>
                            The key words &quot;MUST&quot;, &quot;MUST NOT&quot;, 
                            &quot;REQUIRED&quot;, &quot;SHALL&quot;, &quot;SHALL NOT&quot;,
                            &quot;SHOULD&quot;, &quot;SHOULD NOT&quot;, &quot;RECOMMENDED&quot;,
                            &quot;MAY&quot;, and &quot;OPTIONAL&quot; in this document are to be 
                            interpreted as described in RFC 2119.</t>
                        </list>
                    </t>
                    <t> 
                    Note that the force of these words is modified by the requirement level of 
                    the document in which they are used.</t>
                </abstract> 
            </front>

            <seriesInfo name='BCP' value='14' />
            <seriesInfo name='RFC' value='2119' />
            <format type='TXT' octets='4723' target='ftp://ftp.isi.edu/in-notes/rfc2119.txt' />
            <format type='HTML' octets='14486' 
                    target='http://xml.resource.org/public/rfc/html/rfc2119.html' />
            <format type='XML' octets='5661' 
                    target='http://xml.resource.org/public/rfc/xml/rfc2119.xml' />
        </reference>
    -->

        <!-- Right back at the beginning we defined an entity which (we asserted) would contain
             XML needed for a reference... this is where we use it. -->
        &RFC0791;
        &RFC1191;
        &RFC2119;
        &RFC2474;
        &RFC2675;
        &RFC2914;
        &RFC3168;
	&RFC5033;
	&RFC5681;
        &RFC6298;
        &RFC6633;
        &RFC8174;
        &RFC8200;
        &RFC8201;
	&RFC8961;
    </references>

    <references title="Informative References">
        <!-- A reference written by by an organization not a persoN. -->
        <!--
        <reference
            anchor="DOMINATION" >
            <front>
                <title>Ultimate Plan for Taking Over the World</title>
                <author>
                    <organization>Mad Dominators, Inc.</organization>
                </author>
                <date year="1984" />
            </front>
        </reference>
        -->
        &RFC0793;
        &RFC0896;
        &RFC1122;
        &RFC1349;
        &RFC1644;
        <!--&RFC1191;-->
        <!--&RFC2675;-->
        &RFC2018;
        &RFC2525;
        &RFC2873;
        &RFC2883;
        &RFC2923;
	&RFC3449;
	&RFC3465;
	&RFC4727;
        &RFC4821;
        &RFC4987;
        &RFC4953;
        &RFC5044;
        &RFC5461;
        &RFC5570;
        &RFC5795;
        &RFC5925;
        &RFC5961;
        &RFC6093;
        &RFC6191;

        &RFC6429;
        &RFC6528;
        &RFC6691;
        &RFC6864;
        &RFC6994;
	&RFC7094;
        &RFC7323;
        &RFC7413;
        &RFC7414;
        &RFC7657;
        &RFC8087;
        &RFC8095;
        &RFC8303;
        &RFC8504;
	&RFC8546;
        &RFC8548;
	&RFC8558;
        &RFC8684;
	&RFC9000;
	&RFC9065;

        <reference anchor="TCP-parameters-registry">
         <front>
          <title>Transmission Control Protocol (TCP) Parameters, https://www.iana.org/assignments/tcp-parameters/tcp-parameters.xhtml
          </title>
          <author>
           <organization>IANA</organization>
          </author>
          <date year="2019"/>
         </front>
        </reference>

        <reference anchor="header-flags-registry">
         <front>
          <title>Transmission Control Protocol (TCP) Header Flags, https://www.iana.org/assignments/tcp-header-flags/tcp-header-flags.xhtml
          </title>
          <author>
           <organization>IANA</organization>
          </author>
          <date year="2019"/>
         </front>
        </reference>

	&I-D.gont-tcpm-tcp-seccomp-prec;
	&I-D.gont-tcpm-tcp-seq-validation;
	&I-D.ietf-tcpm-tcp-edo;
	&I-D.mcquistin-augmented-ascii-diagrams;
	&I-D.iab-use-it-or-lose-it;

        <reference anchor="draft-minshall-nagle">
	 <front>
	  <title>A Proposed Modification to Nagle's Algorithm
	  </title>
	  <author initials="G" surname="Minshall" fullname="Greg Minshall">
	  </author>
	  <date month="June" year="1999"/>
	 </front>
	 <seriesInfo name="Internet-Draft" value="draft-minshall-nagle-01"/>
        </reference>

        <reference
            anchor="DS78" >
            <front>
                <title>Connection Management in Transport Protocols</title>
                <author initials = "Y" surname="Dalal"></author>
                <author initials = "C" surname="Sunshine"></author>
                <date year="1978" month="December" />
            </front>
            <seriesInfo name="Computer Networks" value="Vol. 2, No. 6, pp. 454-473"/>
        </reference>

        <reference
            anchor="FTY99">
	    <front>
                <title>The TIME-WAIT state in TCP and Its Effect on Busy Servers</title>
                <author initials = "T" surname="Faber"></author>
                <author initials = "J" surname="Touch"></author>
                <author initials = "W" surname="Yui"></author>
                <date year="1999" month="March" />
            </front>
            <seriesInfo name="Proceedings of IEEE INFOCOM" value="pp. 1573-1583"/>
        </reference>

    </references>
    <section title="Other Implementation Notes">
     <t>
This section includes additional notes and references on TCP implementation decisions that are currently not a part of the RFC series or included within the TCP standard.  These items can be considered by implementers, but there was not yet a consensus to include them in the standard.
     </t>

     <section title="IP Security Compartment and Precedence" anchor="seccomp">
<t>

The IPv4 specification <xref target="RFC0791"/> includes a precedence value in
the (now obsoleted) Type of Service field (TOS) field.  It was modified in
<xref target="RFC1349"/>, and then obsoleted by the definition of
Differentiated Services (DiffServ) <xref target="RFC2474"/>.  Setting and
conveying TOS between the network layer, TCP implementation, and applications is obsolete,
and replaced by DiffServ in the current TCP specification.

</t>
<t>

RFC 793 requires checking the IP security compartment and precedence on
incoming TCP segments for consistency within a connection, and with
application requests.  Each of these aspects of IP have become outdated,
without specific updates to RFC 793.  The issues with precedence were
fixed by <xref target="RFC2873"/>, which is Standards Track, and so this
present TCP specification includes those changes.  However, the state of
IP security options that may be used by MLS systems is not as clean.

</t>
<t>

Resetting connections when incoming packets do not meet expected security
compartment or precedence expectations has been recognized as a possible
attack vector <xref target="I-D.gont-tcpm-tcp-seccomp-prec"/>, and there has
been discussion about amending the TCP specification to prevent connections
from being aborted due to non-matching IP security compartment and DiffServ
codepoint values.

</t>
<section title="Precedence">
<t>

In DiffServ the former precedence values are treated as Class Selector
codepoints, and methods for compatible treatment are described in the DiffServ
architecture.  The RFC 793/1122 TCP specification includes logic intending to
have connections use the highest precedence requested by either endpoint
application, and to keep the precedence consistent throughout a connection.
This logic from the obsolete TOS is not applicable for DiffServ, and should
not be included in TCP implementations, though changes to DiffServ values
within a connection are discouraged.  For discussion of this, see RFC 7657 (sec
5.1, 5.3, and 6) <xref target="RFC7657"/>.

</t>
<t>

The obsoleted TOS processing rules in TCP assumed bidirectional (or symmetric) precedence values
used on a connection, but the DiffServ architecture is asymmetric.
Problems with the old TCP logic in this regard were described in <xref
target="RFC2873"/> and the solution described is to ignore IP precedence in
TCP.  Since RFC 2873 is a Standards Track document (although not marked as
updating RFC 793), current implementations are expected to be robust to these
conditions.  Note that the DiffServ field value used in each direction is a
part of the interface between TCP and the network layer, and values in use can be
indicated both ways between TCP and the application.

</t>
</section>
<section title="MLS Systems">
<t>

  The IP security option (IPSO) and compartment defined in <xref
  target="RFC0791"/> was refined in RFC 1038 that was later obsoleted by RFC
  1108.  The Commercial IP Security Option (CIPSO) is defined in FIPS-188, and
  is supported by some vendors and operating systems.  RFC 1108 is now
  Historic, though RFC 791 itself has not been updated to remove the IP
  security option.  For IPv6, a similar option (CALIPSO) has been defined <xref
  target="RFC5570"/>.  RFC 793 includes logic that includes the IP
  security/compartment information in treatment of TCP segments.  References to
  the IP &quot;security/compartment&quot; in this document may be relevant for
  Multi-Level Secure (MLS) system implementers, but can be ignored for non-MLS
  implementations, consistent with running code on the Internet.  See <xref
  target="seccomp"/> for further discussion.  Note that RFC 5570 describes some
  MLS networking scenarios where IPSO, CIPSO, or CALIPSO may be used.  In these
  special cases, TCP implementers should see section 7.3.1 of RFC 5570, and
  follow the guidance in that document.

</t>
</section>
     </section>
     <section title="Sequence Number Validation" anchor="seqval">
<t>
There are cases where the TCP sequence number validation rules can prevent ACK fields from being processed.  This can result in connection issues, as described in
     <xref target="I-D.gont-tcpm-tcp-seq-validation"/>, which includes descriptions of potential problems in conditions of simultaneous open, self-connects, simultaneous close, and simultaneous window probes.  The document also describes potential changes to the TCP specification to mitigate the issue by expanding the acceptable sequence numbers.
</t>
<t>
In Internet usage of TCP, these conditions are rarely occurring.  Common operating systems include different alternative mitigations, and the standard has not been updated yet to codify one of them, but implementers should consider the problems described in <xref target="I-D.gont-tcpm-tcp-seq-validation"/>.
</t>
     </section>
     <section title="Nagle Modification" anchor="minshall">
<t>In common operating systems, both the Nagle algorithm and delayed acknowledgements are implemented and enabled by default.  TCP is used by many applications that have a request-response style of communication, where the combination of the Nagle algorithm and delayed acknowledgements can result in poor application performance.  A modification to the Nagle algorithm is described in <xref target="draft-minshall-nagle"/> that improves the situation for these applications.
</t>
<t>This modification is implemented in some common operating systems, and does not impact TCP interoperability.  Additionally, many applications simply disable Nagle, since this is generally supported by a socket option.  The TCP standard has not been updated to include this Nagle modification, but implementers may find it beneficial to consider.</t>
     </section>
     <section title="Low Water Mark Settings">
     <t>Some operating system kernel TCP implementations include socket options that allow specifying the number of bytes in the buffer until the socket layer will pass sent data to TCP (SO_SNDLOWAT) or to the application on receiving (SO_RCVLOWAT).</t>
     <t>In addition, another socket option (TCP_NOTSENT_LOWAT) can be used to control the amount of unsent bytes in the write queue. This can help a sending TCP application to avoid creating large amounts of buffered data (and corresponding latency). As an example, this may be useful for applications that are multiplexing data from multiple upper level streams onto a connection, especially when streams may be a mix of interactive / real-time and bulk data transfer.</t>
     </section>
    </section>

    <section title="TCP Requirement Summary" anchor="reqs">
        <t>This section is adapted from RFC 1122.</t>
        <t>Note that there is no requirement related to PLPMTUD in this list, but that PLPMTUD is recommended.</t>
<figure>
    <artwork>

                                                 |        | | | |S| |
                                                 |        | | | |H| |F
                                                 |        | | | |O|M|o
                                                 |        | |S| |U|U|o
                                                 |        | |H| |L|S|t
                                                 |        |M|O| |D|T|n
                                                 |        |U|U|M| | |o
                                                 |        |S|L|A|N|N|t
                                                 |        |T|D|Y|O|O|t
FEATURE                                          | ReqID  | | | |T|T|e
-------------------------------------------------|--------|-|-|-|-|-|--
                                                 |        | | | | | |
Push flag                                        |        | | | | | |
  Aggregate or queue un-pushed data              | MAY-16 | | |x| | |
  Sender collapse successive PSH flags           | SHLD-27| |x| | | |
  SEND call can specify PUSH                     | MAY-15 | | |x| | |
    If cannot: sender buffer indefinitely        | MUST-60| | | | |x|
    If cannot: PSH last segment                  | MUST-61|x| | | | |
  Notify receiving ALP of PSH                    | MAY-17 | | |x| | |1
  Send max size segment when possible            | SHLD-28| |x| | | |
                                                 |        | | | | | |
Window                                           |        | | | | | |
  Treat as unsigned number                       | MUST-1 |x| | | | |
  Handle as 32-bit number                        | REC-1  | |x| | | |
  Shrink window from right                       | SHLD-14| | | |x| |
  - Send new data when window shrinks            | SHLD-15| | | |x| |
  - Retransmit old unacked data within window    | SHLD-16| |x| | | |
  - Time out conn for data past right edge       | SHLD-17| | | |x| |
  Robust against shrinking window                | MUST-34|x| | | | |
  Receiver's window closed indefinitely          | MAY-8  | | |x| | |
  Use standard probing logic                     | MUST-35|x| | | | |
  Sender probe zero window                       | MUST-36|x| | | | |
    First probe after RTO                        | SHLD-29| |x| | | |
    Exponential backoff                          | SHLD-30| |x| | | |
  Allow window stay zero indefinitely            | MUST-37|x| | | | |
  Retransmit old data beyond SND.UNA+SND.WND     | MAY-7  | | |x| | |
  Process RST and URG even with zero window      | MUST-66|x| | | | |
                                                 |        | | | | | |
Urgent Data                                      |        | | | | | |
  Include support for urgent pointer             | MUST-30|x| | | | |
  Pointer indicates first non-urgent octet       | MUST-62|x| | | | |
  Arbitrary length urgent data sequence          | MUST-31|x| | | | |
  Inform ALP asynchronously of urgent data       | MUST-32|x| | | | |1
  ALP can learn if/how much urgent data Q'd      | MUST-33|x| | | | |1
  ALP employ the urgent mechanism                | SHLD-13| | | |x| | 
                                                 |        | | | | | |
TCP Options                                      |        | | | | | |
  Support the mandatory option set               | MUST-4 |x| | | | |
  Receive TCP option in any segment              | MUST-5 |x| | | | |
  Ignore unsupported options                     | MUST-6 |x| | | | |
  Include length for all options except EOL+NOP  | MUST-68|x| | | | |
  Cope with illegal option length                | MUST-7 |x| | | | |
  Process options regardless of word alignment   | MUST-64|x| | | | |
  Implement sending &amp; receiving MSS option       | MUST-14|x| | | | |
  IPv4 Send MSS option unless 536                | SHLD-5 | |x| | | |
  IPv6 Send MSS option unless 1220               | SHLD-5 | |x| | | |
  Send MSS option always                         | MAY-3  | | |x| | |
  IPv4 Send-MSS default is 536                   | MUST-15|x| | | | |
  IPv6 Send-MSS default is 1220                  | MUST-15|x| | | | |
  Calculate effective send seg size              | MUST-16|x| | | | |
  MSS accounts for varying MTU                   | SHLD-6 | |x| | | |
  MSS not sent on non-SYN segments               | MUST-65| | | | |x|
  MSS value based on MMS_R                       | MUST-67|x| | | | |
                                                 |        | | | | | |
TCP Checksums                                    |        | | | | | |
  Sender compute checksum                        | MUST-2 |x| | | | |
  Receiver check checksum                        | MUST-3 |x| | | | |
                                                 |        | | | | | |
ISN Selection                                    |        | | | | | |
  Include a clock-driven ISN generator component | MUST-8 |x| | | | |
  Secure ISN generator with a PRF component      | SHLD-1 | |x| | | |
  PRF computable from outside the host           | MUST-9 | | | | |x|
                                                 |        | | | | | |
Opening Connections                              |        | | | | | |
  Support simultaneous open attempts             | MUST-10|x| | | | |
  SYN-RECEIVED remembers last state              | MUST-11|x| | | | |
  Passive Open call interfere with others        | MUST-41| | | | |x|
  Function: simultan. LISTENs for same port      | MUST-42|x| | | | |
  Ask IP for src address for SYN if necc.        | MUST-44|x| | | | |
    Otherwise, use local addr of conn.           | MUST-45|x| | | | |
  OPEN to broadcast/multicast IP Address         | MUST-46| | | | |x|
  Silently discard seg to bcast/mcast addr       | MUST-57|x| | | | |
                                                 |        | | | | | |
Closing Connections                              |        | | | | | |
  RST can contain data                           | SHLD-2 | |x| | | |
  Inform application of aborted conn             | MUST-12|x| | | | |
  Half-duplex close connections                  | MAY-1  | | |x| | |
    Send RST to indicate data lost               | SHLD-3 | |x| | | |
  In TIME-WAIT state for 2MSL seconds            | MUST-13|x| | | | |
    Accept SYN from TIME-WAIT state              | MAY-2  | | |x| | |
    Use Timestamps to reduce TIME-WAIT           | SHLD-4 | |x| | | |
                                                 |        | | | | | |
Retransmissions                                  |        | | | | | |
  Implement exponential backoff, slow start, and | MUST-19|x| | | | |
    congestion avoidance                         |        | | | | | |
  Retransmit with same IP ident                  | MAY-4  | | |x| | |
  Karn's algorithm                               | MUST-18|x| | | | |
                                                 |        | | | | | |
Generating ACKs:                                 |        | | | | | |
  Aggregate whenever possible                    | MUST-58|x| | | | |
  Queue out-of-order segments                    | SHLD-31| |x| | | |
  Process all Q'd before send ACK                | MUST-59|x| | | | |
  Send ACK for out-of-order segment              | MAY-13 | | |x| | |
  Delayed ACKs                                   | SHLD-18| |x| | | |
    Delay &lt; 0.5 seconds                          | MUST-40|x| | | | |
    Every 2nd full-sized segment or 2*RMSS ACK'd | SHLD-19|x| | | | |
  Receiver SWS-Avoidance Algorithm               | MUST-39|x| | | | |
                                                 |        | | | | | |
Sending data                                     |        | | | | | |
  Configurable TTL                               | MUST-49|x| | | | |
  Sender SWS-Avoidance Algorithm                 | MUST-38|x| | | | |
  Nagle algorithm                                | SHLD-7 | |x| | | |
    Application can disable Nagle algorithm      | MUST-17|x| | | | |
                                                 |        | | | | | |
Connection Failures:                             |        | | | | | |
  Negative advice to IP on R1 retxs              | MUST-20|x| | | | |
  Close connection on R2 retxs                   | MUST-20|x| | | | |
  ALP can set R2                                 | MUST-21|x| | | | |1
  Inform ALP of  R1&lt;=retxs&lt;R2                    | SHLD-9 | |x| | | |1
  Recommended value for R1                       | SHLD-10| |x| | | |
  Recommended value for R2                       | SHLD-11| |x| | | |
  Same mechanism for SYNs                        | MUST-22|x| | | | |
    R2 at least 3 minutes for SYN                | MUST-23|x| | | | |
                                                 |        | | | | | |
Send Keep-alive Packets:                         | MAY-5  | | |x| | |
  - Application can request                      | MUST-24|x| | | | |
  - Default is "off"                             | MUST-25|x| | | | |
  - Only send if idle for interval               | MUST-26|x| | | | |
  - Interval configurable                        | MUST-27|x| | | | |
  - Default at least 2 hrs.                      | MUST-28|x| | | | |
  - Tolerant of lost ACKs                        | MUST-29|x| | | | |
  - Send with no data                            | SHLD-12| |x| | | |
  - Configurable to send garbage octet           | MAY-6  | | |x| | |
                                                 |        | | | | | |
IP Options                                       |        | | | | | |
  Ignore options TCP doesn't understand          | MUST-50|x| | | | |
  Time Stamp support                             | MAY-10 | | |x| | |
  Record Route support                           | MAY-11 | | |x| | |
  Source Route:                                  |        | | | | | |
    ALP can specify                              | MUST-51|x| | | | |1
      Overrides src rt in datagram               | MUST-52|x| | | | |
    Build return route from src rt               | MUST-53|x| | | | |
    Later src route overrides                    | SHLD-24| |x| | | |
                                                 |        | | | | | |
Receiving ICMP Messages from IP                  | MUST-54|x| | | | |
  Dest. Unreach (0,1,5) =&gt; inform ALP            | SHLD-25| |x| | | |
  Dest. Unreach (0,1,5) =&gt; abort conn            | MUST-56| | | | |x|
  Dest. Unreach (2-4) =&gt; abort conn              | SHLD-26| |x| | | |
  Source Quench =&gt; silent discard                | MUST-55|x| | | | |
  Time Exceeded =&gt; tell ALP, don't abort         | MUST-56| | | | |x|
  Param Problem =&gt; tell ALP, don't abort         | MUST-56| | | | |x|
                                                 |        | | | | | |
Address Validation                               |        | | | | | |
  Reject OPEN call to invalid IP address         | MUST-46|x| | | | |
  Reject SYN from invalid IP address             | MUST-63|x| | | | |
  Silently discard SYN to bcast/mcast addr       | MUST-57|x| | | | |
                                                 |        | | | | | |
TCP/ALP Interface Services                       |        | | | | | |
  Error Report mechanism                         | MUST-47|x| | | | |
  ALP can disable Error Report Routine           | SHLD-20| |x| | | |
  ALP can specify DiffServ field for sending     | MUST-48|x| | | | |
    Passed unchanged to IP                       | SHLD-22| |x| | | |
  ALP can change DiffServ field during connection| SHLD-21| |x| | | |
  ALP generally changing DiffServ during conn.   | SHLD-23| | | |x| |
  Pass received DiffServ field up to ALP         | MAY-9  | | |x| | |
  FLUSH call                                     | MAY-14 | | |x| | |
  Optional local IP addr parm. in OPEN           | MUST-43|x| | | | |
                                                 |        | | | | | |
RFC 5961 Support:                                |        | | | | | |
  Implement data injection protection            | MAY-12 | | |x| | |
                                                 |        | | | | | |
Explicit Congestion Notification:                |        | | | | | |
  Support ECN                                    | SHLD-8 | |x| | | |
                                                 |        | | | | | |
Alternative Congestion Control:                  |        | | | | | |
  Implement alternative conformant algorithm(s)  | MAY-18 | | |x| | |
-------------------------------------------------|--------|-|-|-|-|-|-

</artwork></figure>
<t>
FOOTNOTES:

(1)  "ALP" means Application-Layer Program.
</t>
    </section>
</back>

</rfc>
