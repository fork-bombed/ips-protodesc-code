# Generic helpers

letter      = anything:x ?(x in ascii_letters)
punc        = anything:x ?(x in punctuation)
digit       = anything:x ?(x in '0123456789')
letterdigit = letter|digit
word        = <(letter|punc|number)+>:ls -> str(ls)
alphanum    = <(letter|number|'_')+>:ls -> str(ls)
wordnum     = <(letter|number|punc)+>:ls -> str(ls)
alphanumhyp = <(letter|number|'_'|'-')+>:ls -> str(ls)

uppercase_letter = anything:x ?(x in ascii_uppercase) -> x
lowercase_letter = anything:x ?(x in ascii_lowercase) -> x
number           = <digit+>:ds -> int(ds)

capitalised_word = uppercase_letter:l <(lowercase_letter|punc)*>:ls -> str(l + ls)

pdu_part = <(alphanumhyp:w ?(w not in ["is", "protocol", "PDUs", "and", "or", "using"]))>:name -> name
pdu_name = <(pdu_part ws)*>:name -> stem("".join(name).strip())

# expressions redo
parens = '(' ws equality_expr:e ws ')' -> e
value  = number:n -> new_constant("Number", n)
       | parens
       | method_call:method -> method
       | field_access:access -> access
       | short_field_name:name -> new_methodinvocation(new_fieldaccess(new_this(), name), "to_number", [])

eq  = ws '==' ws bool_expr:n -> ('==', n)
neq = ws '!=' ws bool_expr:n -> ('==', n)

and = ws '&&' ws ord_expr:n -> ('&&', n)
or  = ws '||' ws ord_expr:n -> ('||', n)
not = ws '!'  ws ord_expr:n -> ('!',  n)

leq = ws '<=' ws addsub_expr:n -> ('<=', n)
lt  = ws '<'  ws addsub_expr:n -> ('<',  n)
geq = ws '>=' ws addsub_expr:n -> ('>=', n)
gt  = ws '>'  ws addsub_expr:n -> ('>',  n)

add = ws '+' ws muldiv_expr:n -> ('+', n)
sub = ws '-' ws muldiv_expr:n -> ('-', n)

mul = ws '*' ws pow_expr:n -> ('*', n)
div = ws '/' ws pow_expr:n -> ('/', n)
mod = ws '%' ws pow_expr:n -> ('%', n)

pow = '^' ws value:n -> ('^', n)

equality = (eq | neq)
boolean  = (and | or | not)
ordinal  = (leq | lt | geq | gt)
addsub   = (add | sub)
muldiv   = (mul | div | mod)

equality_expr = bool_expr:left   equality*:rights -> build_tree(left, rights, "")
bool_expr     = ord_expr:left    boolean*:rights  -> build_tree(left, rights, "")
ord_expr      = addsub_expr:left ordinal*:rights  -> build_tree(left, rights, "")
addsub_expr   = muldiv_expr:left addsub*:rights   -> build_tree(left, rights, "")
muldiv_expr   = pow_expr:left    muldiv*:rights   -> build_tree(left, rights, "")
pow_expr      = value:left       pow*:rights      -> build_tree(left, rights, "")

method_call = 'size(' short_field_name:name ')' -> new_methodinvocation(new_fieldaccess(new_this(), name), "size", [])
field_access = short_field_name:name '.' short_field_name:field -> new_methodinvocation(new_fieldaccess(new_fieldaccess(new_this(), name), field), "to_number", [])

field_name = <(alphanum:w ' '?)*>:name -> name.strip()

short_field_name = alphanum:name -> name.strip()

words = <alphanum ws>*:w -> " ".join(w)
field_opts = words:start (',' ws words)*:rest  -> [" ".join(start.split()) ] + [ " ".join(r.split()) for r in rest]

field_title_name_only = ws field_name:full_label
                        ('(' short_field_name:short_label ')' -> short_label)?:short_label
                        '.' -> new_field(full_label,
                                         short_label,
                                         None,
                                         None,
                                         None,
                                         None,
                                         None,
                                         False)

field_title_variable = ws field_name:full_label
                        ('(' short_field_name:short_label ')' -> short_label)?:short_label
                        ': variable length'
                        '.' -> new_field(full_label,
                                         short_label,
                                         None,
                                         None,
                                         None,
                                         None,
                                         None,
                                         False)

field_title_array = ws field_name:full_label
                    ('(' short_field_name:short_label ')' -> short_label)?:short_label
                    ': [' pdu_name:element_type_name ']'
                    '.' -> new_field(full_label,
                                     short_label,
                                     None,
                                     None,
                                     element_type_name,
                                     None,
                                     None,
                                     True)

field_title_size = ws field_name:full_label
                   ('(' short_field_name:short_label ')' -> short_label)?:short_label
                   ': '
                   equality_expr:size
                   ' '
                   ('bits'|'bytes'|'bit'|'byte'|(pdu_name:name)->name):units
                   ws ('(' field_opts:opts ')' -> opts)?:opts
                   ('; present only when ' equality_expr:is_present -> is_present)?:is_present
                   '.' -> new_field(full_label,
                                    short_label,
                                    opts,
                                    size,
                                    units,
                                    None,
                                    is_present,
                                    False)

field_title_size_constraint = ws field_name:full_label
                              ('(' short_field_name:short_label ')' -> short_label)?:short_label
                              ': '
                              (equality_expr:size)?
                              ' '
                              ('bits'|'bytes'|'bit'|'byte'|(pdu_name:name)->name):units
                              ws ('(' field_opts:opts ')' -> opts )?:opts
                              '; '
                              equality_expr:value_constraint
                              ('; present only when ' equality_expr:is_present -> is_present)?:is_present
                              '.' -> new_field(full_label,
                                               short_label,
                                               opts,
                                               size,
                                               units,
                                               value_constraint,
                                               is_present,
                                               False)

field_title_constraint = ws field_name:full_label
                         ('(' short_field_name:short_label ')' -> short_label)?:short_label
                         ': '
                         equality_expr:value_constraint
                         ws ('(' field_opts:opts ')' -> opts )?:opts
                         '.'
                         ('; present only when ' equality_expr:is_present -> is_present)?:is_present
                         -> new_field(full_label,
                                      short_label,
                                      opts,
                                      None,
                                      None,
                                      value_constraint,
                                      is_present,
                                      False)

field_title_array_constraint = ws field_name:full_label
                               ('(' short_field_name:short_label ')' -> short_label)?:short_label
                               ': [' pdu_name:element_type_name ']' '; '
                               equality_expr:value_constraint
                               ('; present only when ' equality_expr:is_present -> is_present)?:is_present
                               '.' -> new_field(full_label,
                                                short_label,
                                                None,
                                                None,
                                                element_type_name,
                                                value_constraint,
                                                is_present,
                                                True)

field_title = field_title_name_only | field_title_variable | field_title_size | field_title_size_constraint | field_title_constraint | field_title_array | field_title_array_constraint

# Preamble

preamble = <(word:w ?(w != "An" and w != "A") ws?)+>? ("An "|"A ") pdu_name:name "is" ws "formatted" ws "as" ws "follows" anything*:x -> name

# Diagram
vsep = ws <'+-'+ '+'?>:unit -> unit
vcontent = ws <(anything:x ?(x != '+') | ('+' ~'-'))>+:c  vsep -> "".join(c)
diagram = ws (anything:x ?(x != '+'))+:hdr
          vsep  vcontent*:vc anything*:x-> [ _v.strip() for _v in vc]

fchar = anything:x ?(x not in ['|', ':', '.', '+' ]):field  ->  field
dfield = <fchar*>:c <('|' | ':' | '...' | '+')>:delim  ->  (c.strip(' '), delim, int((len(c)+1)/2))
one_line =  ws ('|' | ':' ) dfield*:field_name  ws ->  [ ('var' if delim == '...' else len, desc.strip())
                                                         for desc, delim, len in field_name]
multi_line =  ws ('|' | ':' | '+') ws dfield*:field_name  ws ->  [resolve_multiline_length(field_name)]
multi_line_split = one_line+:m -> m


# Enums
variant_list = ("an " | "a ") pdu_name:name (', ' ('or ')? ("an " | "a ") pdu_name:names)*:names -> [name] + names
enum_more_than_two = <(word:w ?(w != "An" and w != "A")' '?)+>? ("An "|"A ") pdu_name:name "is one of: " variant_list:names "." -> (name, names)
enum_two = <(word:w ?(w != "An" and w != "A")' '?)+>? ("An "|"A ") pdu_name:name "is either " ("an " | "a ") pdu_name:var1 'or ' ("an " | "a ") pdu_name:var2 "." -> (name, [var1, var2])

enum = enum_two | enum_more_than_two

# Context use
context_use = <(word:w ?(w != "On")' '?)+>? ('On receipt, the value of ' equality_expr:field_name ' is stored as ' pdu_name:context_field_name '.' -> (field_name, context_field_name))?:context_use -> context_use

# Functions
function = <(word:w ?(w != "The")' '?)+>? 'The ' short_field_name:name "function is defined as:" -> (name)
parameter = (short_field_name:name ': ' pdu_name:type) -> (name, type)
parameter_list = parameter:p (',' ws parameter:ps)*:ps -> [p] + ps
function_signature = 'func ' short_field_name:name '(' parameter_list:params ')' ws '->'  ws pdu_name:return_type anything* -> (name, params, return_type)

# Function use
pdu_list_comma = pdu_name:name (', ' pdu_name:names)*:names -> [name] + names
serialised_to_func = <(word:w ?(w != "An" and w != "A")' '?)+>? ("An "|"A ") pdu_name:from_type "is serialised to " ("an " | "a ") pdu_name:to_type 'using the ' short_field_name:func_name ' function.' anything* -> (from_type, to_type, func_name)
parsed_from_func = <(word:w ?(w != "An" and w != "A")' '?)+>? ("An "|"A ") pdu_name:to_type "is parsed from " ("an " | "a ") pdu_name:from_type 'using the ' short_field_name:func_name  ' function.' anything* -> (from_type, to_type, func_name)

# Protocol Definition
pdu_list = pdu_name:name (',' ws ('and ')? pdu_name:names)*:names -> [name] + names
protocol_definition = <(word:w ?(w != 'The' and w != "This") ws)+>? 'This' ws 'document' ws 'describes' ws 'the' ws pdu_name:p_name_1 ws 'protocol.' ws 'The' ws pdu_name:p_name_2 ws 'protocol' ws 'uses' ws pdu_list:names '.' -> (p_name_1, names)
