hspace = ' ' | '\t'
vspace =  '\r\n' | '\r' | '\n'
ws = (hspace | vspace)*

digit = anything:x ?(x in '0123456789') -> x
number = <digit+>:num -> int(num)
char = anything:x ?(x.lower() in 'abcdefghijklmonpqrstuvwxyz-_') -> x
string = <((char|digit)+ ws)+>:str -> str
dots = '..'
hexchar = anything:x ?(x.lower() in '0123456789abcdef') -> x
hex = '0x' <hexchar+>:chars -> '0x'+chars

value = hex:x -> int(x, 0)
    | number

range = value:first dots value:last -> new_range(first, last)

arblen = dots -> new_range()
varlen = value:first dots value:last -> new_range(first, last)
minval = value:min dots -> new_range(min)
maxval = dots value:max -> new_range(max=max)

size = varlen
    | minval
    | maxval
    | arblen
    | value
    | string

fixed_value = range
    | value

basic_field = string:name ws '(' size:size ')' -> new_field(name.strip(), size)
fixed_field = string:name ws '(' size:size ')' ws '=' ws fixed_value:val -> new_field(name.strip(), size, val)
opt_field = '[' (fixed_field|basic_field):field ']' -> new_optional_field(field)
rep_field = (fixed_field|basic_field):field ws '...' -> new_repeating_field(field)

enum_field = string:type ws ',' -> new_enum_value(type.strip())

field = (fixed_field
    | rep_field
    | basic_field
    | opt_field):field ws ',' -> field

structure = ws string:name ws '{' 
        (ws field)+:fields
        ws '}' ws -> new_struct(name.strip(), fields)

enum = ws string:name ws '{'
        (ws enum_field)+:values
        ws '}' ws -> new_enum(name.strip(), values)

pdu_part = (<(char|digit)+>:x ?(x not in ['uses','with'])):name -> name
pdu_name = <(pdu_part ws)+>:name -> name.strip()

pdu_def = ('a '|'an ') pdu_name:packet ws 'uses a' ws pdu_name:pdu ws ('.'|'with a type') anything* -> (packet, pdu)
